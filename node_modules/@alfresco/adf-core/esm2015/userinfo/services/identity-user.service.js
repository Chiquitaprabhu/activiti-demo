/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { IdentityUserModel } from '../models/identity-user.model';
import { JwtHelperService } from '../../services/jwt-helper.service';
import { AppConfigService } from '../../app-config/app-config.service';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/jwt-helper.service";
import * as i2 from "../../services/alfresco-api.service";
import * as i3 from "../../app-config/app-config.service";
export class IdentityUserService {
    /**
     * @param {?} jwtHelperService
     * @param {?} alfrescoApiService
     * @param {?} appConfigService
     */
    constructor(jwtHelperService, alfrescoApiService, appConfigService) {
        this.jwtHelperService = jwtHelperService;
        this.alfrescoApiService = alfrescoApiService;
        this.appConfigService = appConfigService;
    }
    /**
     * Gets the name and other basic details of the current user.
     * @return {?} The user's details
     */
    getCurrentUserInfo() {
        /** @type {?} */
        const familyName = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.FAMILY_NAME);
        /** @type {?} */
        const givenName = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.GIVEN_NAME);
        /** @type {?} */
        const email = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.USER_EMAIL);
        /** @type {?} */
        const username = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.USER_PREFERRED_USERNAME);
        /** @type {?} */
        const user = { firstName: givenName, lastName: familyName, email: email, username: username };
        return new IdentityUserModel(user);
    }
    /**
     * Find users based on search input.
     * @param {?} search Search query string
     * @return {?} List of users
     */
    findUsersByName(search) {
        if (search === '') {
            return of([]);
        }
        /** @type {?} */
        const url = this.buildUserUrl();
        /** @type {?} */
        const httpMethod = 'GET';
        /** @type {?} */
        const pathParams = {};
        /** @type {?} */
        const queryParams = { search: search };
        /** @type {?} */
        const bodyParam = {};
        /** @type {?} */
        const headerParams = {};
        /** @type {?} */
        const formParams = {};
        /** @type {?} */
        const contentTypes = ['application/json'];
        /** @type {?} */
        const accepts = ['application/json'];
        return (from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)));
    }
    /**
     * Find users based on username input.
     * @param {?} username Search query string
     * @return {?} List of users
     */
    findUserByUsername(username) {
        if (username === '') {
            return of([]);
        }
        /** @type {?} */
        const url = this.buildUserUrl();
        /** @type {?} */
        const httpMethod = 'GET';
        /** @type {?} */
        const pathParams = {};
        /** @type {?} */
        const queryParams = { username: username };
        /** @type {?} */
        const bodyParam = {};
        /** @type {?} */
        const headerParams = {};
        /** @type {?} */
        const formParams = {};
        /** @type {?} */
        const contentTypes = ['application/json'];
        /** @type {?} */
        const accepts = ['application/json'];
        return (from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)));
    }
    /**
     * Find users based on email input.
     * @param {?} email Search query string
     * @return {?} List of users
     */
    findUserByEmail(email) {
        if (email === '') {
            return of([]);
        }
        /** @type {?} */
        const url = this.buildUserUrl();
        /** @type {?} */
        const httpMethod = 'GET';
        /** @type {?} */
        const pathParams = {};
        /** @type {?} */
        const queryParams = { email: email };
        /** @type {?} */
        const bodyParam = {};
        /** @type {?} */
        const headerParams = {};
        /** @type {?} */
        const formParams = {};
        /** @type {?} */
        const contentTypes = ['application/json'];
        /** @type {?} */
        const accepts = ['application/json'];
        return (from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)));
    }
    /**
     * Find users based on id input.
     * @param {?} id Search query string
     * @return {?} users object
     */
    findUserById(id) {
        if (id === '') {
            return of([]);
        }
        /** @type {?} */
        const url = this.buildUserUrl() + '/' + id;
        /** @type {?} */
        const httpMethod = 'GET';
        /** @type {?} */
        const pathParams = {};
        /** @type {?} */
        const queryParams = {};
        /** @type {?} */
        const bodyParam = {};
        /** @type {?} */
        const headerParams = {};
        /** @type {?} */
        const formParams = {};
        /** @type {?} */
        const contentTypes = ['application/json'];
        /** @type {?} */
        const accepts = ['application/json'];
        return (from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)));
    }
    /**
     * Get client roles of a user for a particular client.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} List of client roles
     */
    getClientRoles(userId, clientId) {
        /** @type {?} */
        const url = this.buildUserClientRoleMapping(userId, clientId);
        /** @type {?} */
        const httpMethod = 'GET';
        /** @type {?} */
        const pathParams = {};
        /** @type {?} */
        const queryParams = {};
        /** @type {?} */
        const bodyParam = {};
        /** @type {?} */
        const headerParams = {};
        /** @type {?} */
        const formParams = {};
        /** @type {?} */
        const contentTypes = ['application/json'];
        /** @type {?} */
        const accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null));
    }
    /**
     * Checks whether user has access to a client app.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} True if the user has access, false otherwise
     */
    checkUserHasClientApp(userId, clientId) {
        return this.getClientRoles(userId, clientId).pipe(map((/**
         * @param {?} clientRoles
         * @return {?}
         */
        (clientRoles) => {
            if (clientRoles.length > 0) {
                return true;
            }
            return false;
        })));
    }
    /**
     * Checks whether a user has any of the client app roles.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    checkUserHasAnyClientAppRole(userId, clientId, roleNames) {
        return this.getClientRoles(userId, clientId).pipe(map((/**
         * @param {?} clientRoles
         * @return {?}
         */
        (clientRoles) => {
            /** @type {?} */
            let hasRole = false;
            if (clientRoles.length > 0) {
                roleNames.forEach((/**
                 * @param {?} roleName
                 * @return {?}
                 */
                (roleName) => {
                    /** @type {?} */
                    const role = clientRoles.find((/**
                     * @param {?} availableRole
                     * @return {?}
                     */
                    (availableRole) => {
                        return availableRole.name === roleName;
                    }));
                    if (role) {
                        hasRole = true;
                        return;
                    }
                }));
            }
            return hasRole;
        })));
    }
    /**
     * Gets the client ID for an application.
     * @param {?} applicationName Name of the application
     * @return {?} Client ID string
     */
    getClientIdByApplicationName(applicationName) {
        /** @type {?} */
        const url = this.buildGetClientsUrl();
        /** @type {?} */
        const httpMethod = 'GET';
        /** @type {?} */
        const pathParams = {};
        /** @type {?} */
        const queryParams = { clientId: applicationName };
        /** @type {?} */
        const bodyParam = {};
        /** @type {?} */
        const headerParams = {};
        /** @type {?} */
        const formParams = {};
        /** @type {?} */
        const contentTypes = ['application/json'];
        /** @type {?} */
        const accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance()
            .oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            /** @type {?} */
            const clientId = response && response.length > 0 ? response[0].id : '';
            return clientId;
        })));
    }
    /**
     * Checks if a user has access to an application.
     * @param {?} userId ID of the user
     * @param {?} applicationName Name of the application
     * @return {?} True if the user has access, false otherwise
     */
    checkUserHasApplicationAccess(userId, applicationName) {
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap((/**
         * @param {?} clientId
         * @return {?}
         */
        (clientId) => {
            return this.checkUserHasClientApp(userId, clientId);
        })));
    }
    /**
     * Checks if a user has any application role.
     * @param {?} userId ID of the target user
     * @param {?} applicationName Name of the application
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    checkUserHasAnyApplicationRole(userId, applicationName, roleNames) {
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap((/**
         * @param {?} clientId
         * @return {?}
         */
        (clientId) => {
            return this.checkUserHasAnyClientAppRole(userId, clientId, roleNames);
        })));
    }
    /**
     * Gets details for all users.
     * @return {?} Array of user info objects
     */
    getUsers() {
        /** @type {?} */
        const url = this.buildUserUrl();
        /** @type {?} */
        const httpMethod = 'GET';
        /** @type {?} */
        const pathParams = {};
        /** @type {?} */
        const queryParams = {};
        /** @type {?} */
        const bodyParam = {};
        /** @type {?} */
        const headerParams = {};
        /** @type {?} */
        const formParams = {};
        /** @type {?} */
        const authNames = [];
        /** @type {?} */
        const contentTypes = ['application/json'];
        /** @type {?} */
        const accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, null, null)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            return response;
        })));
    }
    /**
     * Gets a list of roles for a user.
     * @param {?} userId ID of the user
     * @return {?} Array of role info objects
     */
    getUserRoles(userId) {
        /** @type {?} */
        const url = this.buildRolesUrl(userId);
        /** @type {?} */
        const httpMethod = 'GET';
        /** @type {?} */
        const pathParams = {};
        /** @type {?} */
        const queryParams = {};
        /** @type {?} */
        const bodyParam = {};
        /** @type {?} */
        const headerParams = {};
        /** @type {?} */
        const formParams = {};
        /** @type {?} */
        const contentTypes = ['application/json'];
        /** @type {?} */
        const accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            return response;
        })));
    }
    /**
     * Gets an array of users (including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    getUsersByRolesWithCurrentUser(roleNames) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const filteredUsers = [];
            if (roleNames && roleNames.length > 0) {
                /** @type {?} */
                const users = yield this.getUsers().toPromise();
                for (let i = 0; i < users.length; i++) {
                    /** @type {?} */
                    const hasAnyRole = yield this.userHasAnyRole(users[i].id, roleNames);
                    if (hasAnyRole) {
                        filteredUsers.push(users[i]);
                    }
                }
            }
            return filteredUsers;
        });
    }
    /**
     * Gets an array of users (not including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    getUsersByRolesWithoutCurrentUser(roleNames) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const filteredUsers = [];
            if (roleNames && roleNames.length > 0) {
                /** @type {?} */
                const currentUser = this.getCurrentUserInfo();
                /** @type {?} */
                let users = yield this.getUsers().toPromise();
                users = users.filter((/**
                 * @param {?} user
                 * @return {?}
                 */
                (user) => { return user.username !== currentUser.username; }));
                for (let i = 0; i < users.length; i++) {
                    /** @type {?} */
                    const hasAnyRole = yield this.userHasAnyRole(users[i].id, roleNames);
                    if (hasAnyRole) {
                        filteredUsers.push(users[i]);
                    }
                }
            }
            return filteredUsers;
        });
    }
    /**
     * @private
     * @param {?} userId
     * @param {?} roleNames
     * @return {?}
     */
    userHasAnyRole(userId, roleNames) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const userRoles = yield this.getUserRoles(userId).toPromise();
            /** @type {?} */
            const hasAnyRole = roleNames.some((/**
             * @param {?} roleName
             * @return {?}
             */
            (roleName) => {
                /** @type {?} */
                const filteredRoles = userRoles.filter((/**
                 * @param {?} userRole
                 * @return {?}
                 */
                (userRole) => {
                    return userRole.name.toLocaleLowerCase() === roleName.toLocaleLowerCase();
                }));
                return filteredRoles.length > 0;
            }));
            return hasAnyRole;
        });
    }
    /**
     * Checks if a user has one of the roles from a list.
     * @param {?} userId ID of the target user
     * @param {?} roleNames Array of roles to check for
     * @return {?} True if the user has one of the roles, false otherwise
     */
    checkUserHasRole(userId, roleNames) {
        return this.getUserRoles(userId).pipe(map((/**
         * @param {?} userRoles
         * @return {?}
         */
        (userRoles) => {
            /** @type {?} */
            let hasRole = false;
            if (userRoles && userRoles.length > 0) {
                roleNames.forEach((/**
                 * @param {?} roleName
                 * @return {?}
                 */
                (roleName) => {
                    /** @type {?} */
                    const role = userRoles.find((/**
                     * @param {?} userRole
                     * @return {?}
                     */
                    (userRole) => {
                        return roleName === userRole.name;
                    }));
                    if (role) {
                        hasRole = true;
                        return;
                    }
                }));
            }
            return hasRole;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    buildUserUrl() {
        return `${this.appConfigService.get('identityHost')}/users`;
    }
    /**
     * @private
     * @param {?} userId
     * @param {?} clientId
     * @return {?}
     */
    buildUserClientRoleMapping(userId, clientId) {
        return `${this.appConfigService.get('identityHost')}/users/${userId}/role-mappings/clients/${clientId}`;
    }
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    buildRolesUrl(userId) {
        return `${this.appConfigService.get('identityHost')}/users/${userId}/role-mappings/realm/composite`;
    }
    /**
     * @private
     * @return {?}
     */
    buildGetClientsUrl() {
        return `${this.appConfigService.get('identityHost')}/clients`;
    }
}
IdentityUserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IdentityUserService.ctorParameters = () => [
    { type: JwtHelperService },
    { type: AlfrescoApiService },
    { type: AppConfigService }
];
/** @nocollapse */ IdentityUserService.ngInjectableDef = i0.defineInjectable({ factory: function IdentityUserService_Factory() { return new IdentityUserService(i0.inject(i1.JwtHelperService), i0.inject(i2.AlfrescoApiService), i0.inject(i3.AppConfigService)); }, token: IdentityUserService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.jwtHelperService;
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.alfrescoApiService;
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.appConfigService;
}
//# sourceMappingURL=data:application/json;base64,