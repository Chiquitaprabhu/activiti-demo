/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material';
import { TranslationService } from './translation.service';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/snack-bar";
import * as i2 from "./translation.service";
import * as i3 from "../app-config/app-config.service";
export class NotificationService {
    /**
     * @param {?} snackBar
     * @param {?} translationService
     * @param {?} appConfigService
     */
    constructor(snackBar, translationService, appConfigService) {
        this.snackBar = snackBar;
        this.translationService = translationService;
        this.appConfigService = appConfigService;
        this.DEFAULT_DURATION_MESSAGE = 5000;
        this.messages = new Subject();
        this.DEFAULT_DURATION_MESSAGE = this.appConfigService.get(AppConfigValues.NOTIFY_DURATION) || this.DEFAULT_DURATION_MESSAGE;
    }
    /**
     * Opens a SnackBar notification to show a message.
     * @param {?} message The message (or resource key) to show.
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    openSnackMessage(message, config) {
        if (!config) {
            config = this.DEFAULT_DURATION_MESSAGE;
        }
        /** @type {?} */
        const translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        this.messages.next({ message: translatedMessage, dateTime: new Date });
        return this.snackBar.open(translatedMessage, null, config);
    }
    /**
     * Opens a SnackBar notification with a message and a response button.
     * @param {?} message The message (or resource key) to show.
     * @param {?} action Caption for the response button
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    openSnackMessageAction(message, action, config) {
        if (!config) {
            config = this.DEFAULT_DURATION_MESSAGE;
        }
        /** @type {?} */
        const translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        this.messages.next({ message: translatedMessage, dateTime: new Date });
        return this.snackBar.open(translatedMessage, action, config);
    }
    /**
     *  dismiss the notification snackbar
     * @return {?}
     */
    dismissSnackMessageAction() {
        return this.snackBar.dismiss();
    }
    /**
     * @protected
     * @param {?} message
     * @param {?} panelClass
     * @param {?=} action
     * @return {?}
     */
    showMessage(message, panelClass, action) {
        message = this.translationService.instant(message);
        this.messages.next({ message: message, dateTime: new Date });
        return this.snackBar.open(message, action, {
            duration: this.DEFAULT_DURATION_MESSAGE,
            panelClass
        });
    }
    /**
     * Rase error message
     * @param {?} message Text message or translation key for the message.
     * @param {?=} action Action name
     * @return {?}
     */
    showError(message, action) {
        return this.showMessage(message, 'adf-error-snackbar', action);
    }
    /**
     * Rase info message
     * @param {?} message Text message or translation key for the message.
     * @param {?=} action Action name
     * @return {?}
     */
    showInfo(message, action) {
        return this.showMessage(message, 'adf-info-snackbar', action);
    }
    /**
     * Rase warning message
     * @param {?} message Text message or translation key for the message.
     * @param {?=} action Action name
     * @return {?}
     */
    showWarning(message, action) {
        return this.showMessage(message, 'adf-warning-snackbar', action);
    }
}
NotificationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NotificationService.ctorParameters = () => [
    { type: MatSnackBar },
    { type: TranslationService },
    { type: AppConfigService }
];
/** @nocollapse */ NotificationService.ngInjectableDef = i0.defineInjectable({ factory: function NotificationService_Factory() { return new NotificationService(i0.inject(i1.MatSnackBar), i0.inject(i2.TranslationService), i0.inject(i3.AppConfigService)); }, token: NotificationService, providedIn: "root" });
if (false) {
    /** @type {?} */
    NotificationService.prototype.DEFAULT_DURATION_MESSAGE;
    /** @type {?} */
    NotificationService.prototype.messages;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.snackBar;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.translationService;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.appConfigService;
}
//# sourceMappingURL=data:application/json;base64,