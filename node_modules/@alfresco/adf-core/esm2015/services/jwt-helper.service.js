/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class JwtHelperService {
    constructor() {
    }
    /**
     * Decodes a JSON web token into a JS object.
     * @param {?} token Token in encoded form
     * @return {?} Decoded token data object
     */
    decodeToken(token) {
        /** @type {?} */
        const parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        /** @type {?} */
        const decoded = this.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token');
        }
        return JSON.parse(decoded);
    }
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    urlBase64Decode(token) {
        /** @type {?} */
        let output = token.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw new Error('Illegal base64url string!');
            }
        }
        return decodeURIComponent(escape(window.atob(output)));
    }
    /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} key Key name of the field to retrieve
     * @return {?} Value from the token
     */
    getValueFromLocalAccessToken(key) {
        /** @type {?} */
        const accessToken = localStorage.getItem(JwtHelperService.USER_ACCESS_TOKEN);
        return this.getValueFromToken(accessToken, key);
    }
    /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} accessToken
     * @param {?} key accessToken
     * @return {?} Value from the token
     */
    getValueFromToken(accessToken, key) {
        /** @type {?} */
        let value;
        if (accessToken) {
            /** @type {?} */
            const tokenPayload = this.decodeToken(accessToken);
            value = tokenPayload[key];
        }
        return (/** @type {?} */ (value));
    }
}
JwtHelperService.USER_NAME = 'name';
JwtHelperService.FAMILY_NAME = 'family_name';
JwtHelperService.GIVEN_NAME = 'given_name';
JwtHelperService.USER_EMAIL = 'email';
JwtHelperService.USER_ACCESS_TOKEN = 'access_token';
JwtHelperService.USER_PREFERRED_USERNAME = 'preferred_username';
JwtHelperService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
JwtHelperService.ctorParameters = () => [];
/** @nocollapse */ JwtHelperService.ngInjectableDef = i0.defineInjectable({ factory: function JwtHelperService_Factory() { return new JwtHelperService(); }, token: JwtHelperService, providedIn: "root" });
if (false) {
    /** @type {?} */
    JwtHelperService.USER_NAME;
    /** @type {?} */
    JwtHelperService.FAMILY_NAME;
    /** @type {?} */
    JwtHelperService.GIVEN_NAME;
    /** @type {?} */
    JwtHelperService.USER_EMAIL;
    /** @type {?} */
    JwtHelperService.USER_ACCESS_TOKEN;
    /** @type {?} */
    JwtHelperService.USER_PREFERRED_USERNAME;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWhlbHBlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvand0LWhlbHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLE1BQU0sT0FBTyxnQkFBZ0I7SUFTekI7SUFDQSxDQUFDOzs7Ozs7SUFPRCxXQUFXLENBQUMsS0FBSzs7Y0FDUCxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFFOUIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDNUM7O2NBRUssT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7U0FDOUM7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Ozs7O0lBRU8sZUFBZSxDQUFDLEtBQUs7O1lBQ3JCLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztRQUN4RCxRQUFRLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ0osTUFBTTthQUNUO1lBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDSixNQUFNLElBQUksSUFBSSxDQUFDO2dCQUNmLE1BQU07YUFDVDtZQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ0osTUFBTSxJQUFJLEdBQUcsQ0FBQztnQkFDZCxNQUFNO2FBQ1Q7WUFDRCxPQUFPLENBQUMsQ0FBQztnQkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7YUFDaEQ7U0FDSjtRQUNELE9BQU8sa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7Ozs7SUFPRCw0QkFBNEIsQ0FBSSxHQUFXOztjQUNqQyxXQUFXLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQztRQUM1RSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7Ozs7Ozs7SUFRRCxpQkFBaUIsQ0FBSSxXQUFtQixFQUFFLEdBQVc7O1lBQzdDLEtBQUs7UUFDVCxJQUFJLFdBQVcsRUFBRTs7a0JBQ1AsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO1lBQ2xELEtBQUssR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDN0I7UUFDRCxPQUFPLG1CQUFJLEtBQUssRUFBQSxDQUFDO0lBQ3JCLENBQUM7O0FBMUVNLDBCQUFTLEdBQUcsTUFBTSxDQUFDO0FBQ25CLDRCQUFXLEdBQUcsYUFBYSxDQUFDO0FBQzVCLDJCQUFVLEdBQUcsWUFBWSxDQUFDO0FBQzFCLDJCQUFVLEdBQUcsT0FBTyxDQUFDO0FBQ3JCLGtDQUFpQixHQUFHLGNBQWMsQ0FBQztBQUNuQyx3Q0FBdUIsR0FBRyxvQkFBb0IsQ0FBQzs7WUFWekQsVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7Ozs7O0lBR0csMkJBQTBCOztJQUMxQiw2QkFBbUM7O0lBQ25DLDRCQUFpQzs7SUFDakMsNEJBQTRCOztJQUM1QixtQ0FBMEM7O0lBQzFDLHlDQUFzRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBKd3RIZWxwZXJTZXJ2aWNlIHtcblxuICAgIHN0YXRpYyBVU0VSX05BTUUgPSAnbmFtZSc7XG4gICAgc3RhdGljIEZBTUlMWV9OQU1FID0gJ2ZhbWlseV9uYW1lJztcbiAgICBzdGF0aWMgR0lWRU5fTkFNRSA9ICdnaXZlbl9uYW1lJztcbiAgICBzdGF0aWMgVVNFUl9FTUFJTCA9ICdlbWFpbCc7XG4gICAgc3RhdGljIFVTRVJfQUNDRVNTX1RPS0VOID0gJ2FjY2Vzc190b2tlbic7XG4gICAgc3RhdGljIFVTRVJfUFJFRkVSUkVEX1VTRVJOQU1FID0gJ3ByZWZlcnJlZF91c2VybmFtZSc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgSlNPTiB3ZWIgdG9rZW4gaW50byBhIEpTIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gdG9rZW4gVG9rZW4gaW4gZW5jb2RlZCBmb3JtXG4gICAgICogQHJldHVybnMgRGVjb2RlZCB0b2tlbiBkYXRhIG9iamVjdFxuICAgICAqL1xuICAgIGRlY29kZVRva2VuKHRva2VuKTogT2JqZWN0IHtcbiAgICAgICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xuXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSldUIG11c3QgaGF2ZSAzIHBhcnRzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy51cmxCYXNlNjREZWNvZGUocGFydHNbMV0pO1xuICAgICAgICBpZiAoIWRlY29kZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRlY29kZSB0aGUgdG9rZW4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRlY29kZWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXJsQmFzZTY0RGVjb2RlKHRva2VuKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG91dHB1dCA9IHRva2VuLnJlcGxhY2UoLy0vZywgJysnKS5yZXBsYWNlKC9fL2csICcvJyk7XG4gICAgICAgIHN3aXRjaCAob3V0cHV0Lmxlbmd0aCAlIDQpIHtcbiAgICAgICAgICAgIGNhc2UgMDoge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9ICc9PSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJz0nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBiYXNlNjR1cmwgc3RyaW5nIScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHdpbmRvdy5hdG9iKG91dHB1dCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmFtZWQgdmFsdWUgZnJvbSB0aGUgdXNlciBhY2Nlc3MgdG9rZW4uXG4gICAgICogQHBhcmFtIGtleSBLZXkgbmFtZSBvZiB0aGUgZmllbGQgdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyBWYWx1ZSBmcm9tIHRoZSB0b2tlblxuICAgICAqL1xuICAgIGdldFZhbHVlRnJvbUxvY2FsQWNjZXNzVG9rZW48VD4oa2V5OiBzdHJpbmcpOiBUIHtcbiAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShKd3RIZWxwZXJTZXJ2aWNlLlVTRVJfQUNDRVNTX1RPS0VOKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVGcm9tVG9rZW4oYWNjZXNzVG9rZW4sIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5hbWVkIHZhbHVlIGZyb20gdGhlIHVzZXIgYWNjZXNzIHRva2VuLlxuICAgICAqIEBwYXJhbSBrZXkgYWNjZXNzVG9rZW5cbiAgICAgKiBAcGFyYW0ga2V5IEtleSBuYW1lIG9mIHRoZSBmaWVsZCB0byByZXRyaWV2ZVxuICAgICAqIEByZXR1cm5zIFZhbHVlIGZyb20gdGhlIHRva2VuXG4gICAgICovXG4gICAgZ2V0VmFsdWVGcm9tVG9rZW48VD4oYWNjZXNzVG9rZW46IHN0cmluZywga2V5OiBzdHJpbmcpOiBUIHtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuUGF5bG9hZCA9IHRoaXMuZGVjb2RlVG9rZW4oYWNjZXNzVG9rZW4pO1xuICAgICAgICAgICAgdmFsdWUgPSB0b2tlblBheWxvYWRba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPFQ+IHZhbHVlO1xuICAgIH1cbn1cbiJdfQ==