/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { AuthenticationService } from './authentication.service';
import { AppConfigService } from '../app-config/app-config.service';
import { AuthGuardBase } from './auth-guard-base';
import { JwtHelperService } from './jwt-helper.service';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-helper.service";
import * as i2 from "./authentication.service";
import * as i3 from "@angular/router";
import * as i4 from "../app-config/app-config.service";
export class AuthGuard extends AuthGuardBase {
    /**
     * @param {?} jwtHelperService
     * @param {?} authenticationService
     * @param {?} router
     * @param {?} appConfigService
     */
    constructor(jwtHelperService, authenticationService, router, appConfigService) {
        super(authenticationService, router, appConfigService);
        this.jwtHelperService = jwtHelperService;
        this.ticketChangeBind = this.ticketChange.bind(this);
        window.addEventListener('storage', this.ticketChangeBind);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ticketChange(event) {
        if (event.key === 'ticket-ECM' && event.newValue !== event.oldValue) {
            this.ticketChangeRedirect(event, 'ECM');
        }
        if (event.key === 'ticket-BPM' && event.newValue !== event.oldValue) {
            this.ticketChangeRedirect(event, 'BPM');
        }
        if (event.key === JwtHelperService.USER_ACCESS_TOKEN &&
            this.jwtHelperService.getValueFromToken(event.newValue, JwtHelperService.USER_PREFERRED_USERNAME) !==
                this.jwtHelperService.getValueFromToken(event.oldValue, JwtHelperService.USER_PREFERRED_USERNAME)) {
            this.ticketChangeRedirect(event, 'ALL');
        }
    }
    /**
     * @private
     * @param {?} event
     * @param {?} provider
     * @return {?}
     */
    ticketChangeRedirect(event, provider) {
        if (!event.newValue) {
            this.redirectToUrl(provider, this.router.url);
        }
        else {
            window.location.reload();
        }
        window.removeEventListener('storage', this.ticketChangeBind);
    }
    /**
     * @param {?} activeRoute
     * @param {?} redirectUrl
     * @return {?}
     */
    checkLogin(activeRoute, redirectUrl) {
        if (this.authenticationService.isLoggedIn() || this.withCredentials) {
            return true;
        }
        if (!this.authenticationService.isOauth() || this.isOAuthWithoutSilentLogin()) {
            this.redirectToUrl('ALL', redirectUrl);
        }
        return false;
    }
}
AuthGuard.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AuthGuard.ctorParameters = () => [
    { type: JwtHelperService },
    { type: AuthenticationService },
    { type: Router },
    { type: AppConfigService }
];
/** @nocollapse */ AuthGuard.ngInjectableDef = i0.defineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(i0.inject(i1.JwtHelperService), i0.inject(i2.AuthenticationService), i0.inject(i3.Router), i0.inject(i4.AppConfigService)); }, token: AuthGuard, providedIn: "root" });
if (false) {
    /** @type {?} */
    AuthGuard.prototype.ticketChangeBind;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.jwtHelperService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvYXV0aC1ndWFyZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwQixNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7OztBQUt4RCxNQUFNLE9BQU8sU0FBVSxTQUFRLGFBQWE7Ozs7Ozs7SUFJeEMsWUFBb0IsZ0JBQWtDLEVBQzFDLHFCQUE0QyxFQUM1QyxNQUFjLEVBQ2QsZ0JBQWtDO1FBQzFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUp2QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBS2xELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVyRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLEtBQW1CO1FBQzVCLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxZQUFZLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ2pFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0M7UUFFRCxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssWUFBWSxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNqRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzNDO1FBRUQsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLGdCQUFnQixDQUFDLGlCQUFpQjtZQUNoRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQztnQkFDakcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsRUFBRTtZQUNuRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzNDO0lBQ0wsQ0FBQzs7Ozs7OztJQUVPLG9CQUFvQixDQUFDLEtBQW1CLEVBQUUsUUFBZ0I7UUFDOUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNqRDthQUFNO1lBQ0gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUM1QjtRQUVELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDakUsQ0FBQzs7Ozs7O0lBRUQsVUFBVSxDQUFDLFdBQW1DLEVBQUUsV0FBbUI7UUFDL0QsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNqRSxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMseUJBQXlCLEVBQUUsRUFBRTtZQUMzRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztTQUMxQztRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7OztZQXBESixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFKUSxnQkFBZ0I7WUFKaEIscUJBQXFCO1lBREcsTUFBTTtZQUc5QixnQkFBZ0I7Ozs7O0lBU3JCLHFDQUFzQjs7Ozs7SUFFVixxQ0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi9hcHAtY29uZmlnL2FwcC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBBdXRoR3VhcmRCYXNlIH0gZnJvbSAnLi9hdXRoLWd1YXJkLWJhc2UnO1xuaW1wb3J0IHsgSnd0SGVscGVyU2VydmljZSB9IGZyb20gJy4vand0LWhlbHBlci5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBdXRoR3VhcmQgZXh0ZW5kcyBBdXRoR3VhcmRCYXNlIHtcblxuICAgIHRpY2tldENoYW5nZUJpbmQ6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgand0SGVscGVyU2VydmljZTogSnd0SGVscGVyU2VydmljZSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgICAgICAgICBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGF1dGhlbnRpY2F0aW9uU2VydmljZSwgcm91dGVyLCBhcHBDb25maWdTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy50aWNrZXRDaGFuZ2VCaW5kID0gdGhpcy50aWNrZXRDaGFuZ2UuYmluZCh0aGlzKTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIHRoaXMudGlja2V0Q2hhbmdlQmluZCk7XG4gICAgfVxuXG4gICAgdGlja2V0Q2hhbmdlKGV2ZW50OiBTdG9yYWdlRXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ3RpY2tldC1FQ00nICYmIGV2ZW50Lm5ld1ZhbHVlICE9PSBldmVudC5vbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy50aWNrZXRDaGFuZ2VSZWRpcmVjdChldmVudCwgJ0VDTScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ3RpY2tldC1CUE0nICYmIGV2ZW50Lm5ld1ZhbHVlICE9PSBldmVudC5vbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy50aWNrZXRDaGFuZ2VSZWRpcmVjdChldmVudCwgJ0JQTScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gSnd0SGVscGVyU2VydmljZS5VU0VSX0FDQ0VTU19UT0tFTiAmJlxuICAgICAgICAgICAgdGhpcy5qd3RIZWxwZXJTZXJ2aWNlLmdldFZhbHVlRnJvbVRva2VuKGV2ZW50Lm5ld1ZhbHVlLCBKd3RIZWxwZXJTZXJ2aWNlLlVTRVJfUFJFRkVSUkVEX1VTRVJOQU1FKSAhPT1cbiAgICAgICAgICAgIHRoaXMuand0SGVscGVyU2VydmljZS5nZXRWYWx1ZUZyb21Ub2tlbihldmVudC5vbGRWYWx1ZSwgSnd0SGVscGVyU2VydmljZS5VU0VSX1BSRUZFUlJFRF9VU0VSTkFNRSkpIHtcbiAgICAgICAgICAgIHRoaXMudGlja2V0Q2hhbmdlUmVkaXJlY3QoZXZlbnQsICdBTEwnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdGlja2V0Q2hhbmdlUmVkaXJlY3QoZXZlbnQ6IFN0b3JhZ2VFdmVudCwgcHJvdmlkZXI6IHN0cmluZykge1xuICAgICAgICBpZiAoIWV2ZW50Lm5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnJlZGlyZWN0VG9VcmwocHJvdmlkZXIsIHRoaXMucm91dGVyLnVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIHRoaXMudGlja2V0Q2hhbmdlQmluZCk7XG4gICAgfVxuXG4gICAgY2hlY2tMb2dpbihhY3RpdmVSb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgcmVkaXJlY3RVcmw6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4gfCBQcm9taXNlPGJvb2xlYW4+IHwgYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmF1dGhlbnRpY2F0aW9uU2VydmljZS5pc0xvZ2dlZEluKCkgfHwgdGhpcy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UuaXNPYXV0aCgpIHx8IHRoaXMuaXNPQXV0aFdpdGhvdXRTaWxlbnRMb2dpbigpKSB7XG4gICAgICAgICAgICB0aGlzLnJlZGlyZWN0VG9VcmwoJ0FMTCcsIHJlZGlyZWN0VXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iXX0=