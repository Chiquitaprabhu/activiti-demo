/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import moment from 'moment-es6';
import { from, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
export class WidgetVisibilityService {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * @param {?} form
     * @return {?}
     */
    refreshVisibility(form) {
        if (form && form.tabs && form.tabs.length > 0) {
            form.tabs.map((/**
             * @param {?} tabModel
             * @return {?}
             */
            (tabModel) => this.refreshEntityVisibility(tabModel)));
        }
        if (form) {
            form.getFormFields().map((/**
             * @param {?} field
             * @return {?}
             */
            (field) => this.refreshEntityVisibility(field)));
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    refreshEntityVisibility(element) {
        /** @type {?} */
        const visible = this.evaluateVisibility(element.form, element.visibilityCondition);
        element.isVisible = visible;
    }
    /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    evaluateVisibility(form, visibilityObj) {
        /** @type {?} */
        const isLeftFieldPresent = visibilityObj && (visibilityObj.leftFormFieldId || visibilityObj.leftRestResponseId);
        if (!isLeftFieldPresent || isLeftFieldPresent === 'null') {
            return true;
        }
        else {
            return this.isFieldVisible(form, visibilityObj);
        }
    }
    /**
     * @param {?} form
     * @param {?} visibilityObj
     * @param {?=} accumulator
     * @param {?=} result
     * @return {?}
     */
    isFieldVisible(form, visibilityObj, accumulator = [], result = false) {
        /** @type {?} */
        const leftValue = this.getLeftValue(form, visibilityObj);
        /** @type {?} */
        const rightValue = this.getRightValue(form, visibilityObj);
        /** @type {?} */
        const actualResult = this.evaluateCondition(leftValue, rightValue, visibilityObj.operator);
        accumulator.push({ value: actualResult, operator: visibilityObj.nextConditionOperator });
        if (visibilityObj.nextCondition) {
            result = this.isFieldVisible(form, visibilityObj.nextCondition, accumulator);
        }
        else {
            result = accumulator[0].value;
            for (let i = 1; i < accumulator.length; i++) {
                result = this.evaluateLogicalOperation(accumulator[i - 1].operator, result, accumulator[i].value);
            }
        }
        return result;
    }
    /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    getLeftValue(form, visibilityObj) {
        /** @type {?} */
        let leftValue = '';
        if (visibilityObj.leftRestResponseId && visibilityObj.leftRestResponseId !== 'null') {
            leftValue = this.getVariableValue(form, visibilityObj.leftRestResponseId, this.processVarList);
        }
        else if (visibilityObj.leftFormFieldId) {
            leftValue = this.getFormValue(form, visibilityObj.leftFormFieldId);
            leftValue = leftValue ? leftValue : this.getVariableValue(form, visibilityObj.leftFormFieldId, this.processVarList);
        }
        return leftValue;
    }
    /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    getRightValue(form, visibilityObj) {
        /** @type {?} */
        let valueFound = '';
        if (visibilityObj.rightRestResponseId) {
            valueFound = this.getVariableValue(form, visibilityObj.rightRestResponseId, this.processVarList);
        }
        else if (visibilityObj.rightFormFieldId) {
            valueFound = this.getFormValue(form, visibilityObj.rightFormFieldId);
        }
        else {
            if (moment(visibilityObj.rightValue, 'YYYY-MM-DD', true).isValid()) {
                valueFound = visibilityObj.rightValue + 'T00:00:00.000Z';
            }
            else {
                valueFound = visibilityObj.rightValue;
            }
        }
        return valueFound;
    }
    /**
     * @param {?} form
     * @param {?} fieldId
     * @return {?}
     */
    getFormValue(form, fieldId) {
        /** @type {?} */
        let value = this.getFieldValue(form.values, fieldId);
        if (!value) {
            value = this.searchValueInForm(form, fieldId);
        }
        return value;
    }
    /**
     * @param {?} valueList
     * @param {?} fieldId
     * @return {?}
     */
    getFieldValue(valueList, fieldId) {
        /** @type {?} */
        let dropDownFilterByName;
        /** @type {?} */
        let valueFound;
        if (fieldId && fieldId.indexOf('_LABEL') > 0) {
            dropDownFilterByName = fieldId.substring(0, fieldId.length - 6);
            if (valueList[dropDownFilterByName]) {
                valueFound = valueList[dropDownFilterByName].name;
            }
        }
        else if (valueList[fieldId] && valueList[fieldId].id) {
            valueFound = valueList[fieldId].id;
        }
        else {
            valueFound = valueList[fieldId];
        }
        return valueFound;
    }
    /**
     * @param {?} form
     * @param {?} fieldId
     * @return {?}
     */
    searchValueInForm(form, fieldId) {
        /** @type {?} */
        let fieldValue = '';
        form.getFormFields().forEach((/**
         * @param {?} formField
         * @return {?}
         */
        (formField) => {
            if (this.isSearchedField(formField, fieldId)) {
                fieldValue = this.getObjectValue(formField, fieldId);
                if (!fieldValue) {
                    if (formField.value && formField.value.id) {
                        fieldValue = formField.value.id;
                    }
                    else {
                        fieldValue = formField.value;
                    }
                }
            }
        }));
        return fieldValue;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} fieldId
     * @return {?}
     */
    getObjectValue(field, fieldId) {
        /** @type {?} */
        let value = '';
        if (field.value && field.value.name) {
            value = field.value.name;
        }
        else if (field.options) {
            /** @type {?} */
            const option = field.options.find((/**
             * @param {?} opt
             * @return {?}
             */
            (opt) => opt.id === field.value));
            if (option) {
                value = this.getValueFromOption(fieldId, option);
            }
        }
        return value;
    }
    /**
     * @private
     * @param {?} fieldId
     * @param {?} option
     * @return {?}
     */
    getValueFromOption(fieldId, option) {
        /** @type {?} */
        let optionValue = '';
        if (fieldId && fieldId.indexOf('_LABEL') > 0) {
            optionValue = option.name;
        }
        else {
            optionValue = option.id;
        }
        return optionValue;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} fieldToFind
     * @return {?}
     */
    isSearchedField(field, fieldToFind) {
        /** @type {?} */
        const formattedFieldName = this.removeLabel(field, fieldToFind);
        return field.id ? field.id.toUpperCase() === formattedFieldName.toUpperCase() : false;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} fieldToFind
     * @return {?}
     */
    removeLabel(field, fieldToFind) {
        /** @type {?} */
        let formattedFieldName = fieldToFind || '';
        if (field.fieldType === 'RestFieldRepresentation' && fieldToFind.indexOf('_LABEL') > 0) {
            formattedFieldName = fieldToFind.substring(0, fieldToFind.length - 6);
        }
        return formattedFieldName;
    }
    /**
     * @param {?} form
     * @param {?} name
     * @param {?} processVarList
     * @return {?}
     */
    getVariableValue(form, name, processVarList) {
        return this.getFormVariableValue(form, name) ||
            this.getProcessVariableValue(name, processVarList);
    }
    /**
     * @private
     * @param {?} form
     * @param {?} identifier
     * @return {?}
     */
    getFormVariableValue(form, identifier) {
        /** @type {?} */
        const variables = this.getFormVariables(form);
        if (variables) {
            /** @type {?} */
            const formVariable = variables.find((/**
             * @param {?} formVar
             * @return {?}
             */
            (formVar) => {
                return formVar.name === identifier || formVar.id === identifier;
            }));
            /** @type {?} */
            let value;
            if (formVariable) {
                value = formVariable.value;
                if (formVariable.type === 'date') {
                    value += 'T00:00:00.000Z';
                }
            }
            return value;
        }
    }
    /**
     * @private
     * @param {?} form
     * @return {?}
     */
    getFormVariables(form) {
        return form.json.variables;
    }
    /**
     * @private
     * @param {?} name
     * @param {?} processVarList
     * @return {?}
     */
    getProcessVariableValue(name, processVarList) {
        if (processVarList) {
            /** @type {?} */
            const processVariable = processVarList.find((/**
             * @param {?} variable
             * @return {?}
             */
            (variable) => variable.id === name));
            if (processVariable) {
                return processVariable.value;
            }
        }
    }
    /**
     * @param {?} logicOp
     * @param {?} previousValue
     * @param {?} newValue
     * @return {?}
     */
    evaluateLogicalOperation(logicOp, previousValue, newValue) {
        switch (logicOp) {
            case 'and':
                return previousValue && newValue;
            case 'or':
                return previousValue || newValue;
            case 'and-not':
                return previousValue && !newValue;
            case 'or-not':
                return previousValue || !newValue;
            default:
                this.logService.error('NO valid operation! wrong op request : ' + logicOp);
                break;
        }
    }
    /**
     * @param {?} leftValue
     * @param {?} rightValue
     * @param {?} operator
     * @return {?}
     */
    evaluateCondition(leftValue, rightValue, operator) {
        switch (operator) {
            case '==':
                return leftValue + '' === rightValue + '';
            case '<':
                return leftValue < rightValue;
            case '!=':
                return leftValue + '' !== rightValue + '';
            case '>':
                return leftValue > rightValue;
            case '>=':
                return leftValue >= rightValue;
            case '<=':
                return leftValue <= rightValue;
            case 'empty':
                return leftValue ? leftValue === '' : true;
            case '!empty':
                return leftValue ? leftValue !== '' : false;
            default:
                this.logService.error('NO valid operation!');
                break;
        }
        return;
    }
    /**
     * @return {?}
     */
    cleanProcessVariable() {
        this.processVarList = [];
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    getTaskProcessVariable(taskId) {
        return from(this.apiService.getInstance().activiti.taskFormsApi.getTaskFormVariables(taskId))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const jsonRes = this.toJson(res);
            this.processVarList = (/** @type {?} */ (jsonRes));
            return jsonRes;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} res
     * @return {?}
     */
    toJson(res) {
        return res || {};
    }
    /**
     * @private
     * @param {?} err
     * @return {?}
     */
    handleError(err) {
        this.logService.error('Error while performing a call');
        return throwError('Error while performing a call - Server error');
    }
}
WidgetVisibilityService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WidgetVisibilityService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/** @nocollapse */ WidgetVisibilityService.ngInjectableDef = i0.defineInjectable({ factory: function WidgetVisibilityService_Factory() { return new WidgetVisibilityService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.LogService)); }, token: WidgetVisibilityService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    WidgetVisibilityService.prototype.processVarList;
    /**
     * @type {?}
     * @private
     */
    WidgetVisibilityService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    WidgetVisibilityService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,