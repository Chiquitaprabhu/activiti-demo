/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { FormFieldEvent } from './../../../events/form-field.event';
import { ValidateFormFieldEvent } from './../../../events/validate-form-field.event';
import { ValidateFormEvent } from './../../../events/validate-form.event';
import { ContainerModel } from './container.model';
import { FormFieldTypes } from './form-field-types';
import { FormFieldModel } from './form-field.model';
import { FormOutcomeModel } from './form-outcome.model';
import { TabModel } from './tab.model';
import { FORM_FIELD_VALIDATORS } from './form-field-validator';
import { FormBaseModel } from '../../form-base.model';
export class FormModel extends FormBaseModel {
    /**
     * @param {?=} formRepresentationJSON
     * @param {?=} formValues
     * @param {?=} readOnly
     * @param {?=} formService
     */
    constructor(formRepresentationJSON, formValues, readOnly = false, formService) {
        super();
        this.formService = formService;
        this.taskName = FormModel.UNSET_TASK_NAME;
        this.customFieldTemplates = {};
        this.fieldValidators = [...FORM_FIELD_VALIDATORS];
        this.readOnly = readOnly;
        if (formRepresentationJSON) {
            this.json = formRepresentationJSON;
            this.id = formRepresentationJSON.id;
            this.name = formRepresentationJSON.name;
            this.taskId = formRepresentationJSON.taskId;
            this.taskName = formRepresentationJSON.taskName || formRepresentationJSON.name || FormModel.UNSET_TASK_NAME;
            this.processDefinitionId = formRepresentationJSON.processDefinitionId;
            this.customFieldTemplates = formRepresentationJSON.customFieldTemplates || {};
            this.selectedOutcome = formRepresentationJSON.selectedOutcome || {};
            this.className = formRepresentationJSON.className || '';
            /** @type {?} */
            const tabCache = {};
            this.processVariables = formRepresentationJSON.processVariables;
            this.tabs = (formRepresentationJSON.tabs || []).map((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                /** @type {?} */
                const model = new TabModel(this, t);
                tabCache[model.id] = model;
                return model;
            }));
            this.fields = this.parseRootFields(formRepresentationJSON);
            if (formValues) {
                this.loadData(formValues);
            }
            for (let i = 0; i < this.fields.length; i++) {
                /** @type {?} */
                const field = this.fields[i];
                if (field.tab) {
                    /** @type {?} */
                    const tab = tabCache[field.tab];
                    if (tab) {
                        tab.fields.push(field);
                    }
                }
            }
            if (formRepresentationJSON.fields) {
                /** @type {?} */
                const saveOutcome = new FormOutcomeModel(this, {
                    id: FormModel.SAVE_OUTCOME,
                    name: 'SAVE',
                    isSystem: true
                });
                /** @type {?} */
                const completeOutcome = new FormOutcomeModel(this, {
                    id: FormModel.COMPLETE_OUTCOME,
                    name: 'COMPLETE',
                    isSystem: true
                });
                /** @type {?} */
                const startProcessOutcome = new FormOutcomeModel(this, {
                    id: FormModel.START_PROCESS_OUTCOME,
                    name: 'START PROCESS',
                    isSystem: true
                });
                /** @type {?} */
                const customOutcomes = (formRepresentationJSON.outcomes || []).map((/**
                 * @param {?} obj
                 * @return {?}
                 */
                (obj) => new FormOutcomeModel(this, obj)));
                this.outcomes = [saveOutcome].concat(customOutcomes.length > 0 ? customOutcomes : [completeOutcome, startProcessOutcome]);
            }
        }
        this.validateForm();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onFormFieldChanged(field) {
        this.validateField(field);
        if (this.formService) {
            this.formService.formFieldValueChanged.next(new FormFieldEvent(this, field));
        }
    }
    /**
     * Validates entire form and all form fields.
     *
     * \@memberof FormModel
     * @return {?}
     */
    validateForm() {
        /** @type {?} */
        const validateFormEvent = new ValidateFormEvent(this);
        /** @type {?} */
        const errorsField = [];
        /** @type {?} */
        const fields = this.getFormFields();
        for (let i = 0; i < fields.length; i++) {
            if (!fields[i].validate()) {
                errorsField.push(fields[i]);
            }
        }
        this.isValid = errorsField.length > 0 ? false : true;
        if (this.formService) {
            validateFormEvent.isValid = this.isValid;
            validateFormEvent.errorsField = errorsField;
            this.formService.validateForm.next(validateFormEvent);
        }
    }
    /**
     * Validates a specific form field, triggers form validation.
     *
     * \@memberof FormModel
     * @param {?} field Form field to validate.
     * @return {?}
     */
    validateField(field) {
        if (!field) {
            return;
        }
        /** @type {?} */
        const validateFieldEvent = new ValidateFormFieldEvent(this, field);
        if (this.formService) {
            this.formService.validateFormField.next(validateFieldEvent);
        }
        if (!validateFieldEvent.isValid) {
            this.markAsInvalid();
            return;
        }
        if (validateFieldEvent.defaultPrevented) {
            return;
        }
        if (!field.validate()) {
            this.markAsInvalid();
        }
        this.validateForm();
    }
    // Activiti supports 3 types of root fields: container|group|dynamic-table
    /**
     * @private
     * @param {?} json
     * @return {?}
     */
    parseRootFields(json) {
        /** @type {?} */
        let fields = [];
        if (json.fields) {
            fields = json.fields;
        }
        else if (json.formDefinition && json.formDefinition.fields) {
            fields = json.formDefinition.fields;
        }
        /** @type {?} */
        const formWidgetModel = [];
        for (const field of fields) {
            if (field.type === FormFieldTypes.DISPLAY_VALUE) {
                // workaround for dynamic table on a completed/readonly form
                if (field.params) {
                    /** @type {?} */
                    const originalField = field.params['field'];
                    if (originalField.type === FormFieldTypes.DYNAMIC_TABLE) {
                        formWidgetModel.push(new ContainerModel(new FormFieldModel(this, field)));
                    }
                }
            }
            else {
                formWidgetModel.push(new ContainerModel(new FormFieldModel(this, field)));
            }
        }
        return formWidgetModel;
    }
    // Loads external data and overrides field values
    // Typically used when form definition and form data coming from different sources
    /**
     * @private
     * @param {?} formValues
     * @return {?}
     */
    loadData(formValues) {
        for (const field of this.getFormFields()) {
            if (formValues[field.id]) {
                field.json.value = formValues[field.id];
                field.value = field.parseValue(field.json);
            }
        }
    }
}
if (false) {
    /** @type {?} */
    FormModel.prototype.id;
    /** @type {?} */
    FormModel.prototype.name;
    /** @type {?} */
    FormModel.prototype.taskId;
    /** @type {?} */
    FormModel.prototype.taskName;
    /** @type {?} */
    FormModel.prototype.processDefinitionId;
    /** @type {?} */
    FormModel.prototype.customFieldTemplates;
    /** @type {?} */
    FormModel.prototype.fieldValidators;
    /** @type {?} */
    FormModel.prototype.selectedOutcome;
    /** @type {?} */
    FormModel.prototype.processVariables;
    /**
     * @type {?}
     * @protected
     */
    FormModel.prototype.formService;
}
//# sourceMappingURL=data:application/json;base64,