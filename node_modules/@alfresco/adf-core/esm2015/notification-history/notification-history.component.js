/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild } from '@angular/core';
import { NotificationService } from '../services/notification.service';
import { MatMenuTrigger } from '@angular/material';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class NotificationHistoryComponent {
    /**
     * @param {?} notificationService
     */
    constructor(notificationService) {
        this.notificationService = notificationService;
        this.onDestroy$ = new Subject();
        this.notifications = [];
        /**
         * Custom choice for opening the menu at the bottom. Can be `before` or `after`.
         */
        this.menuPositionX = 'after';
        /**
         * Custom choice for opening the menu at the bottom. Can be `above` or `below`.
         */
        this.menuPositionY = 'below';
        this.notificationService.messages
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} message
         * @return {?}
         */
        (message) => {
            this.notifications.push(message);
        }));
    }
    /**
     * @return {?}
     */
    isEmptyNotification() {
        return (!this.notifications || this.notifications.length === 0);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyPress(event) {
        this.closeUserModal(event);
    }
    /**
     * @return {?}
     */
    markAsRead() {
        this.notifications = [];
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    closeUserModal($event) {
        if ($event.keyCode === 27) {
            this.trigger.closeMenu();
        }
    }
}
NotificationHistoryComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-notification-history',
                template: "<div (keyup)=\"onKeyPress($event)\">\n    <button mat-button [matMenuTriggerFor]=\"menu\" class=\"adf-notification-history-menu_button\"\n            id=\"adf-notification-history-open-button\">\n        <mat-icon>mail_outline</mat-icon>\n    </button>\n    <mat-menu #menu=\"matMenu\" [xPosition]=\"menuPositionX\" [yPosition]=\"menuPositionY\"\n              [overlapTrigger]=\"false\" id=\"adf-notification-history-menu\" class=\"adf-notification-history-menu\">\n\n        <div id=\"adf-notification-history-list\">\n            <mat-list>\n                <mat-list-item>\n                    <h6 mat-line>{{ 'NOTIFICATION_HISTORY.NOTIFICATIONS' | translate }}</h6>\n                </mat-list-item>\n            </mat-list>\n            <mat-divider></mat-divider>\n\n            <mat-list>\n                <mat-list-item *ngFor=\"let notification of notifications\">\n                    <mat-icon mat-list-icon>{{notification.info? notification.info: 'info'}}</mat-icon>\n                    <h4 mat-line>{{notification.message}}</h4>\n                    <p mat-line> {{notification.dateTime | date}} </p>\n                </mat-list-item>\n                <mat-list-item *ngIf=\"isEmptyNotification()\" id=\"adf-notification-history-component-no-message\">\n                    <h4 mat-line>{{ 'NOTIFICATION_HISTORY.NO_MESSAGE' | translate }}</h4>\n                </mat-list-item>\n                <mat-action-list *ngIf=\"!isEmptyNotification()\" id=\"adf-notification-history-mark-as-read\">\n                    <button mat-list-item (click)=\"markAsRead()\">{{ 'NOTIFICATION_HISTORY.MARK_AS_READ' | translate }}\n                    </button>\n                </mat-action-list>\n            </mat-list>\n        </div>\n    </mat-menu>\n</div>\n",
                styles: [".adf-notification-history-menu_button.mat-button{margin-right:0;border-radius:90%;padding:0;min-width:40px;height:40px}@media only screen and (min-device-width:480px){.mat-menu-panel.adf-notification-history-menu{max-height:450px;min-width:450px;overflow:auto;padding:0}}.mat-menu-panel.adf-notification-history-menu .mat-menu-content{padding:0}"]
            }] }
];
/** @nocollapse */
NotificationHistoryComponent.ctorParameters = () => [
    { type: NotificationService }
];
NotificationHistoryComponent.propDecorators = {
    trigger: [{ type: ViewChild, args: [MatMenuTrigger,] }],
    menuPositionX: [{ type: Input }],
    menuPositionY: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NotificationHistoryComponent.prototype.onDestroy$;
    /** @type {?} */
    NotificationHistoryComponent.prototype.notifications;
    /** @type {?} */
    NotificationHistoryComponent.prototype.trigger;
    /**
     * Custom choice for opening the menu at the bottom. Can be `before` or `after`.
     * @type {?}
     */
    NotificationHistoryComponent.prototype.menuPositionX;
    /**
     * Custom choice for opening the menu at the bottom. Can be `above` or `below`.
     * @type {?}
     */
    NotificationHistoryComponent.prototype.menuPositionY;
    /**
     * @type {?}
     * @private
     */
    NotificationHistoryComponent.prototype.notificationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLWhpc3RvcnkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsibm90aWZpY2F0aW9uLWhpc3Rvcnkvbm90aWZpY2F0aW9uLWhpc3RvcnkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV2RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFPL0IsTUFBTSxPQUFPLDRCQUE0Qjs7OztJQWlCckMsWUFDWSxtQkFBd0M7UUFBeEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQWhCcEQsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFFcEMsa0JBQWEsR0FBd0IsRUFBRSxDQUFDOzs7O1FBT3hDLGtCQUFhLEdBQVcsT0FBTyxDQUFDOzs7O1FBSWhDLGtCQUFhLEdBQVcsT0FBTyxDQUFDO1FBSTVCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRO2FBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ2hDLFNBQVM7Ozs7UUFBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQUVELG1CQUFtQjtRQUNmLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsS0FBb0I7UUFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7O0lBRUQsVUFBVTtRQUNOLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFTyxjQUFjLENBQUMsTUFBcUI7UUFDeEMsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTtZQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQzs7O1lBcERKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMEJBQTBCO2dCQUVwQyw4dURBQWtEOzthQUNyRDs7OztZQVZRLG1CQUFtQjs7O3NCQWlCdkIsU0FBUyxTQUFDLGNBQWM7NEJBSXhCLEtBQUs7NEJBSUwsS0FBSzs7OztJQVpOLGtEQUFvQzs7SUFFcEMscURBQXdDOztJQUV4QywrQ0FDd0I7Ozs7O0lBR3hCLHFEQUNnQzs7Ozs7SUFHaEMscURBQ2dDOzs7OztJQUc1QiwyREFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL25vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbk1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWNhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBNYXRNZW51VHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtbm90aWZpY2F0aW9uLWhpc3RvcnknLFxuICAgIHN0eWxlVXJsczogWydub3RpZmljYXRpb24taGlzdG9yeS5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnbm90aWZpY2F0aW9uLWhpc3RvcnkuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvbkhpc3RvcnlDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gICAgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBub3RpZmljYXRpb25zOiBOb3RpZmljYXRpb25Nb2RlbFtdID0gW107XG5cbiAgICBAVmlld0NoaWxkKE1hdE1lbnVUcmlnZ2VyKVxuICAgIHRyaWdnZXI6IE1hdE1lbnVUcmlnZ2VyO1xuXG4gICAgLyoqIEN1c3RvbSBjaG9pY2UgZm9yIG9wZW5pbmcgdGhlIG1lbnUgYXQgdGhlIGJvdHRvbS4gQ2FuIGJlIGBiZWZvcmVgIG9yIGBhZnRlcmAuICovXG4gICAgQElucHV0KClcbiAgICBtZW51UG9zaXRpb25YOiBzdHJpbmcgPSAnYWZ0ZXInO1xuXG4gICAgLyoqIEN1c3RvbSBjaG9pY2UgZm9yIG9wZW5pbmcgdGhlIG1lbnUgYXQgdGhlIGJvdHRvbS4gQ2FuIGJlIGBhYm92ZWAgb3IgYGJlbG93YC4gKi9cbiAgICBASW5wdXQoKVxuICAgIG1lbnVQb3NpdGlvblk6IHN0cmluZyA9ICdiZWxvdyc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBub3RpZmljYXRpb25TZXJ2aWNlOiBOb3RpZmljYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uU2VydmljZS5tZXNzYWdlc1xuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaXNFbXB0eU5vdGlmaWNhdGlvbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICghdGhpcy5ub3RpZmljYXRpb25zIHx8IHRoaXMubm90aWZpY2F0aW9ucy5sZW5ndGggPT09IDApO1xuICAgIH1cblxuICAgIG9uS2V5UHJlc3MoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgdGhpcy5jbG9zZVVzZXJNb2RhbChldmVudCk7XG4gICAgfVxuXG4gICAgbWFya0FzUmVhZCgpIHtcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zID0gW107XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNsb3NlVXNlck1vZGFsKCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoJGV2ZW50LmtleUNvZGUgPT09IDI3KSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIuY2xvc2VNZW51KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=