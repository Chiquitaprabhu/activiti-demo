/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DatePipe } from '@angular/common';
import { Pipe } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
export class LocalizedDatePipe {
    /**
     * @param {?=} userPreferenceService
     * @param {?=} appConfig
     */
    constructor(userPreferenceService, appConfig) {
        this.userPreferenceService = userPreferenceService;
        this.appConfig = appConfig;
        this.defaultLocale = LocalizedDatePipe.DEFAULT_LOCALE;
        this.defaultFormat = LocalizedDatePipe.DEFAULT_DATE_FORMAT;
        if (this.userPreferenceService) {
            this.userPreferenceService.select(UserPreferenceValues.Locale).subscribe((/**
             * @param {?} locale
             * @return {?}
             */
            (locale) => {
                if (locale) {
                    this.defaultLocale = locale;
                }
            }));
        }
        if (this.appConfig) {
            this.defaultFormat = this.appConfig.get('dateValues.defaultDateFormat', LocalizedDatePipe.DEFAULT_DATE_FORMAT);
        }
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @param {?=} locale
     * @return {?}
     */
    transform(value, format, locale) {
        /** @type {?} */
        const actualFormat = format || this.defaultFormat;
        /** @type {?} */
        const actualLocale = locale || this.defaultLocale;
        /** @type {?} */
        const datePipe = new DatePipe(actualLocale);
        return datePipe.transform(value, actualFormat);
    }
}
LocalizedDatePipe.DEFAULT_LOCALE = 'en-US';
LocalizedDatePipe.DEFAULT_DATE_FORMAT = 'mediumDate';
LocalizedDatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'adfLocalizedDate',
                pure: false
            },] }
];
/** @nocollapse */
LocalizedDatePipe.ctorParameters = () => [
    { type: UserPreferencesService },
    { type: AppConfigService }
];
if (false) {
    /** @type {?} */
    LocalizedDatePipe.DEFAULT_LOCALE;
    /** @type {?} */
    LocalizedDatePipe.DEFAULT_DATE_FORMAT;
    /** @type {?} */
    LocalizedDatePipe.prototype.defaultLocale;
    /** @type {?} */
    LocalizedDatePipe.prototype.defaultFormat;
    /** @type {?} */
    LocalizedDatePipe.prototype.userPreferenceService;
    /** @type {?} */
    LocalizedDatePipe.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemVkLWRhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInBpcGVzL2xvY2FsaXplZC1kYXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBTXBHLE1BQU0sT0FBTyxpQkFBaUI7Ozs7O0lBUTFCLFlBQW1CLHFCQUE4QyxFQUM5QyxTQUE0QjtRQUQ1QiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXlCO1FBQzlDLGNBQVMsR0FBVCxTQUFTLENBQW1CO1FBSi9DLGtCQUFhLEdBQVcsaUJBQWlCLENBQUMsY0FBYyxDQUFDO1FBQ3pELGtCQUFhLEdBQVcsaUJBQWlCLENBQUMsbUJBQW1CLENBQUM7UUFLMUQsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDNUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTOzs7O1lBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDaEYsSUFBSSxNQUFNLEVBQUU7b0JBQ1IsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7aUJBQy9CO1lBQ0wsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLDhCQUE4QixFQUFFLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDMUg7SUFDTCxDQUFDOzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEtBQVUsRUFBRSxNQUFlLEVBQUUsTUFBZTs7Y0FDNUMsWUFBWSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsYUFBYTs7Y0FDM0MsWUFBWSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsYUFBYTs7Y0FDM0MsUUFBUSxHQUFhLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQztRQUNyRCxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ25ELENBQUM7O0FBM0JNLGdDQUFjLEdBQUcsT0FBTyxDQUFDO0FBQ3pCLHFDQUFtQixHQUFHLFlBQVksQ0FBQzs7WUFQN0MsSUFBSSxTQUFDO2dCQUNGLElBQUksRUFBRSxrQkFBa0I7Z0JBQ3hCLElBQUksRUFBRSxLQUFLO2FBQ2Q7Ozs7WUFMUSxzQkFBc0I7WUFEdEIsZ0JBQWdCOzs7O0lBU3JCLGlDQUFnQzs7SUFDaEMsc0NBQTBDOztJQUUxQywwQ0FBeUQ7O0lBQ3pELDBDQUE4RDs7SUFFbEQsa0RBQXFEOztJQUNyRCxzQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSwgVXNlclByZWZlcmVuY2VWYWx1ZXMgfSBmcm9tICcuLi9zZXJ2aWNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ2FkZkxvY2FsaXplZERhdGUnLFxuICAgIHB1cmU6IGZhbHNlXG59KVxuZXhwb3J0IGNsYXNzIExvY2FsaXplZERhdGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICBzdGF0aWMgREVGQVVMVF9MT0NBTEUgPSAnZW4tVVMnO1xuICAgIHN0YXRpYyBERUZBVUxUX0RBVEVfRk9STUFUID0gJ21lZGl1bURhdGUnO1xuXG4gICAgZGVmYXVsdExvY2FsZTogc3RyaW5nID0gTG9jYWxpemVkRGF0ZVBpcGUuREVGQVVMVF9MT0NBTEU7XG4gICAgZGVmYXVsdEZvcm1hdDogc3RyaW5nID0gTG9jYWxpemVkRGF0ZVBpcGUuREVGQVVMVF9EQVRFX0ZPUk1BVDtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB1c2VyUHJlZmVyZW5jZVNlcnZpY2U/OiBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBhcHBDb25maWc/OiBBcHBDb25maWdTZXJ2aWNlKSB7XG5cbiAgICAgICAgaWYgKHRoaXMudXNlclByZWZlcmVuY2VTZXJ2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlU2VydmljZS5zZWxlY3QoVXNlclByZWZlcmVuY2VWYWx1ZXMuTG9jYWxlKS5zdWJzY3JpYmUoKGxvY2FsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0TG9jYWxlID0gbG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYXBwQ29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRGb3JtYXQgPSB0aGlzLmFwcENvbmZpZy5nZXQ8c3RyaW5nPignZGF0ZVZhbHVlcy5kZWZhdWx0RGF0ZUZvcm1hdCcsIExvY2FsaXplZERhdGVQaXBlLkRFRkFVTFRfREFURV9GT1JNQVQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGZvcm1hdD86IHN0cmluZywgbG9jYWxlPzogc3RyaW5nKTogYW55IHtcbiAgICAgICAgY29uc3QgYWN0dWFsRm9ybWF0ID0gZm9ybWF0IHx8IHRoaXMuZGVmYXVsdEZvcm1hdDtcbiAgICAgICAgY29uc3QgYWN0dWFsTG9jYWxlID0gbG9jYWxlIHx8IHRoaXMuZGVmYXVsdExvY2FsZTtcbiAgICAgICAgY29uc3QgZGF0ZVBpcGU6IERhdGVQaXBlID0gbmV3IERhdGVQaXBlKGFjdHVhbExvY2FsZSk7XG4gICAgICAgIHJldHVybiBkYXRlUGlwZS50cmFuc2Zvcm0odmFsdWUsIGFjdHVhbEZvcm1hdCk7XG4gICAgfVxuXG59XG4iXX0=