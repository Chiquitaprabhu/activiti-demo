/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import moment from 'moment-es6';
import { Pipe } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { UserPreferenceValues, UserPreferencesService } from '../services/user-preferences.service';
import { DatePipe } from '@angular/common';
export class TimeAgoPipe {
    /**
     * @param {?} userPreferenceService
     * @param {?} appConfig
     */
    constructor(userPreferenceService, appConfig) {
        this.userPreferenceService = userPreferenceService;
        this.appConfig = appConfig;
        this.userPreferenceService.select(UserPreferenceValues.Locale).subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        (locale) => {
            this.defaultLocale = locale || TimeAgoPipe.DEFAULT_LOCALE;
        }));
        this.defaultDateTimeFormat = this.appConfig.get('dateValues.defaultDateTimeFormat', TimeAgoPipe.DEFAULT_DATE_TIME_FORMAT);
    }
    /**
     * @param {?} value
     * @param {?=} locale
     * @return {?}
     */
    transform(value, locale) {
        if (value !== null && value !== undefined) {
            /** @type {?} */
            const actualLocale = locale || this.defaultLocale;
            /** @type {?} */
            const then = moment(value);
            /** @type {?} */
            const diff = moment().locale(actualLocale).diff(then, 'days');
            if (diff > 7) {
                /** @type {?} */
                const datePipe = new DatePipe(actualLocale);
                return datePipe.transform(value, this.defaultDateTimeFormat);
            }
            else {
                return then.locale(actualLocale).fromNow();
            }
        }
        return '';
    }
}
TimeAgoPipe.DEFAULT_LOCALE = 'en-US';
TimeAgoPipe.DEFAULT_DATE_TIME_FORMAT = 'dd/MM/yyyy HH:mm';
TimeAgoPipe.decorators = [
    { type: Pipe, args: [{
                name: 'adfTimeAgo'
            },] }
];
/** @nocollapse */
TimeAgoPipe.ctorParameters = () => [
    { type: UserPreferencesService },
    { type: AppConfigService }
];
if (false) {
    /** @type {?} */
    TimeAgoPipe.DEFAULT_LOCALE;
    /** @type {?} */
    TimeAgoPipe.DEFAULT_DATE_TIME_FORMAT;
    /** @type {?} */
    TimeAgoPipe.prototype.defaultLocale;
    /** @type {?} */
    TimeAgoPipe.prototype.defaultDateTimeFormat;
    /** @type {?} */
    TimeAgoPipe.prototype.userPreferenceService;
    /** @type {?} */
    TimeAgoPipe.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInBpcGVzL3RpbWUtYWdvLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxNQUFNLE1BQU0sWUFBWSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUszQyxNQUFNLE9BQU8sV0FBVzs7Ozs7SUFRcEIsWUFBbUIscUJBQTZDLEVBQzdDLFNBQTJCO1FBRDNCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBd0I7UUFDN0MsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDMUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNoRixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDO1FBQzlELENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGtDQUFrQyxFQUFFLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3RJLENBQUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxLQUFXLEVBQUUsTUFBZTtRQUNsQyxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRzs7a0JBQ2xDLFlBQVksR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDLGFBQWE7O2tCQUMzQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQzs7a0JBQ3BCLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7WUFDN0QsSUFBSyxJQUFJLEdBQUcsQ0FBQyxFQUFFOztzQkFDTCxRQUFRLEdBQWEsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDO2dCQUNyRCxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO2FBQ2hFO2lCQUFNO2dCQUNILE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUM5QztTQUNKO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOztBQTNCTSwwQkFBYyxHQUFHLE9BQU8sQ0FBQztBQUN6QixvQ0FBd0IsR0FBRyxrQkFBa0IsQ0FBQzs7WUFOeEQsSUFBSSxTQUFDO2dCQUNGLElBQUksRUFBRSxZQUFZO2FBQ3JCOzs7O1lBTDhCLHNCQUFzQjtZQUQ1QyxnQkFBZ0I7Ozs7SUFTckIsMkJBQWdDOztJQUNoQyxxQ0FBcUQ7O0lBRXJELG9DQUFzQjs7SUFDdEIsNENBQThCOztJQUVsQiw0Q0FBb0Q7O0lBQ3BELGdDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50LWVzNic7XG5pbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VWYWx1ZXMsIFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ2FkZlRpbWVBZ28nXG59KVxuZXhwb3J0IGNsYXNzIFRpbWVBZ29QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICBzdGF0aWMgREVGQVVMVF9MT0NBTEUgPSAnZW4tVVMnO1xuICAgIHN0YXRpYyBERUZBVUxUX0RBVEVfVElNRV9GT1JNQVQgPSAnZGQvTU0veXl5eSBISDptbSc7XG5cbiAgICBkZWZhdWx0TG9jYWxlOiBzdHJpbmc7XG4gICAgZGVmYXVsdERhdGVUaW1lRm9ybWF0OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdXNlclByZWZlcmVuY2VTZXJ2aWNlOiBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBhcHBDb25maWc6IEFwcENvbmZpZ1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy51c2VyUHJlZmVyZW5jZVNlcnZpY2Uuc2VsZWN0KFVzZXJQcmVmZXJlbmNlVmFsdWVzLkxvY2FsZSkuc3Vic2NyaWJlKChsb2NhbGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdExvY2FsZSA9IGxvY2FsZSB8fCBUaW1lQWdvUGlwZS5ERUZBVUxUX0xPQ0FMRTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVmYXVsdERhdGVUaW1lRm9ybWF0ID0gdGhpcy5hcHBDb25maWcuZ2V0PHN0cmluZz4oJ2RhdGVWYWx1ZXMuZGVmYXVsdERhdGVUaW1lRm9ybWF0JywgVGltZUFnb1BpcGUuREVGQVVMVF9EQVRFX1RJTUVfRk9STUFUKTtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm0odmFsdWU6IERhdGUsIGxvY2FsZT86IHN0cmluZykge1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbExvY2FsZSA9IGxvY2FsZSB8fCB0aGlzLmRlZmF1bHRMb2NhbGU7XG4gICAgICAgICAgICBjb25zdCB0aGVuID0gbW9tZW50KHZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBtb21lbnQoKS5sb2NhbGUoYWN0dWFsTG9jYWxlKS5kaWZmKHRoZW4sICdkYXlzJyk7XG4gICAgICAgICAgICBpZiAoIGRpZmYgPiA3KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZVBpcGU6IERhdGVQaXBlID0gbmV3IERhdGVQaXBlKGFjdHVhbExvY2FsZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgdGhpcy5kZWZhdWx0RGF0ZVRpbWVGb3JtYXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhlbi5sb2NhbGUoYWN0dWFsTG9jYWxlKS5mcm9tTm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cbiJdfQ==