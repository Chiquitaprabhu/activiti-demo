/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContainerModel } from './widgets/core/container.model';
/**
 * @abstract
 */
var FormBaseModel = /** @class */ (function () {
    function FormBaseModel() {
        this.values = {};
        this.tabs = [];
        this.fields = [];
        this.outcomes = [];
        this.readOnly = false;
        this.isValid = true;
    }
    /**
     * @return {?}
     */
    FormBaseModel.prototype.hasTabs = /**
     * @return {?}
     */
    function () {
        return this.tabs && this.tabs.length > 0;
    };
    /**
     * @return {?}
     */
    FormBaseModel.prototype.hasFields = /**
     * @return {?}
     */
    function () {
        return this.fields && this.fields.length > 0;
    };
    /**
     * @return {?}
     */
    FormBaseModel.prototype.hasOutcomes = /**
     * @return {?}
     */
    function () {
        return this.outcomes && this.outcomes.length > 0;
    };
    /**
     * @param {?} fieldId
     * @return {?}
     */
    FormBaseModel.prototype.getFieldById = /**
     * @param {?} fieldId
     * @return {?}
     */
    function (fieldId) {
        return this.getFormFields().find((/**
         * @param {?} field
         * @return {?}
         */
        function (field) { return field.id === fieldId; }));
    };
    // TODO: consider evaluating and caching once the form is loaded
    // TODO: consider evaluating and caching once the form is loaded
    /**
     * @return {?}
     */
    FormBaseModel.prototype.getFormFields = 
    // TODO: consider evaluating and caching once the form is loaded
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var formFieldModel = [];
        for (var i = 0; i < this.fields.length; i++) {
            /** @type {?} */
            var field = this.fields[i];
            if (field instanceof ContainerModel) {
                /** @type {?} */
                var container = (/** @type {?} */ (field));
                formFieldModel.push(container.field);
                container.field.columns.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) {
                    formFieldModel.push.apply(formFieldModel, tslib_1.__spread(column.fields));
                }));
            }
        }
        return formFieldModel;
    };
    /**
     * @return {?}
     */
    FormBaseModel.prototype.markAsInvalid = /**
     * @return {?}
     */
    function () {
        this.isValid = false;
    };
    FormBaseModel.UNSET_TASK_NAME = 'Nameless task';
    FormBaseModel.SAVE_OUTCOME = '$save';
    FormBaseModel.COMPLETE_OUTCOME = '$complete';
    FormBaseModel.START_PROCESS_OUTCOME = '$startProcess';
    return FormBaseModel;
}());
export { FormBaseModel };
if (false) {
    /** @type {?} */
    FormBaseModel.UNSET_TASK_NAME;
    /** @type {?} */
    FormBaseModel.SAVE_OUTCOME;
    /** @type {?} */
    FormBaseModel.COMPLETE_OUTCOME;
    /** @type {?} */
    FormBaseModel.START_PROCESS_OUTCOME;
    /** @type {?} */
    FormBaseModel.prototype.json;
    /** @type {?} */
    FormBaseModel.prototype.values;
    /** @type {?} */
    FormBaseModel.prototype.tabs;
    /** @type {?} */
    FormBaseModel.prototype.fields;
    /** @type {?} */
    FormBaseModel.prototype.outcomes;
    /** @type {?} */
    FormBaseModel.prototype.className;
    /** @type {?} */
    FormBaseModel.prototype.readOnly;
    /** @type {?} */
    FormBaseModel.prototype.taskName;
    /** @type {?} */
    FormBaseModel.prototype.isValid;
    /**
     * @abstract
     * @return {?}
     */
    FormBaseModel.prototype.validateForm = function () { };
    /**
     * @abstract
     * @param {?} field
     * @return {?}
     */
    FormBaseModel.prototype.validateField = function (field) { };
    /**
     * @abstract
     * @param {?} field
     * @return {?}
     */
    FormBaseModel.prototype.onFormFieldChanged = function (field) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1iYXNlLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiZm9ybS9jb21wb25lbnRzL2Zvcm0tYmFzZS5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7O0FBRWhFO0lBQUE7UUFTSSxXQUFNLEdBQWUsRUFBRSxDQUFDO1FBQ3hCLFNBQUksR0FBZSxFQUFFLENBQUM7UUFDdEIsV0FBTSxHQUFzQixFQUFFLENBQUM7UUFDL0IsYUFBUSxHQUF1QixFQUFFLENBQUM7UUFHbEMsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUcxQixZQUFPLEdBQVksSUFBSSxDQUFDO0lBNkM1QixDQUFDOzs7O0lBM0NHLCtCQUFPOzs7SUFBUDtRQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7OztJQUVELGlDQUFTOzs7SUFBVDtRQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7OztJQUVELG1DQUFXOzs7SUFBWDtRQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDckQsQ0FBQzs7Ozs7SUFFRCxvQ0FBWTs7OztJQUFaLFVBQWEsT0FBZTtRQUN4QixPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsRUFBRSxLQUFLLE9BQU8sRUFBcEIsQ0FBb0IsRUFBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxnRUFBZ0U7Ozs7O0lBQ2hFLHFDQUFhOzs7OztJQUFiOztZQUNVLGNBQWMsR0FBcUIsRUFBRTtRQUUzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O2dCQUNuQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFNUIsSUFBSSxLQUFLLFlBQVksY0FBYyxFQUFFOztvQkFDM0IsU0FBUyxHQUFHLG1CQUFpQixLQUFLLEVBQUE7Z0JBQ3hDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUVyQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7O2dCQUFDLFVBQUMsTUFBTTtvQkFDbkMsY0FBYyxDQUFDLElBQUksT0FBbkIsY0FBYyxtQkFBUyxNQUFNLENBQUMsTUFBTSxHQUFFO2dCQUMxQyxDQUFDLEVBQUMsQ0FBQzthQUNOO1NBQ0o7UUFFRCxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQscUNBQWE7OztJQUFiO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQXhETSw2QkFBZSxHQUFXLGVBQWUsQ0FBQztJQUMxQywwQkFBWSxHQUFXLE9BQU8sQ0FBQztJQUMvQiw4QkFBZ0IsR0FBVyxXQUFXLENBQUM7SUFDdkMsbUNBQXFCLEdBQVcsZUFBZSxDQUFDO0lBMEQzRCxvQkFBQztDQUFBLEFBL0RELElBK0RDO1NBL0RxQixhQUFhOzs7SUFFL0IsOEJBQWlEOztJQUNqRCwyQkFBc0M7O0lBQ3RDLCtCQUE4Qzs7SUFDOUMsb0NBQXVEOztJQUV2RCw2QkFBVTs7SUFFViwrQkFBd0I7O0lBQ3hCLDZCQUFzQjs7SUFDdEIsK0JBQStCOztJQUMvQixpQ0FBa0M7O0lBRWxDLGtDQUFrQjs7SUFDbEIsaUNBQTBCOztJQUMxQixpQ0FBUzs7SUFFVCxnQ0FBd0I7Ozs7O0lBMEN4Qix1REFBd0I7Ozs7OztJQUN4Qiw2REFBOEM7Ozs7OztJQUM5QyxrRUFBbUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGb3JtVmFsdWVzIH0gZnJvbSAnLi93aWRnZXRzL2NvcmUvZm9ybS12YWx1ZXMnO1xuaW1wb3J0IHsgVGFiTW9kZWwgfSBmcm9tICcuL3dpZGdldHMvY29yZS90YWIubW9kZWwnO1xuaW1wb3J0IHsgRm9ybVdpZGdldE1vZGVsIH0gZnJvbSAnLi93aWRnZXRzL2NvcmUvZm9ybS13aWRnZXQubW9kZWwnO1xuaW1wb3J0IHsgRm9ybU91dGNvbWVNb2RlbCB9IGZyb20gJy4vd2lkZ2V0cy9jb3JlL2Zvcm0tb3V0Y29tZS5tb2RlbCc7XG5pbXBvcnQgeyBGb3JtRmllbGRNb2RlbCB9IGZyb20gJy4vd2lkZ2V0cy9jb3JlL2Zvcm0tZmllbGQubW9kZWwnO1xuaW1wb3J0IHsgQ29udGFpbmVyTW9kZWwgfSBmcm9tICcuL3dpZGdldHMvY29yZS9jb250YWluZXIubW9kZWwnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRm9ybUJhc2VNb2RlbCB7XG5cbiAgICBzdGF0aWMgVU5TRVRfVEFTS19OQU1FOiBzdHJpbmcgPSAnTmFtZWxlc3MgdGFzayc7XG4gICAgc3RhdGljIFNBVkVfT1VUQ09NRTogc3RyaW5nID0gJyRzYXZlJztcbiAgICBzdGF0aWMgQ09NUExFVEVfT1VUQ09NRTogc3RyaW5nID0gJyRjb21wbGV0ZSc7XG4gICAgc3RhdGljIFNUQVJUX1BST0NFU1NfT1VUQ09NRTogc3RyaW5nID0gJyRzdGFydFByb2Nlc3MnO1xuXG4gICAganNvbjogYW55O1xuXG4gICAgdmFsdWVzOiBGb3JtVmFsdWVzID0ge307XG4gICAgdGFiczogVGFiTW9kZWxbXSA9IFtdO1xuICAgIGZpZWxkczogRm9ybVdpZGdldE1vZGVsW10gPSBbXTtcbiAgICBvdXRjb21lczogRm9ybU91dGNvbWVNb2RlbFtdID0gW107XG5cbiAgICBjbGFzc05hbWU6IHN0cmluZztcbiAgICByZWFkT25seTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHRhc2tOYW1lO1xuXG4gICAgaXNWYWxpZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBoYXNUYWJzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJzICYmIHRoaXMudGFicy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGhhc0ZpZWxkcygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRzICYmIHRoaXMuZmllbGRzLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgaGFzT3V0Y29tZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLm91dGNvbWVzICYmIHRoaXMub3V0Y29tZXMubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICBnZXRGaWVsZEJ5SWQoZmllbGRJZDogc3RyaW5nKTogRm9ybUZpZWxkTW9kZWwge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGb3JtRmllbGRzKCkuZmluZCgoZmllbGQpID0+IGZpZWxkLmlkID09PSBmaWVsZElkKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBjb25zaWRlciBldmFsdWF0aW5nIGFuZCBjYWNoaW5nIG9uY2UgdGhlIGZvcm0gaXMgbG9hZGVkXG4gICAgZ2V0Rm9ybUZpZWxkcygpOiBGb3JtRmllbGRNb2RlbFtdIHtcbiAgICAgICAgY29uc3QgZm9ybUZpZWxkTW9kZWw6IEZvcm1GaWVsZE1vZGVsW10gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IHRoaXMuZmllbGRzW2ldO1xuXG4gICAgICAgICAgICBpZiAoZmllbGQgaW5zdGFuY2VvZiBDb250YWluZXJNb2RlbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IDxDb250YWluZXJNb2RlbD4gZmllbGQ7XG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkTW9kZWwucHVzaChjb250YWluZXIuZmllbGQpO1xuXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZpZWxkLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1GaWVsZE1vZGVsLnB1c2goLi4uY29sdW1uLmZpZWxkcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybUZpZWxkTW9kZWw7XG4gICAgfVxuXG4gICAgbWFya0FzSW52YWxpZCgpIHtcbiAgICAgICAgdGhpcy5pc1ZhbGlkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgdmFsaWRhdGVGb3JtKCk7XG4gICAgYWJzdHJhY3QgdmFsaWRhdGVGaWVsZChmaWVsZDogRm9ybUZpZWxkTW9kZWwpO1xuICAgIGFic3RyYWN0IG9uRm9ybUZpZWxkQ2hhbmdlZChmaWVsZDogRm9ybUZpZWxkTW9kZWwpO1xufVxuIl19