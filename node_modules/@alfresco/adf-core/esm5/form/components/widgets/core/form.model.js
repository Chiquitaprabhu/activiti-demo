/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { FormFieldEvent } from './../../../events/form-field.event';
import { ValidateFormFieldEvent } from './../../../events/validate-form-field.event';
import { ValidateFormEvent } from './../../../events/validate-form.event';
import { ContainerModel } from './container.model';
import { FormFieldTypes } from './form-field-types';
import { FormFieldModel } from './form-field.model';
import { FormOutcomeModel } from './form-outcome.model';
import { TabModel } from './tab.model';
import { FORM_FIELD_VALIDATORS } from './form-field-validator';
import { FormBaseModel } from '../../form-base.model';
var FormModel = /** @class */ (function (_super) {
    tslib_1.__extends(FormModel, _super);
    function FormModel(formRepresentationJSON, formValues, readOnly, formService) {
        if (readOnly === void 0) { readOnly = false; }
        var _this = _super.call(this) || this;
        _this.formService = formService;
        _this.taskName = FormModel.UNSET_TASK_NAME;
        _this.customFieldTemplates = {};
        _this.fieldValidators = tslib_1.__spread(FORM_FIELD_VALIDATORS);
        _this.readOnly = readOnly;
        if (formRepresentationJSON) {
            _this.json = formRepresentationJSON;
            _this.id = formRepresentationJSON.id;
            _this.name = formRepresentationJSON.name;
            _this.taskId = formRepresentationJSON.taskId;
            _this.taskName = formRepresentationJSON.taskName || formRepresentationJSON.name || FormModel.UNSET_TASK_NAME;
            _this.processDefinitionId = formRepresentationJSON.processDefinitionId;
            _this.customFieldTemplates = formRepresentationJSON.customFieldTemplates || {};
            _this.selectedOutcome = formRepresentationJSON.selectedOutcome || {};
            _this.className = formRepresentationJSON.className || '';
            /** @type {?} */
            var tabCache_1 = {};
            _this.processVariables = formRepresentationJSON.processVariables;
            _this.tabs = (formRepresentationJSON.tabs || []).map((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                /** @type {?} */
                var model = new TabModel(_this, t);
                tabCache_1[model.id] = model;
                return model;
            }));
            _this.fields = _this.parseRootFields(formRepresentationJSON);
            if (formValues) {
                _this.loadData(formValues);
            }
            for (var i = 0; i < _this.fields.length; i++) {
                /** @type {?} */
                var field = _this.fields[i];
                if (field.tab) {
                    /** @type {?} */
                    var tab = tabCache_1[field.tab];
                    if (tab) {
                        tab.fields.push(field);
                    }
                }
            }
            if (formRepresentationJSON.fields) {
                /** @type {?} */
                var saveOutcome = new FormOutcomeModel(_this, {
                    id: FormModel.SAVE_OUTCOME,
                    name: 'SAVE',
                    isSystem: true
                });
                /** @type {?} */
                var completeOutcome = new FormOutcomeModel(_this, {
                    id: FormModel.COMPLETE_OUTCOME,
                    name: 'COMPLETE',
                    isSystem: true
                });
                /** @type {?} */
                var startProcessOutcome = new FormOutcomeModel(_this, {
                    id: FormModel.START_PROCESS_OUTCOME,
                    name: 'START PROCESS',
                    isSystem: true
                });
                /** @type {?} */
                var customOutcomes = (formRepresentationJSON.outcomes || []).map((/**
                 * @param {?} obj
                 * @return {?}
                 */
                function (obj) { return new FormOutcomeModel(_this, obj); }));
                _this.outcomes = [saveOutcome].concat(customOutcomes.length > 0 ? customOutcomes : [completeOutcome, startProcessOutcome]);
            }
        }
        _this.validateForm();
        return _this;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    FormModel.prototype.onFormFieldChanged = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.validateField(field);
        if (this.formService) {
            this.formService.formFieldValueChanged.next(new FormFieldEvent(this, field));
        }
    };
    /**
     * Validates entire form and all form fields.
     *
     * @memberof FormModel
     */
    /**
     * Validates entire form and all form fields.
     *
     * \@memberof FormModel
     * @return {?}
     */
    FormModel.prototype.validateForm = /**
     * Validates entire form and all form fields.
     *
     * \@memberof FormModel
     * @return {?}
     */
    function () {
        /** @type {?} */
        var validateFormEvent = new ValidateFormEvent(this);
        /** @type {?} */
        var errorsField = [];
        /** @type {?} */
        var fields = this.getFormFields();
        for (var i = 0; i < fields.length; i++) {
            if (!fields[i].validate()) {
                errorsField.push(fields[i]);
            }
        }
        this.isValid = errorsField.length > 0 ? false : true;
        if (this.formService) {
            validateFormEvent.isValid = this.isValid;
            validateFormEvent.errorsField = errorsField;
            this.formService.validateForm.next(validateFormEvent);
        }
    };
    /**
     * Validates a specific form field, triggers form validation.
     *
     * @param field Form field to validate.
     * @memberof FormModel
     */
    /**
     * Validates a specific form field, triggers form validation.
     *
     * \@memberof FormModel
     * @param {?} field Form field to validate.
     * @return {?}
     */
    FormModel.prototype.validateField = /**
     * Validates a specific form field, triggers form validation.
     *
     * \@memberof FormModel
     * @param {?} field Form field to validate.
     * @return {?}
     */
    function (field) {
        if (!field) {
            return;
        }
        /** @type {?} */
        var validateFieldEvent = new ValidateFormFieldEvent(this, field);
        if (this.formService) {
            this.formService.validateFormField.next(validateFieldEvent);
        }
        if (!validateFieldEvent.isValid) {
            this.markAsInvalid();
            return;
        }
        if (validateFieldEvent.defaultPrevented) {
            return;
        }
        if (!field.validate()) {
            this.markAsInvalid();
        }
        this.validateForm();
    };
    // Activiti supports 3 types of root fields: container|group|dynamic-table
    // Activiti supports 3 types of root fields: container|group|dynamic-table
    /**
     * @private
     * @param {?} json
     * @return {?}
     */
    FormModel.prototype.parseRootFields = 
    // Activiti supports 3 types of root fields: container|group|dynamic-table
    /**
     * @private
     * @param {?} json
     * @return {?}
     */
    function (json) {
        var e_1, _a;
        /** @type {?} */
        var fields = [];
        if (json.fields) {
            fields = json.fields;
        }
        else if (json.formDefinition && json.formDefinition.fields) {
            fields = json.formDefinition.fields;
        }
        /** @type {?} */
        var formWidgetModel = [];
        try {
            for (var fields_1 = tslib_1.__values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var field = fields_1_1.value;
                if (field.type === FormFieldTypes.DISPLAY_VALUE) {
                    // workaround for dynamic table on a completed/readonly form
                    if (field.params) {
                        /** @type {?} */
                        var originalField = field.params['field'];
                        if (originalField.type === FormFieldTypes.DYNAMIC_TABLE) {
                            formWidgetModel.push(new ContainerModel(new FormFieldModel(this, field)));
                        }
                    }
                }
                else {
                    formWidgetModel.push(new ContainerModel(new FormFieldModel(this, field)));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return formWidgetModel;
    };
    // Loads external data and overrides field values
    // Typically used when form definition and form data coming from different sources
    // Loads external data and overrides field values
    // Typically used when form definition and form data coming from different sources
    /**
     * @private
     * @param {?} formValues
     * @return {?}
     */
    FormModel.prototype.loadData = 
    // Loads external data and overrides field values
    // Typically used when form definition and form data coming from different sources
    /**
     * @private
     * @param {?} formValues
     * @return {?}
     */
    function (formValues) {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.getFormFields()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var field = _c.value;
                if (formValues[field.id]) {
                    field.json.value = formValues[field.id];
                    field.value = field.parseValue(field.json);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    return FormModel;
}(FormBaseModel));
export { FormModel };
if (false) {
    /** @type {?} */
    FormModel.prototype.id;
    /** @type {?} */
    FormModel.prototype.name;
    /** @type {?} */
    FormModel.prototype.taskId;
    /** @type {?} */
    FormModel.prototype.taskName;
    /** @type {?} */
    FormModel.prototype.processDefinitionId;
    /** @type {?} */
    FormModel.prototype.customFieldTemplates;
    /** @type {?} */
    FormModel.prototype.fieldValidators;
    /** @type {?} */
    FormModel.prototype.selectedOutcome;
    /** @type {?} */
    FormModel.prototype.processVariables;
    /**
     * @type {?}
     * @protected
     */
    FormModel.prototype.formService;
}
//# sourceMappingURL=data:application/json;base64,