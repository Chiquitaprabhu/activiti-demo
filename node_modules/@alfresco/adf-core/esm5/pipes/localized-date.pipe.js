/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DatePipe } from '@angular/common';
import { Pipe } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
var LocalizedDatePipe = /** @class */ (function () {
    function LocalizedDatePipe(userPreferenceService, appConfig) {
        var _this = this;
        this.userPreferenceService = userPreferenceService;
        this.appConfig = appConfig;
        this.defaultLocale = LocalizedDatePipe.DEFAULT_LOCALE;
        this.defaultFormat = LocalizedDatePipe.DEFAULT_DATE_FORMAT;
        if (this.userPreferenceService) {
            this.userPreferenceService.select(UserPreferenceValues.Locale).subscribe((/**
             * @param {?} locale
             * @return {?}
             */
            function (locale) {
                if (locale) {
                    _this.defaultLocale = locale;
                }
            }));
        }
        if (this.appConfig) {
            this.defaultFormat = this.appConfig.get('dateValues.defaultDateFormat', LocalizedDatePipe.DEFAULT_DATE_FORMAT);
        }
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @param {?=} locale
     * @return {?}
     */
    LocalizedDatePipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} format
     * @param {?=} locale
     * @return {?}
     */
    function (value, format, locale) {
        /** @type {?} */
        var actualFormat = format || this.defaultFormat;
        /** @type {?} */
        var actualLocale = locale || this.defaultLocale;
        /** @type {?} */
        var datePipe = new DatePipe(actualLocale);
        return datePipe.transform(value, actualFormat);
    };
    LocalizedDatePipe.DEFAULT_LOCALE = 'en-US';
    LocalizedDatePipe.DEFAULT_DATE_FORMAT = 'mediumDate';
    LocalizedDatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'adfLocalizedDate',
                    pure: false
                },] }
    ];
    /** @nocollapse */
    LocalizedDatePipe.ctorParameters = function () { return [
        { type: UserPreferencesService },
        { type: AppConfigService }
    ]; };
    return LocalizedDatePipe;
}());
export { LocalizedDatePipe };
if (false) {
    /** @type {?} */
    LocalizedDatePipe.DEFAULT_LOCALE;
    /** @type {?} */
    LocalizedDatePipe.DEFAULT_DATE_FORMAT;
    /** @type {?} */
    LocalizedDatePipe.prototype.defaultLocale;
    /** @type {?} */
    LocalizedDatePipe.prototype.defaultFormat;
    /** @type {?} */
    LocalizedDatePipe.prototype.userPreferenceService;
    /** @type {?} */
    LocalizedDatePipe.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemVkLWRhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInBpcGVzL2xvY2FsaXplZC1kYXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXBHO0lBWUksMkJBQW1CLHFCQUE4QyxFQUM5QyxTQUE0QjtRQUQvQyxpQkFjQztRQWRrQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXlCO1FBQzlDLGNBQVMsR0FBVCxTQUFTLENBQW1CO1FBSi9DLGtCQUFhLEdBQVcsaUJBQWlCLENBQUMsY0FBYyxDQUFDO1FBQ3pELGtCQUFhLEdBQVcsaUJBQWlCLENBQUMsbUJBQW1CLENBQUM7UUFLMUQsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDNUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTOzs7O1lBQUMsVUFBQyxNQUFNO2dCQUM1RSxJQUFJLE1BQU0sRUFBRTtvQkFDUixLQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztpQkFDL0I7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQVMsOEJBQThCLEVBQUUsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUMxSDtJQUNMLENBQUM7Ozs7Ozs7SUFFRCxxQ0FBUzs7Ozs7O0lBQVQsVUFBVSxLQUFVLEVBQUUsTUFBZSxFQUFFLE1BQWU7O1lBQzVDLFlBQVksR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDLGFBQWE7O1lBQzNDLFlBQVksR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDLGFBQWE7O1lBQzNDLFFBQVEsR0FBYSxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFDckQsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBM0JNLGdDQUFjLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLHFDQUFtQixHQUFHLFlBQVksQ0FBQzs7Z0JBUDdDLElBQUksU0FBQztvQkFDRixJQUFJLEVBQUUsa0JBQWtCO29CQUN4QixJQUFJLEVBQUUsS0FBSztpQkFDZDs7OztnQkFMUSxzQkFBc0I7Z0JBRHRCLGdCQUFnQjs7SUFzQ3pCLHdCQUFDO0NBQUEsQUFuQ0QsSUFtQ0M7U0EvQlksaUJBQWlCOzs7SUFFMUIsaUNBQWdDOztJQUNoQyxzQ0FBMEM7O0lBRTFDLDBDQUF5RDs7SUFDekQsMENBQThEOztJQUVsRCxrREFBcUQ7O0lBQ3JELHNDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi9hcHAtY29uZmlnL2FwcC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlLCBVc2VyUHJlZmVyZW5jZVZhbHVlcyB9IGZyb20gJy4uL3NlcnZpY2VzL3VzZXItcHJlZmVyZW5jZXMuc2VydmljZSc7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnYWRmTG9jYWxpemVkRGF0ZScsXG4gICAgcHVyZTogZmFsc2Vcbn0pXG5leHBvcnQgY2xhc3MgTG9jYWxpemVkRGF0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHN0YXRpYyBERUZBVUxUX0xPQ0FMRSA9ICdlbi1VUyc7XG4gICAgc3RhdGljIERFRkFVTFRfREFURV9GT1JNQVQgPSAnbWVkaXVtRGF0ZSc7XG5cbiAgICBkZWZhdWx0TG9jYWxlOiBzdHJpbmcgPSBMb2NhbGl6ZWREYXRlUGlwZS5ERUZBVUxUX0xPQ0FMRTtcbiAgICBkZWZhdWx0Rm9ybWF0OiBzdHJpbmcgPSBMb2NhbGl6ZWREYXRlUGlwZS5ERUZBVUxUX0RBVEVfRk9STUFUO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHVzZXJQcmVmZXJlbmNlU2VydmljZT86IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHVibGljIGFwcENvbmZpZz86IEFwcENvbmZpZ1NlcnZpY2UpIHtcblxuICAgICAgICBpZiAodGhpcy51c2VyUHJlZmVyZW5jZVNlcnZpY2UpIHtcbiAgICAgICAgICAgIHRoaXMudXNlclByZWZlcmVuY2VTZXJ2aWNlLnNlbGVjdChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUpLnN1YnNjcmliZSgobG9jYWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hcHBDb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdEZvcm1hdCA9IHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KCdkYXRlVmFsdWVzLmRlZmF1bHREYXRlRm9ybWF0JywgTG9jYWxpemVkRGF0ZVBpcGUuREVGQVVMVF9EQVRFX0ZPUk1BVCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgZm9ybWF0Pzogc3RyaW5nLCBsb2NhbGU/OiBzdHJpbmcpOiBhbnkge1xuICAgICAgICBjb25zdCBhY3R1YWxGb3JtYXQgPSBmb3JtYXQgfHwgdGhpcy5kZWZhdWx0Rm9ybWF0O1xuICAgICAgICBjb25zdCBhY3R1YWxMb2NhbGUgPSBsb2NhbGUgfHwgdGhpcy5kZWZhdWx0TG9jYWxlO1xuICAgICAgICBjb25zdCBkYXRlUGlwZTogRGF0ZVBpcGUgPSBuZXcgRGF0ZVBpcGUoYWN0dWFsTG9jYWxlKTtcbiAgICAgICAgcmV0dXJuIGRhdGVQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgYWN0dWFsRm9ybWF0KTtcbiAgICB9XG5cbn1cbiJdfQ==