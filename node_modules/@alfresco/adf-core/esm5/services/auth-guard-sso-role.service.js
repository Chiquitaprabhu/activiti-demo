/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { JwtHelperService } from './jwt-helper.service';
import { Router } from '@angular/router';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "./storage.service";
import * as i2 from "./jwt-helper.service";
import * as i3 from "@angular/router";
var AuthGuardSsoRoleService = /** @class */ (function () {
    function AuthGuardSsoRoleService(storageService, jwtHelperService, router) {
        this.storageService = storageService;
        this.jwtHelperService = jwtHelperService;
        this.router = router;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuardSsoRoleService.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        /** @type {?} */
        var hasRole;
        /** @type {?} */
        var hasRealmRole = false;
        /** @type {?} */
        var hasClientRole = true;
        if (route.data) {
            if (route.data['roles']) {
                /** @type {?} */
                var rolesToCheck = route.data['roles'];
                hasRealmRole = this.hasRealmRoles(rolesToCheck);
            }
            if (route.data['clientRoles']) {
                /** @type {?} */
                var clientRoleName = route.params[route.data['clientRoles']];
                /** @type {?} */
                var rolesToCheck = route.data['roles'];
                hasClientRole = this.hasRealmRolesForClientRole(clientRoleName, rolesToCheck);
            }
        }
        hasRole = hasRealmRole && hasClientRole;
        if (!hasRole && route.data && route.data['redirectUrl']) {
            this.router.navigate(['/' + route.data['redirectUrl']]);
        }
        return hasRole;
    };
    /**
     * @return {?}
     */
    AuthGuardSsoRoleService.prototype.getRealmRoles = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var access = this.jwtHelperService.getValueFromLocalAccessToken('realm_access');
        /** @type {?} */
        var roles = access ? access['roles'] : [];
        return roles;
    };
    /**
     * @param {?} client
     * @return {?}
     */
    AuthGuardSsoRoleService.prototype.getClientRoles = /**
     * @param {?} client
     * @return {?}
     */
    function (client) {
        /** @type {?} */
        var clientRole = this.jwtHelperService.getValueFromLocalAccessToken('resource_access')[client];
        /** @type {?} */
        var roles = clientRole ? clientRole['roles'] : [];
        return roles;
    };
    /**
     * @return {?}
     */
    AuthGuardSsoRoleService.prototype.getAccessToken = /**
     * @return {?}
     */
    function () {
        return this.storageService.getItem(JwtHelperService.USER_ACCESS_TOKEN);
    };
    /**
     * @param {?} role
     * @return {?}
     */
    AuthGuardSsoRoleService.prototype.hasRealmRole = /**
     * @param {?} role
     * @return {?}
     */
    function (role) {
        /** @type {?} */
        var hasRole = false;
        if (this.getAccessToken()) {
            /** @type {?} */
            var realmRoles = this.getRealmRoles();
            hasRole = realmRoles.some((/**
             * @param {?} currentRole
             * @return {?}
             */
            function (currentRole) {
                return currentRole === role;
            }));
        }
        return hasRole;
    };
    /**
     * @param {?} rolesToCheck
     * @return {?}
     */
    AuthGuardSsoRoleService.prototype.hasRealmRoles = /**
     * @param {?} rolesToCheck
     * @return {?}
     */
    function (rolesToCheck) {
        var _this = this;
        return rolesToCheck.some((/**
         * @param {?} currentRole
         * @return {?}
         */
        function (currentRole) {
            return _this.hasRealmRole(currentRole);
        }));
    };
    /**
     * @param {?} clientRole
     * @param {?} rolesToCheck
     * @return {?}
     */
    AuthGuardSsoRoleService.prototype.hasRealmRolesForClientRole = /**
     * @param {?} clientRole
     * @param {?} rolesToCheck
     * @return {?}
     */
    function (clientRole, rolesToCheck) {
        var _this = this;
        return rolesToCheck.some((/**
         * @param {?} currentRole
         * @return {?}
         */
        function (currentRole) {
            return _this.hasClientRole(clientRole, currentRole);
        }));
    };
    /**
     * @param {?} clientRole
     * @param {?} role
     * @return {?}
     */
    AuthGuardSsoRoleService.prototype.hasClientRole = /**
     * @param {?} clientRole
     * @param {?} role
     * @return {?}
     */
    function (clientRole, role) {
        /** @type {?} */
        var hasRole = false;
        if (this.getAccessToken()) {
            /** @type {?} */
            var clientRoles = this.getClientRoles(clientRole);
            hasRole = clientRoles.some((/**
             * @param {?} currentRole
             * @return {?}
             */
            function (currentRole) {
                return currentRole === role;
            }));
        }
        return hasRole;
    };
    AuthGuardSsoRoleService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AuthGuardSsoRoleService.ctorParameters = function () { return [
        { type: StorageService },
        { type: JwtHelperService },
        { type: Router }
    ]; };
    /** @nocollapse */ AuthGuardSsoRoleService.ngInjectableDef = i0.defineInjectable({ factory: function AuthGuardSsoRoleService_Factory() { return new AuthGuardSsoRoleService(i0.inject(i1.StorageService), i0.inject(i2.JwtHelperService), i0.inject(i3.Router)); }, token: AuthGuardSsoRoleService, providedIn: "root" });
    return AuthGuardSsoRoleService;
}());
export { AuthGuardSsoRoleService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthGuardSsoRoleService.prototype.storageService;
    /**
     * @type {?}
     * @private
     */
    AuthGuardSsoRoleService.prototype.jwtHelperService;
    /**
     * @type {?}
     * @private
     */
    AuthGuardSsoRoleService.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,