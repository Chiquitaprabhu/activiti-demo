/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { StorageService } from './storage.service';
import { distinctUntilChanged, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../app-config/app-config.service";
import * as i3 from "./storage.service";
/** @enum {string} */
var UserPreferenceValues = {
    PaginationSize: 'paginationSize',
    Locale: 'locale',
    SupportedPageSizes: 'supportedPageSizes',
    ExpandedSideNavStatus: 'expandedSidenav',
};
export { UserPreferenceValues };
var UserPreferencesService = /** @class */ (function () {
    function UserPreferencesService(translate, appConfig, storage) {
        this.translate = translate;
        this.appConfig = appConfig;
        this.storage = storage;
        this.defaults = {
            paginationSize: 25,
            supportedPageSizes: [5, 10, 15, 20],
            locale: 'en',
            expandedSidenav: true
        };
        this.userPreferenceStatus = this.defaults;
        this.appConfig.onLoad.subscribe(this.initUserPreferenceStatus.bind(this));
        this.onChangeSubject = new BehaviorSubject(this.userPreferenceStatus);
        this.onChange = this.onChangeSubject.asObservable();
    }
    /**
     * @private
     * @return {?}
     */
    UserPreferencesService.prototype.initUserPreferenceStatus = /**
     * @private
     * @return {?}
     */
    function () {
        this.initUserLanguage();
        this.set(UserPreferenceValues.PaginationSize, this.paginationSize);
        this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(this.supportedPageSizes));
    };
    /**
     * @private
     * @return {?}
     */
    UserPreferencesService.prototype.initUserLanguage = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.locale || this.appConfig.get(UserPreferenceValues.Locale)) {
            /** @type {?} */
            var locale = this.locale || this.getDefaultLocale();
            this.set(UserPreferenceValues.Locale, locale);
            this.set('textOrientation', this.getLanguageByKey(locale).direction || 'ltr');
        }
        else {
            /** @type {?} */
            var locale = this.locale || this.getDefaultLocale();
            this.setWithoutStore(UserPreferenceValues.Locale, locale);
            this.setWithoutStore('textOrientation', this.getLanguageByKey(locale).direction || 'ltr');
        }
    };
    /**
     * Sets up a callback to notify when a property has changed.
     * @param property The property to watch
     * @returns Notification callback
     */
    /**
     * Sets up a callback to notify when a property has changed.
     * @param {?} property The property to watch
     * @return {?} Notification callback
     */
    UserPreferencesService.prototype.select = /**
     * Sets up a callback to notify when a property has changed.
     * @param {?} property The property to watch
     * @return {?} Notification callback
     */
    function (property) {
        return this.onChange
            .pipe(map((/**
         * @param {?} userPreferenceStatus
         * @return {?}
         */
        function (userPreferenceStatus) { return userPreferenceStatus[property]; })), distinctUntilChanged());
    };
    /**
     * Gets a preference property.
     * @param property Name of the property
     * @param defaultValue Default to return if the property is not found
     * @returns Preference property
     */
    /**
     * Gets a preference property.
     * @param {?} property Name of the property
     * @param {?=} defaultValue Default to return if the property is not found
     * @return {?} Preference property
     */
    UserPreferencesService.prototype.get = /**
     * Gets a preference property.
     * @param {?} property Name of the property
     * @param {?=} defaultValue Default to return if the property is not found
     * @return {?} Preference property
     */
    function (property, defaultValue) {
        /** @type {?} */
        var key = this.getPropertyKey(property);
        /** @type {?} */
        var value = this.storage.getItem(key);
        if (value === undefined || value === null) {
            return defaultValue;
        }
        return value;
    };
    /**
     * Sets a preference property.
     * @param property Name of the property
     * @param value New value for the property
     */
    /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    UserPreferencesService.prototype.set = /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    function (property, value) {
        if (!property) {
            return;
        }
        this.storage.setItem(this.getPropertyKey(property), value);
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    };
    /**
     * Sets a preference property.
     * @param property Name of the property
     * @param value New value for the property
     */
    /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    UserPreferencesService.prototype.setWithoutStore = /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    function (property, value) {
        if (!property) {
            return;
        }
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    };
    /**
     * Check if an item is present in the storage
     * @param property Name of the property
     * @returns True if the item is present, false otherwise
     */
    /**
     * Check if an item is present in the storage
     * @param {?} property Name of the property
     * @return {?} True if the item is present, false otherwise
     */
    UserPreferencesService.prototype.hasItem = /**
     * Check if an item is present in the storage
     * @param {?} property Name of the property
     * @return {?} True if the item is present, false otherwise
     */
    function (property) {
        if (!property) {
            return;
        }
        return this.storage.hasItem(this.getPropertyKey(property));
    };
    /**
     * Gets the active storage prefix for preferences.
     * @returns Storage prefix
     */
    /**
     * Gets the active storage prefix for preferences.
     * @return {?} Storage prefix
     */
    UserPreferencesService.prototype.getStoragePrefix = /**
     * Gets the active storage prefix for preferences.
     * @return {?} Storage prefix
     */
    function () {
        return this.storage.getItem('USER_PROFILE') || 'GUEST';
    };
    /**
     * Sets the active storage prefix for preferences.
     * @param value Name of the prefix
     */
    /**
     * Sets the active storage prefix for preferences.
     * @param {?} value Name of the prefix
     * @return {?}
     */
    UserPreferencesService.prototype.setStoragePrefix = /**
     * Sets the active storage prefix for preferences.
     * @param {?} value Name of the prefix
     * @return {?}
     */
    function (value) {
        this.storage.setItem('USER_PROFILE', value || 'GUEST');
        this.initUserPreferenceStatus();
    };
    /**
     * Gets the full property key with prefix.
     * @param property The property name
     * @returns Property key
     */
    /**
     * Gets the full property key with prefix.
     * @param {?} property The property name
     * @return {?} Property key
     */
    UserPreferencesService.prototype.getPropertyKey = /**
     * Gets the full property key with prefix.
     * @param {?} property The property name
     * @return {?} Property key
     */
    function (property) {
        return this.getStoragePrefix() + "__" + property;
    };
    Object.defineProperty(UserPreferencesService.prototype, "supportedPageSizes", {
        /**
         * Gets an array containing the available page sizes.
         * @returns Array of page size values
         */
        get: /**
         * Gets an array containing the available page sizes.
         * @return {?} Array of page size values
         */
        function () {
            /** @type {?} */
            var supportedPageSizes = this.get(UserPreferenceValues.SupportedPageSizes);
            if (supportedPageSizes) {
                return JSON.parse(supportedPageSizes);
            }
            else {
                return this.appConfig.get('pagination.supportedPageSizes', this.defaults.supportedPageSizes);
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserPreferencesService.prototype, "paginationSize", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var paginationSize = this.get(UserPreferenceValues.PaginationSize);
            if (paginationSize) {
                return Number(paginationSize);
            }
            else {
                return Number(this.appConfig.get('pagination.size', this.defaults.paginationSize));
            }
        },
        /** Pagination size. */
        set: /**
         * Pagination size.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.set(UserPreferenceValues.PaginationSize, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserPreferencesService.prototype, "locale", {
        /** Current locale setting. */
        get: /**
         * Current locale setting.
         * @return {?}
         */
        function () {
            return this.get(UserPreferenceValues.Locale);
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.set(UserPreferenceValues.Locale, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the default locale.
     * @returns Default locale language code
     */
    /**
     * Gets the default locale.
     * @return {?} Default locale language code
     */
    UserPreferencesService.prototype.getDefaultLocale = /**
     * Gets the default locale.
     * @return {?} Default locale language code
     */
    function () {
        return this.appConfig.get(UserPreferenceValues.Locale) || this.translate.getBrowserCultureLang() || 'en';
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    UserPreferencesService.prototype.getLanguageByKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return (this.appConfig
            .get(AppConfigValues.APP_CONFIG_LANGUAGES_KEY, [(/** @type {?} */ ({ key: 'en' }))])
            .find((/**
         * @param {?} language
         * @return {?}
         */
        function (language) { return key.includes(language.key); })) || (/** @type {?} */ ({ key: 'en' })));
    };
    UserPreferencesService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UserPreferencesService.ctorParameters = function () { return [
        { type: TranslateService },
        { type: AppConfigService },
        { type: StorageService }
    ]; };
    /** @nocollapse */ UserPreferencesService.ngInjectableDef = i0.defineInjectable({ factory: function UserPreferencesService_Factory() { return new UserPreferencesService(i0.inject(i1.TranslateService), i0.inject(i2.AppConfigService), i0.inject(i3.StorageService)); }, token: UserPreferencesService, providedIn: "root" });
    return UserPreferencesService;
}());
export { UserPreferencesService };
if (false) {
    /** @type {?} */
    UserPreferencesService.prototype.defaults;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.userPreferenceStatus;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.onChangeSubject;
    /** @type {?} */
    UserPreferencesService.prototype.onChange;
    /** @type {?} */
    UserPreferencesService.prototype.translate;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.appConfig;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.storage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFckYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7OztJQUd2RCxnQkFBaUIsZ0JBQWdCO0lBQ2pDLFFBQVMsUUFBUTtJQUNqQixvQkFBcUIsb0JBQW9CO0lBQ3pDLHVCQUF3QixpQkFBaUI7OztBQUc3QztJQWdCSSxnQ0FBbUIsU0FBMkIsRUFDMUIsU0FBMkIsRUFDM0IsT0FBdUI7UUFGeEIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDMUIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFiM0MsYUFBUSxHQUFHO1lBQ1AsY0FBYyxFQUFFLEVBQUU7WUFDbEIsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDbkMsTUFBTSxFQUFFLElBQUk7WUFDWixlQUFlLEVBQUUsSUFBSTtTQUN4QixDQUFDO1FBRU0seUJBQW9CLEdBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQU85QyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FB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LEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakQsQ0FBQzs7O09BSkE7SUFNRDs7O09BR0c7Ozs7O0lBQ0ksaURBQWdCOzs7O0lBQXZCO1FBQ0ksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLElBQUksSUFBSSxDQUFDO0lBQ3JILENBQUM7Ozs7OztJQUVPLGlEQUFnQjs7Ozs7SUFBeEIsVUFBeUIsR0FBVztRQUNoQyxPQUFPLENBQ0gsSUFBSSxDQUFDLFNBQVM7YUFDVCxHQUFHLENBQXNCLGVBQWUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLG1CQUFlLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFBLENBQUMsQ0FBQzthQUNsRyxJQUFJOzs7O1FBQUMsVUFBQyxRQUFRLElBQUssT0FBQSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBMUIsQ0FBMEIsRUFBQyxJQUFJLG1CQUFlLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFBLENBQ3RGLENBQUM7SUFDTixDQUFDOztnQkF0TUosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFoQlEsZ0JBQWdCO2dCQUVoQixnQkFBZ0I7Z0JBRWhCLGNBQWM7OztpQ0F0QnZCO0NBdU9DLEFBdk1ELElBdU1DO1NBcE1ZLHNCQUFzQjs7O0lBRS9CLDBDQUtFOzs7OztJQUVGLHNEQUFrRDs7Ozs7SUFDbEQsaURBQThDOztJQUM5QywwQ0FBMEI7O0lBRWQsMkNBQWtDOzs7OztJQUNsQywyQ0FBbUM7Ozs7O0lBQ25DLHlDQUErQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSwgQXBwQ29uZmlnVmFsdWVzIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGFuZ3VhZ2VJdGVtIH0gZnJvbSAnLi4vbGFuZ3VhZ2UtbWVudS9sYW5ndWFnZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgZW51bSBVc2VyUHJlZmVyZW5jZVZhbHVlcyB7XG4gICAgUGFnaW5hdGlvblNpemUgPSAncGFnaW5hdGlvblNpemUnLFxuICAgIExvY2FsZSA9ICdsb2NhbGUnLFxuICAgIFN1cHBvcnRlZFBhZ2VTaXplcyA9ICdzdXBwb3J0ZWRQYWdlU2l6ZXMnLFxuICAgIEV4cGFuZGVkU2lkZU5hdlN0YXR1cyA9ICdleHBhbmRlZFNpZGVuYXYnXG59XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVXNlclByZWZlcmVuY2VzU2VydmljZSB7XG5cbiAgICBkZWZhdWx0cyA9IHtcbiAgICAgICAgcGFnaW5hdGlvblNpemU6IDI1LFxuICAgICAgICBzdXBwb3J0ZWRQYWdlU2l6ZXM6IFs1LCAxMCwgMTUsIDIwXSxcbiAgICAgICAgbG9jYWxlOiAnZW4nLFxuICAgICAgICBleHBhbmRlZFNpZGVuYXY6IHRydWVcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSB1c2VyUHJlZmVyZW5jZVN0YXR1czogYW55ID0gdGhpcy5kZWZhdWx0cztcbiAgICBwcml2YXRlIG9uQ2hhbmdlU3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PGFueT47XG4gICAgb25DaGFuZ2U6IE9ic2VydmFibGU8YW55PjtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhcHBDb25maWc6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzdG9yYWdlOiBTdG9yYWdlU2VydmljZSkge1xuICAgICAgICB0aGlzLmFwcENvbmZpZy5vbkxvYWQuc3Vic2NyaWJlKHRoaXMuaW5pdFVzZXJQcmVmZXJlbmNlU3RhdHVzLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy51c2VyUHJlZmVyZW5jZVN0YXR1cyk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRVc2VyUHJlZmVyZW5jZVN0YXR1cygpIHtcbiAgICAgICAgdGhpcy5pbml0VXNlckxhbmd1YWdlKCk7XG4gICAgICAgIHRoaXMuc2V0KFVzZXJQcmVmZXJlbmNlVmFsdWVzLlBhZ2luYXRpb25TaXplLCB0aGlzLnBhZ2luYXRpb25TaXplKTtcbiAgICAgICAgdGhpcy5zZXQoVXNlclByZWZlcmVuY2VWYWx1ZXMuU3VwcG9ydGVkUGFnZVNpemVzLCBKU09OLnN0cmluZ2lmeSh0aGlzLnN1cHBvcnRlZFBhZ2VTaXplcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdFVzZXJMYW5ndWFnZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubG9jYWxlIHx8IHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KFVzZXJQcmVmZXJlbmNlVmFsdWVzLkxvY2FsZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMubG9jYWxlIHx8IHRoaXMuZ2V0RGVmYXVsdExvY2FsZSgpO1xuXG4gICAgICAgICAgICB0aGlzLnNldChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUsIGxvY2FsZSk7XG4gICAgICAgICAgICB0aGlzLnNldCgndGV4dE9yaWVudGF0aW9uJywgdGhpcy5nZXRMYW5ndWFnZUJ5S2V5KGxvY2FsZSkuZGlyZWN0aW9uIHx8ICdsdHInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMubG9jYWxlIHx8IHRoaXMuZ2V0RGVmYXVsdExvY2FsZSgpO1xuXG4gICAgICAgICAgICB0aGlzLnNldFdpdGhvdXRTdG9yZShVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUsIGxvY2FsZSk7XG4gICAgICAgICAgICB0aGlzLnNldFdpdGhvdXRTdG9yZSgndGV4dE9yaWVudGF0aW9uJywgdGhpcy5nZXRMYW5ndWFnZUJ5S2V5KGxvY2FsZSkuZGlyZWN0aW9uIHx8ICdsdHInKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdXAgYSBjYWxsYmFjayB0byBub3RpZnkgd2hlbiBhIHByb3BlcnR5IGhhcyBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSBUaGUgcHJvcGVydHkgdG8gd2F0Y2hcbiAgICAgKiBAcmV0dXJucyBOb3RpZmljYXRpb24gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBzZWxlY3QocHJvcGVydHk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uQ2hhbmdlXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHVzZXJQcmVmZXJlbmNlU3RhdHVzKSA9PiB1c2VyUHJlZmVyZW5jZVN0YXR1c1twcm9wZXJ0eV0pLFxuICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHByZWZlcmVuY2UgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBEZWZhdWx0IHRvIHJldHVybiBpZiB0aGUgcHJvcGVydHkgaXMgbm90IGZvdW5kXG4gICAgICogQHJldHVybnMgUHJlZmVyZW5jZSBwcm9wZXJ0eVxuICAgICAqL1xuICAgIGdldChwcm9wZXJ0eTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmdldFByb3BlcnR5S2V5KHByb3BlcnR5KTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIHByZWZlcmVuY2UgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHZhbHVlIE5ldyB2YWx1ZSBmb3IgdGhlIHByb3BlcnR5XG4gICAgICovXG4gICAgc2V0KHByb3BlcnR5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgaWYgKCFwcm9wZXJ0eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgdGhpcy5nZXRQcm9wZXJ0eUtleShwcm9wZXJ0eSksXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlU3RhdHVzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlU3ViamVjdC5uZXh0KHRoaXMudXNlclByZWZlcmVuY2VTdGF0dXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBwcmVmZXJlbmNlIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUgZm9yIHRoZSBwcm9wZXJ0eVxuICAgICAqL1xuICAgIHNldFdpdGhvdXRTdG9yZShwcm9wZXJ0eTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlU3RhdHVzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlU3ViamVjdC5uZXh0KHRoaXMudXNlclByZWZlcmVuY2VTdGF0dXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGFuIGl0ZW0gaXMgcHJlc2VudCBpbiB0aGUgc3RvcmFnZVxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGl0ZW0gaXMgcHJlc2VudCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaGFzSXRlbShwcm9wZXJ0eTogc3RyaW5nKSB7XG4gICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmhhc0l0ZW0oXG4gICAgICAgICAgICB0aGlzLmdldFByb3BlcnR5S2V5KHByb3BlcnR5KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFjdGl2ZSBzdG9yYWdlIHByZWZpeCBmb3IgcHJlZmVyZW5jZXMuXG4gICAgICogQHJldHVybnMgU3RvcmFnZSBwcmVmaXhcbiAgICAgKi9cbiAgICBnZXRTdG9yYWdlUHJlZml4KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSgnVVNFUl9QUk9GSUxFJykgfHwgJ0dVRVNUJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhY3RpdmUgc3RvcmFnZSBwcmVmaXggZm9yIHByZWZlcmVuY2VzLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBOYW1lIG9mIHRoZSBwcmVmaXhcbiAgICAgKi9cbiAgICBzZXRTdG9yYWdlUHJlZml4KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oJ1VTRVJfUFJPRklMRScsIHZhbHVlIHx8ICdHVUVTVCcpO1xuICAgICAgICB0aGlzLmluaXRVc2VyUHJlZmVyZW5jZVN0YXR1cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZ1bGwgcHJvcGVydHkga2V5IHdpdGggcHJlZml4LlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSBUaGUgcHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm5zIFByb3BlcnR5IGtleVxuICAgICAqL1xuICAgIGdldFByb3BlcnR5S2V5KHByb3BlcnR5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5nZXRTdG9yYWdlUHJlZml4KCl9X18ke3Byb3BlcnR5fWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBhdmFpbGFibGUgcGFnZSBzaXplcy5cbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiBwYWdlIHNpemUgdmFsdWVzXG4gICAgICovXG4gICAgZ2V0IHN1cHBvcnRlZFBhZ2VTaXplcygpOiBudW1iZXJbXSB7XG4gICAgICAgIGNvbnN0IHN1cHBvcnRlZFBhZ2VTaXplcyA9IHRoaXMuZ2V0KFVzZXJQcmVmZXJlbmNlVmFsdWVzLlN1cHBvcnRlZFBhZ2VTaXplcyk7XG5cbiAgICAgICAgaWYgKHN1cHBvcnRlZFBhZ2VTaXplcykge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3VwcG9ydGVkUGFnZVNpemVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcENvbmZpZy5nZXQoJ3BhZ2luYXRpb24uc3VwcG9ydGVkUGFnZVNpemVzJywgdGhpcy5kZWZhdWx0cy5zdXBwb3J0ZWRQYWdlU2l6ZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0IHN1cHBvcnRlZFBhZ2VTaXplcyh2YWx1ZTogbnVtYmVyW10pIHtcbiAgICAgICAgdGhpcy5zZXQoVXNlclByZWZlcmVuY2VWYWx1ZXMuU3VwcG9ydGVkUGFnZVNpemVzLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKiBQYWdpbmF0aW9uIHNpemUuICovXG4gICAgc2V0IHBhZ2luYXRpb25TaXplKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZXQoVXNlclByZWZlcmVuY2VWYWx1ZXMuUGFnaW5hdGlvblNpemUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgcGFnaW5hdGlvblNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgcGFnaW5hdGlvblNpemUgPSB0aGlzLmdldChVc2VyUHJlZmVyZW5jZVZhbHVlcy5QYWdpbmF0aW9uU2l6ZSk7XG5cbiAgICAgICAgaWYgKHBhZ2luYXRpb25TaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHBhZ2luYXRpb25TaXplKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIodGhpcy5hcHBDb25maWcuZ2V0KCdwYWdpbmF0aW9uLnNpemUnLCB0aGlzLmRlZmF1bHRzLnBhZ2luYXRpb25TaXplKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQ3VycmVudCBsb2NhbGUgc2V0dGluZy4gKi9cbiAgICBnZXQgbG9jYWxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUpO1xuICAgIH1cblxuICAgIHNldCBsb2NhbGUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNldChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkZWZhdWx0IGxvY2FsZS5cbiAgICAgKiBAcmV0dXJucyBEZWZhdWx0IGxvY2FsZSBsYW5ndWFnZSBjb2RlXG4gICAgICovXG4gICAgcHVibGljIGdldERlZmF1bHRMb2NhbGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KFVzZXJQcmVmZXJlbmNlVmFsdWVzLkxvY2FsZSkgfHwgdGhpcy50cmFuc2xhdGUuZ2V0QnJvd3NlckN1bHR1cmVMYW5nKCkgfHwgJ2VuJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExhbmd1YWdlQnlLZXkoa2V5OiBzdHJpbmcpOiBMYW5ndWFnZUl0ZW0ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5hcHBDb25maWdcbiAgICAgICAgICAgICAgICAuZ2V0PEFycmF5PExhbmd1YWdlSXRlbT4+KEFwcENvbmZpZ1ZhbHVlcy5BUFBfQ09ORklHX0xBTkdVQUdFU19LRVksIFs8TGFuZ3VhZ2VJdGVtPiB7IGtleTogJ2VuJyB9XSlcbiAgICAgICAgICAgICAgICAuZmluZCgobGFuZ3VhZ2UpID0+IGtleS5pbmNsdWRlcyhsYW5ndWFnZS5rZXkpKSB8fCA8TGFuZ3VhZ2VJdGVtPiB7IGtleTogJ2VuJyB9XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19