/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { StorageService } from './storage.service';
import { UserPreferencesService } from './user-preferences.service';
import { DemoForm } from '../mock/form/demo-form.mock';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
import * as i2 from "./alfresco-api.service";
import * as i3 from "./user-preferences.service";
import * as i4 from "./storage.service";
var CoreAutomationService = /** @class */ (function () {
    function CoreAutomationService(appConfigService, alfrescoApiService, userPreferencesService, storageService) {
        this.appConfigService = appConfigService;
        this.alfrescoApiService = alfrescoApiService;
        this.userPreferencesService = userPreferencesService;
        this.storageService = storageService;
        this.forms = new DemoForm();
    }
    /**
     * @return {?}
     */
    CoreAutomationService.prototype.setup = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var adfProxy = window['adf'] || {};
        adfProxy.setConfigField = (/**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        function (field, value) {
            _this.appConfigService.config[field] = JSON.parse(value);
        });
        adfProxy.setStorageItem = (/**
         * @param {?} key
         * @param {?} data
         * @return {?}
         */
        function (key, data) {
            _this.storageService.setItem(key, data);
        });
        adfProxy.setUserPreference = (/**
         * @param {?} key
         * @param {?} data
         * @return {?}
         */
        function (key, data) {
            _this.userPreferencesService.set(key, data);
        });
        adfProxy.setFormInEditor = (/**
         * @param {?} json
         * @return {?}
         */
        function (json) {
            _this.forms.formDefinition = JSON.parse(json);
        });
        adfProxy.setCloudFormInEditor = (/**
         * @param {?} json
         * @return {?}
         */
        function (json) {
            _this.forms.cloudFormDefinition = JSON.parse(json);
        });
        adfProxy.clearStorage = (/**
         * @return {?}
         */
        function () {
            _this.storageService.clear();
        });
        adfProxy.apiReset = (/**
         * @return {?}
         */
        function () {
            _this.alfrescoApiService.reset();
        });
        window['adf'] = adfProxy;
    };
    CoreAutomationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CoreAutomationService.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: AlfrescoApiService },
        { type: UserPreferencesService },
        { type: StorageService }
    ]; };
    /** @nocollapse */ CoreAutomationService.ngInjectableDef = i0.defineInjectable({ factory: function CoreAutomationService_Factory() { return new CoreAutomationService(i0.inject(i1.AppConfigService), i0.inject(i2.AlfrescoApiService), i0.inject(i3.UserPreferencesService), i0.inject(i4.StorageService)); }, token: CoreAutomationService, providedIn: "root" });
    return CoreAutomationService;
}());
export { CoreAutomationService };
if (false) {
    /** @type {?} */
    CoreAutomationService.prototype.forms;
    /**
     * @type {?}
     * @private
     */
    CoreAutomationService.prototype.appConfigService;
    /**
     * @type {?}
     * @private
     */
    CoreAutomationService.prototype.alfrescoApiService;
    /**
     * @type {?}
     * @private
     */
    CoreAutomationService.prototype.userPreferencesService;
    /**
     * @type {?}
     * @private
     */
    CoreAutomationService.prototype.storageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b21hdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvYXV0b21hdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7Ozs7O0FBRXZEO0lBT0ksK0JBQW9CLGdCQUFrQyxFQUNsQyxrQkFBc0MsRUFDdEMsc0JBQThDLEVBQzlDLGNBQThCO1FBSDlCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzlDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUwzQyxVQUFLLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQU05QixDQUFDOzs7O0lBRUQscUNBQUs7OztJQUFMO1FBQUEsaUJBZ0NDOztZQS9CUyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFFcEMsUUFBUSxDQUFDLGNBQWM7Ozs7O1FBQUcsVUFBQyxLQUFhLEVBQUUsS0FBYTtZQUNuRCxLQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFBLENBQUM7UUFFRixRQUFRLENBQUMsY0FBYzs7Ozs7UUFBRyxVQUFDLEdBQVcsRUFBRSxJQUFZO1lBQ2hELEtBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUEsQ0FBQztRQUVGLFFBQVEsQ0FBQyxpQkFBaUI7Ozs7O1FBQUcsVUFBQyxHQUFXLEVBQUUsSUFBUztZQUNoRCxLQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUEsQ0FBQztRQUVGLFFBQVEsQ0FBQyxlQUFlOzs7O1FBQUcsVUFBQyxJQUFZO1lBQ3BDLEtBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFBLENBQUM7UUFFRixRQUFRLENBQUMsb0JBQW9COzs7O1FBQUcsVUFBQyxJQUFZO1lBQ3pDLEtBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUEsQ0FBQztRQUVGLFFBQVEsQ0FBQyxZQUFZOzs7UUFBRztZQUNwQixLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hDLENBQUMsQ0FBQSxDQUFDO1FBRUYsUUFBUSxDQUFDLFFBQVE7OztRQUFHO1lBQ2hCLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwQyxDQUFDLENBQUEsQ0FBQztRQUVGLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQzs7Z0JBN0NKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBUlEsZ0JBQWdCO2dCQUNoQixrQkFBa0I7Z0JBRWxCLHNCQUFzQjtnQkFEdEIsY0FBYzs7O2dDQXBCdkI7Q0FzRUMsQUE5Q0QsSUE4Q0M7U0EzQ1kscUJBQXFCOzs7SUFFOUIsc0NBQThCOzs7OztJQUVsQixpREFBMEM7Ozs7O0lBQzFDLG1EQUE4Qzs7Ozs7SUFDOUMsdURBQXNEOzs7OztJQUN0RCwrQ0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlIH0gZnJvbSAnLi91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGVtb0Zvcm0gfSBmcm9tICcuLi9tb2NrL2Zvcm0vZGVtby1mb3JtLm1vY2snO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvcmVBdXRvbWF0aW9uU2VydmljZSB7XG5cbiAgICBwdWJsaWMgZm9ybXMgPSBuZXcgRGVtb0Zvcm0oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdXNlclByZWZlcmVuY2VzU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSkge1xuICAgIH1cblxuICAgIHNldHVwKCkge1xuICAgICAgICBjb25zdCBhZGZQcm94eSA9IHdpbmRvd1snYWRmJ10gfHwge307XG5cbiAgICAgICAgYWRmUHJveHkuc2V0Q29uZmlnRmllbGQgPSAoZmllbGQ6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHBDb25maWdTZXJ2aWNlLmNvbmZpZ1tmaWVsZF0gPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGZQcm94eS5zZXRTdG9yYWdlSXRlbSA9IChrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNldEl0ZW0oa2V5LCBkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGZQcm94eS5zZXRVc2VyUHJlZmVyZW5jZSA9IChrZXk6IHN0cmluZywgZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlc1NlcnZpY2Uuc2V0KGtleSwgZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuc2V0Rm9ybUluRWRpdG9yID0gKGpzb246IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5mb3Jtcy5mb3JtRGVmaW5pdGlvbiA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuc2V0Q2xvdWRGb3JtSW5FZGl0b3IgPSAoanNvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZvcm1zLmNsb3VkRm9ybURlZmluaXRpb24gPSBKU09OLnBhcnNlKGpzb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZlByb3h5LmNsZWFyU3RvcmFnZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UuY2xlYXIoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGZQcm94eS5hcGlSZXNldCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLnJlc2V0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93WydhZGYnXSA9IGFkZlByb3h5O1xuICAgIH1cbn1cbiJdfQ==