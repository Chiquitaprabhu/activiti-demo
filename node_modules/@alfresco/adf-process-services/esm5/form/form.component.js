/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { AttachFileWidgetComponent, AttachFolderWidgetComponent } from '../content-widget';
import { EcmModelService, NodeService, WidgetVisibilityService, FormService, FormRenderingService, FormBaseComponent, FormOutcomeModel, FormEvent, FormErrorEvent, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
var FormComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FormComponent, _super);
    function FormComponent(formService, visibilityService, ecmModelService, nodeService, formRenderingService) {
        var _this = _super.call(this) || this;
        _this.formService = formService;
        _this.visibilityService = visibilityService;
        _this.ecmModelService = ecmModelService;
        _this.nodeService = nodeService;
        _this.formRenderingService = formRenderingService;
        /**
         * Toggle saving of form metadata.
         */
        _this.saveMetadata = false;
        /**
         * Emitted when the form is submitted with the `Save` or custom outcomes.
         */
        _this.formSaved = new EventEmitter();
        /**
         * Emitted when the form is submitted with the `Complete` outcome.
         */
        _this.formCompleted = new EventEmitter();
        /**
         * Emitted when form content is clicked.
         */
        _this.formContentClicked = new EventEmitter();
        /**
         * Emitted when the form is loaded or reloaded.
         */
        _this.formLoaded = new EventEmitter();
        /**
         * Emitted when form values are refreshed due to a data property change.
         */
        _this.formDataRefreshed = new EventEmitter();
        _this.debugMode = false;
        _this.subscriptions = [];
        _this.formRenderingService.setComponentTypeResolver('upload', (/**
         * @return {?}
         */
        function () { return AttachFileWidgetComponent; }), true);
        _this.formRenderingService.setComponentTypeResolver('select-folder', (/**
         * @return {?}
         */
        function () { return AttachFolderWidgetComponent; }), true);
        return _this;
    }
    /**
     * @return {?}
     */
    FormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.formService.formContentClicked.subscribe((/**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            _this.formContentClicked.emit(content);
        })), this.formService.validateForm.subscribe((/**
         * @param {?} validateFormEvent
         * @return {?}
         */
        function (validateFormEvent) {
            if (validateFormEvent.errorsField.length > 0) {
                _this.formError.next(validateFormEvent.errorsField);
            }
        })));
    };
    /**
     * @return {?}
     */
    FormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe(); }));
        this.subscriptions = [];
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getFormByTaskId(taskId.currentValue);
            return;
        }
        /** @type {?} */
        var formId = changes['formId'];
        if (formId && formId.currentValue) {
            this.getFormDefinitionByFormId(formId.currentValue);
            return;
        }
        /** @type {?} */
        var formName = changes['formName'];
        if (formName && formName.currentValue) {
            this.getFormDefinitionByFormName(formName.currentValue);
            return;
        }
        /** @type {?} */
        var nodeId = changes['nodeId'];
        if (nodeId && nodeId.currentValue) {
            this.loadFormForEcmNode(nodeId.currentValue);
            return;
        }
        /** @type {?} */
        var data = changes['data'];
        if (data && data.currentValue) {
            this.refreshFormData();
            return;
        }
    };
    /**
     * Invoked when user clicks form refresh button.
     */
    /**
     * Invoked when user clicks form refresh button.
     * @return {?}
     */
    FormComponent.prototype.onRefreshClicked = /**
     * Invoked when user clicks form refresh button.
     * @return {?}
     */
    function () {
        this.loadForm();
    };
    /**
     * @return {?}
     */
    FormComponent.prototype.loadForm = /**
     * @return {?}
     */
    function () {
        if (this.taskId) {
            this.getFormByTaskId(this.taskId);
            return;
        }
        if (this.formId) {
            this.getFormDefinitionByFormId(this.formId);
            return;
        }
        if (this.formName) {
            this.getFormDefinitionByFormName(this.formName);
            return;
        }
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    FormComponent.prototype.findProcessVariablesByTaskId = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        return this.formService.getTask(taskId).pipe(switchMap((/**
         * @param {?} task
         * @return {?}
         */
        function (task) {
            if (_this.isAProcessTask(task)) {
                return _this.visibilityService.getTaskProcessVariable(taskId);
            }
            else {
                return of({});
            }
        })));
    };
    /**
     * @param {?} taskRepresentation
     * @return {?}
     */
    FormComponent.prototype.isAProcessTask = /**
     * @param {?} taskRepresentation
     * @return {?}
     */
    function (taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    FormComponent.prototype.getFormByTaskId = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.findProcessVariablesByTaskId(taskId).subscribe((/**
             * @param {?} processVariables
             * @return {?}
             */
            function (processVariables) {
                _this.formService
                    .getTaskForm(taskId)
                    .subscribe((/**
                 * @param {?} form
                 * @return {?}
                 */
                function (form) {
                    /** @type {?} */
                    var parsedForm = _this.parseForm(form);
                    _this.visibilityService.refreshVisibility(parsedForm);
                    parsedForm.validateForm();
                    _this.form = parsedForm;
                    _this.onFormLoaded(_this.form);
                    resolve(_this.form);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.handleError(error);
                    // reject(error);
                    resolve(null);
                }));
            }));
        }));
    };
    /**
     * @param {?} formId
     * @return {?}
     */
    FormComponent.prototype.getFormDefinitionByFormId = /**
     * @param {?} formId
     * @return {?}
     */
    function (formId) {
        var _this = this;
        this.formService
            .getFormDefinitionById(formId)
            .subscribe((/**
         * @param {?} form
         * @return {?}
         */
        function (form) {
            _this.formName = form.name;
            _this.form = _this.parseForm(form);
            _this.visibilityService.refreshVisibility(_this.form);
            _this.form.validateForm();
            _this.onFormLoaded(_this.form);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.handleError(error);
        }));
    };
    /**
     * @param {?} formName
     * @return {?}
     */
    FormComponent.prototype.getFormDefinitionByFormName = /**
     * @param {?} formName
     * @return {?}
     */
    function (formName) {
        var _this = this;
        this.formService
            .getFormDefinitionByName(formName)
            .subscribe((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            _this.formService.getFormDefinitionById(id).subscribe((/**
             * @param {?} form
             * @return {?}
             */
            function (form) {
                _this.form = _this.parseForm(form);
                _this.visibilityService.refreshVisibility(_this.form);
                _this.form.validateForm();
                _this.onFormLoaded(_this.form);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.handleError(error);
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.handleError(error);
        }));
    };
    /**
     * @return {?}
     */
    FormComponent.prototype.saveTaskForm = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.form && this.form.taskId) {
            this.formService
                .saveTaskForm(this.form.taskId, this.form.values)
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.onTaskSaved(_this.form);
                _this.storeFormAsMetadata();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.onTaskSavedError(_this.form, error); }));
        }
    };
    /**
     * @param {?=} outcome
     * @return {?}
     */
    FormComponent.prototype.completeTaskForm = /**
     * @param {?=} outcome
     * @return {?}
     */
    function (outcome) {
        var _this = this;
        if (this.form && this.form.taskId) {
            this.formService
                .completeTaskForm(this.form.taskId, this.form.values, outcome)
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.onTaskCompleted(_this.form);
                _this.storeFormAsMetadata();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.onTaskCompletedError(_this.form, error); }));
        }
    };
    /**
     * @param {?} err
     * @return {?}
     */
    FormComponent.prototype.handleError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        this.error.emit(err);
    };
    /**
     * @param {?} formRepresentationJSON
     * @return {?}
     */
    FormComponent.prototype.parseForm = /**
     * @param {?} formRepresentationJSON
     * @return {?}
     */
    function (formRepresentationJSON) {
        if (formRepresentationJSON) {
            /** @type {?} */
            var form = new FormModel(formRepresentationJSON, this.data, this.readOnly, this.formService);
            if (!formRepresentationJSON.fields) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            if (this.fieldValidators && this.fieldValidators.length > 0) {
                form.fieldValidators = this.fieldValidators;
            }
            return form;
        }
        return null;
    };
    /**
     * Get custom set of outcomes for a Form Definition.
     * @param form Form definition model.
     */
    /**
     * Get custom set of outcomes for a Form Definition.
     * @param {?} form Form definition model.
     * @return {?}
     */
    FormComponent.prototype.getFormDefinitionOutcomes = /**
     * Get custom set of outcomes for a Form Definition.
     * @param {?} form Form definition model.
     * @return {?}
     */
    function (form) {
        return [
            new FormOutcomeModel(form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormComponent.prototype.checkVisibility = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormComponent.prototype.refreshFormData = /**
     * @private
     * @return {?}
     */
    function () {
        this.form = this.parseForm(this.form.json);
        this.onFormLoaded(this.form);
        this.onFormDataRefreshed(this.form);
    };
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    FormComponent.prototype.loadFormForEcmNode = /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        var _this = this;
        this.nodeService.getNodeMetadata(nodeId).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.data = data.metadata;
            _this.loadFormFromActiviti(data.nodeType);
        }), this.handleError);
    };
    /**
     * @param {?} nodeType
     * @return {?}
     */
    FormComponent.prototype.loadFormFromActiviti = /**
     * @param {?} nodeType
     * @return {?}
     */
    function (nodeType) {
        var _this = this;
        this.formService.searchFrom(nodeType).subscribe((/**
         * @param {?} form
         * @return {?}
         */
        function (form) {
            if (!form) {
                _this.formService.createFormFromANode(nodeType).subscribe((/**
                 * @param {?} formMetadata
                 * @return {?}
                 */
                function (formMetadata) {
                    _this.loadFormFromFormId(formMetadata.id);
                }));
            }
            else {
                _this.loadFormFromFormId(form.id);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.handleError(error);
        }));
    };
    /**
     * @private
     * @param {?} formId
     * @return {?}
     */
    FormComponent.prototype.loadFormFromFormId = /**
     * @private
     * @param {?} formId
     * @return {?}
     */
    function (formId) {
        this.formId = formId;
        this.loadForm();
    };
    /**
     * @protected
     * @return {?}
     */
    FormComponent.prototype.storeFormAsMetadata = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.saveMetadata) {
            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe((/**
             * @param {?} type
             * @return {?}
             */
            function (type) {
                _this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, EcmModelService.MODEL_NAMESPACE, _this.form.values, _this.path, _this.nameNode);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.handleError(error);
            }));
        }
    };
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    FormComponent.prototype.onFormLoaded = /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formLoaded.emit(form);
        this.formService.formLoaded.next(new FormEvent(form));
    };
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    FormComponent.prototype.onFormDataRefreshed = /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formDataRefreshed.emit(form);
        this.formService.formDataRefreshed.next(new FormEvent(form));
    };
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    FormComponent.prototype.onTaskSaved = /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formSaved.emit(form);
        this.formService.taskSaved.next(new FormEvent(form));
    };
    /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    FormComponent.prototype.onTaskSavedError = /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    function (form, error) {
        this.handleError(error);
        this.formService.taskSavedError.next(new FormErrorEvent(form, error));
    };
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    FormComponent.prototype.onTaskCompleted = /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formCompleted.emit(form);
        this.formService.taskCompleted.next(new FormEvent(form));
    };
    /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    FormComponent.prototype.onTaskCompletedError = /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    function (form, error) {
        this.handleError(error);
        this.formService.taskCompletedError.next(new FormErrorEvent(form, error));
    };
    /**
     * @protected
     * @param {?} outcome
     * @return {?}
     */
    FormComponent.prototype.onExecuteOutcome = /**
     * @protected
     * @param {?} outcome
     * @return {?}
     */
    function (outcome) {
        /** @type {?} */
        var args = new FormOutcomeEvent(outcome);
        this.formService.executeOutcome.next(args);
        if (args.defaultPrevented) {
            return false;
        }
        this.executeOutcome.emit(args);
        if (args.defaultPrevented) {
            return false;
        }
        return true;
    };
    FormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-form',
                    template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <button [id]=\"'adf-form-'+ outcome.name  | formatSpace\" *ngFor=\"let outcome of form.outcomes\"\n                [color]=\"getColorForOutcome(outcome.name)\" mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                (click)=\"onOutcomeClicked(outcome)\">\n                {{outcome.name | translate | uppercase }}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    FormComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: WidgetVisibilityService },
        { type: EcmModelService },
        { type: NodeService },
        { type: FormRenderingService }
    ]; };
    FormComponent.propDecorators = {
        form: [{ type: Input }],
        taskId: [{ type: Input }],
        nodeId: [{ type: Input }],
        formId: [{ type: Input }],
        formName: [{ type: Input }],
        saveMetadata: [{ type: Input }],
        data: [{ type: Input }],
        formSaved: [{ type: Output }],
        formCompleted: [{ type: Output }],
        formContentClicked: [{ type: Output }],
        formLoaded: [{ type: Output }],
        formDataRefreshed: [{ type: Output }]
    };
    return FormComponent;
}(FormBaseComponent));
export { FormComponent };
if (false) {
    /**
     * Underlying form model instance.
     * @type {?}
     */
    FormComponent.prototype.form;
    /**
     * Task id to fetch corresponding form and values.
     * @type {?}
     */
    FormComponent.prototype.taskId;
    /**
     * Content Services node ID for the form metadata.
     * @type {?}
     */
    FormComponent.prototype.nodeId;
    /**
     * The id of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formId;
    /**
     * Name of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formName;
    /**
     * Toggle saving of form metadata.
     * @type {?}
     */
    FormComponent.prototype.saveMetadata;
    /**
     * Custom form values map to be used with the rendered form.
     * @type {?}
     */
    FormComponent.prototype.data;
    /**
     * Emitted when the form is submitted with the `Save` or custom outcomes.
     * @type {?}
     */
    FormComponent.prototype.formSaved;
    /**
     * Emitted when the form is submitted with the `Complete` outcome.
     * @type {?}
     */
    FormComponent.prototype.formCompleted;
    /**
     * Emitted when form content is clicked.
     * @type {?}
     */
    FormComponent.prototype.formContentClicked;
    /**
     * Emitted when the form is loaded or reloaded.
     * @type {?}
     */
    FormComponent.prototype.formLoaded;
    /**
     * Emitted when form values are refreshed due to a data property change.
     * @type {?}
     */
    FormComponent.prototype.formDataRefreshed;
    /** @type {?} */
    FormComponent.prototype.debugMode;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.formService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.ecmModelService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.nodeService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.formRenderingService;
}
//# sourceMappingURL=data:application/json;base64,