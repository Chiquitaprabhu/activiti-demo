/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppConfigService, CardViewDateItemModel, CardViewTextItemModel, TranslationService } from '@alfresco/adf-core';
import { Component, Input } from '@angular/core';
import { ProcessInstance } from '../models/process-instance.model';
var ProcessInstanceHeaderComponent = /** @class */ (function () {
    function ProcessInstanceHeaderComponent(translationService, appConfig) {
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ProcessInstanceHeaderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.refreshData();
    };
    /**
     * @return {?}
     */
    ProcessInstanceHeaderComponent.prototype.refreshData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.processInstance) {
            /** @type {?} */
            var defaultProperties = this.initDefaultProperties();
            /** @type {?} */
            var filteredProperties_1 = this.appConfig.get('adf-process-instance-header.presets.properties');
            this.properties = defaultProperties.filter((/**
             * @param {?} cardItem
             * @return {?}
             */
            function (cardItem) { return _this.isValidSelection(filteredProperties_1, cardItem); }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    ProcessInstanceHeaderComponent.prototype.initDefaultProperties = /**
     * @private
     * @return {?}
     */
    function () {
        return [
            new CardViewTextItemModel({
                label: 'ADF_PROCESS_LIST.PROPERTIES.STATUS',
                value: this.getProcessStatus(),
                key: 'status'
            }),
            new CardViewDateItemModel({
                label: 'ADF_PROCESS_LIST.PROPERTIES.END_DATE',
                value: this.processInstance.ended,
                format: this.dateFormat,
                locale: this.dateLocale,
                key: 'ended',
                default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.END_DATE_DEFAULT')
            }),
            new CardViewTextItemModel({
                label: 'ADF_PROCESS_LIST.PROPERTIES.CATEGORY',
                value: this.processInstance.processDefinitionCategory,
                key: 'category',
                default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CATEGORY_DEFAULT')
            }),
            new CardViewTextItemModel({
                label: 'ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY',
                value: this.processInstance.businessKey,
                key: 'businessKey',
                default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY_DEFAULT')
            }),
            new CardViewTextItemModel({
                label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED_BY',
                value: this.getStartedByFullName(),
                key: 'assignee',
                default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CREATED_BY_DEFAULT')
            }),
            new CardViewDateItemModel({
                label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED',
                value: this.processInstance.started,
                format: this.dateFormat,
                locale: this.dateLocale,
                key: 'created'
            }),
            new CardViewTextItemModel({ label: 'ADF_PROCESS_LIST.PROPERTIES.ID',
                value: this.processInstance.id,
                key: 'id'
            }),
            new CardViewTextItemModel({ label: 'ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION',
                value: this.processInstance.processDefinitionDescription,
                key: 'description',
                default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION_DEFAULT')
            })
        ];
    };
    /**
     * @private
     * @param {?} filteredProperties
     * @param {?} cardItem
     * @return {?}
     */
    ProcessInstanceHeaderComponent.prototype.isValidSelection = /**
     * @private
     * @param {?} filteredProperties
     * @param {?} cardItem
     * @return {?}
     */
    function (filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    };
    /**
     * @return {?}
     */
    ProcessInstanceHeaderComponent.prototype.getProcessStatus = /**
     * @return {?}
     */
    function () {
        if (this.processInstance) {
            return this.isRunning() ? 'Running' : 'Completed';
        }
    };
    /**
     * @return {?}
     */
    ProcessInstanceHeaderComponent.prototype.getStartedByFullName = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fullName = '';
        if (this.processInstance && this.processInstance.startedBy) {
            fullName += this.processInstance.startedBy.firstName || '';
            fullName += fullName ? ' ' : '';
            fullName += this.processInstance.startedBy.lastName || '';
        }
        return fullName;
    };
    /**
     * @return {?}
     */
    ProcessInstanceHeaderComponent.prototype.isRunning = /**
     * @return {?}
     */
    function () {
        return this.processInstance && !this.processInstance.ended;
    };
    ProcessInstanceHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-process-instance-header',
                    template: "<mat-card *ngIf=\"processInstance\" class=\"adf-card-container\">\n    <mat-card-content>\n        <adf-card-view [properties]=\"properties\"></adf-card-view>\n    </mat-card-content>\n</mat-card>\n",
                    styles: [":host{width:100%}.adf-card-container{font-family:inherit}"]
                }] }
    ];
    /** @nocollapse */
    ProcessInstanceHeaderComponent.ctorParameters = function () { return [
        { type: TranslationService },
        { type: AppConfigService }
    ]; };
    ProcessInstanceHeaderComponent.propDecorators = {
        processInstance: [{ type: Input }]
    };
    return ProcessInstanceHeaderComponent;
}());
export { ProcessInstanceHeaderComponent };
if (false) {
    /**
     * (**required**) Full details of the process instance to display information about.
     * @type {?}
     */
    ProcessInstanceHeaderComponent.prototype.processInstance;
    /** @type {?} */
    ProcessInstanceHeaderComponent.prototype.properties;
    /** @type {?} */
    ProcessInstanceHeaderComponent.prototype.dateFormat;
    /** @type {?} */
    ProcessInstanceHeaderComponent.prototype.dateLocale;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceHeaderComponent.prototype.translationService;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceHeaderComponent.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,