/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { AttachFileWidgetComponent, AttachFolderWidgetComponent } from '../content-widget';
import { EcmModelService, NodeService, WidgetVisibilityService, FormService, FormRenderingService, FormBaseComponent, FormOutcomeModel, FormEvent, FormErrorEvent, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
export class FormComponent extends FormBaseComponent {
    /**
     * @param {?} formService
     * @param {?} visibilityService
     * @param {?} ecmModelService
     * @param {?} nodeService
     * @param {?} formRenderingService
     */
    constructor(formService, visibilityService, ecmModelService, nodeService, formRenderingService) {
        super();
        this.formService = formService;
        this.visibilityService = visibilityService;
        this.ecmModelService = ecmModelService;
        this.nodeService = nodeService;
        this.formRenderingService = formRenderingService;
        /**
         * Toggle saving of form metadata.
         */
        this.saveMetadata = false;
        /**
         * Emitted when the form is submitted with the `Save` or custom outcomes.
         */
        this.formSaved = new EventEmitter();
        /**
         * Emitted when the form is submitted with the `Complete` outcome.
         */
        this.formCompleted = new EventEmitter();
        /**
         * Emitted when form content is clicked.
         */
        this.formContentClicked = new EventEmitter();
        /**
         * Emitted when the form is loaded or reloaded.
         */
        this.formLoaded = new EventEmitter();
        /**
         * Emitted when form values are refreshed due to a data property change.
         */
        this.formDataRefreshed = new EventEmitter();
        this.debugMode = false;
        this.subscriptions = [];
        this.formRenderingService.setComponentTypeResolver('upload', (/**
         * @return {?}
         */
        () => AttachFileWidgetComponent), true);
        this.formRenderingService.setComponentTypeResolver('select-folder', (/**
         * @return {?}
         */
        () => AttachFolderWidgetComponent), true);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscriptions.push(this.formService.formContentClicked.subscribe((/**
         * @param {?} content
         * @return {?}
         */
        (content) => {
            this.formContentClicked.emit(content);
        })), this.formService.validateForm.subscribe((/**
         * @param {?} validateFormEvent
         * @return {?}
         */
        (validateFormEvent) => {
            if (validateFormEvent.errorsField.length > 0) {
                this.formError.next(validateFormEvent.errorsField);
            }
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => subscription.unsubscribe()));
        this.subscriptions = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getFormByTaskId(taskId.currentValue);
            return;
        }
        /** @type {?} */
        const formId = changes['formId'];
        if (formId && formId.currentValue) {
            this.getFormDefinitionByFormId(formId.currentValue);
            return;
        }
        /** @type {?} */
        const formName = changes['formName'];
        if (formName && formName.currentValue) {
            this.getFormDefinitionByFormName(formName.currentValue);
            return;
        }
        /** @type {?} */
        const nodeId = changes['nodeId'];
        if (nodeId && nodeId.currentValue) {
            this.loadFormForEcmNode(nodeId.currentValue);
            return;
        }
        /** @type {?} */
        const data = changes['data'];
        if (data && data.currentValue) {
            this.refreshFormData();
            return;
        }
    }
    /**
     * Invoked when user clicks form refresh button.
     * @return {?}
     */
    onRefreshClicked() {
        this.loadForm();
    }
    /**
     * @return {?}
     */
    loadForm() {
        if (this.taskId) {
            this.getFormByTaskId(this.taskId);
            return;
        }
        if (this.formId) {
            this.getFormDefinitionByFormId(this.formId);
            return;
        }
        if (this.formName) {
            this.getFormDefinitionByFormName(this.formName);
            return;
        }
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    findProcessVariablesByTaskId(taskId) {
        return this.formService.getTask(taskId).pipe(switchMap((/**
         * @param {?} task
         * @return {?}
         */
        (task) => {
            if (this.isAProcessTask(task)) {
                return this.visibilityService.getTaskProcessVariable(taskId);
            }
            else {
                return of({});
            }
        })));
    }
    /**
     * @param {?} taskRepresentation
     * @return {?}
     */
    isAProcessTask(taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    getFormByTaskId(taskId) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.findProcessVariablesByTaskId(taskId).subscribe((/**
             * @param {?} processVariables
             * @return {?}
             */
            (processVariables) => {
                this.formService
                    .getTaskForm(taskId)
                    .subscribe((/**
                 * @param {?} form
                 * @return {?}
                 */
                (form) => {
                    /** @type {?} */
                    const parsedForm = this.parseForm(form);
                    this.visibilityService.refreshVisibility(parsedForm);
                    parsedForm.validateForm();
                    this.form = parsedForm;
                    this.onFormLoaded(this.form);
                    resolve(this.form);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    this.handleError(error);
                    // reject(error);
                    resolve(null);
                }));
            }));
        }));
    }
    /**
     * @param {?} formId
     * @return {?}
     */
    getFormDefinitionByFormId(formId) {
        this.formService
            .getFormDefinitionById(formId)
            .subscribe((/**
         * @param {?} form
         * @return {?}
         */
        (form) => {
            this.formName = form.name;
            this.form = this.parseForm(form);
            this.visibilityService.refreshVisibility(this.form);
            this.form.validateForm();
            this.onFormLoaded(this.form);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.handleError(error);
        }));
    }
    /**
     * @param {?} formName
     * @return {?}
     */
    getFormDefinitionByFormName(formName) {
        this.formService
            .getFormDefinitionByName(formName)
            .subscribe((/**
         * @param {?} id
         * @return {?}
         */
        (id) => {
            this.formService.getFormDefinitionById(id).subscribe((/**
             * @param {?} form
             * @return {?}
             */
            (form) => {
                this.form = this.parseForm(form);
                this.visibilityService.refreshVisibility(this.form);
                this.form.validateForm();
                this.onFormLoaded(this.form);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.handleError(error);
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.handleError(error);
        }));
    }
    /**
     * @return {?}
     */
    saveTaskForm() {
        if (this.form && this.form.taskId) {
            this.formService
                .saveTaskForm(this.form.taskId, this.form.values)
                .subscribe((/**
             * @return {?}
             */
            () => {
                this.onTaskSaved(this.form);
                this.storeFormAsMetadata();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => this.onTaskSavedError(this.form, error)));
        }
    }
    /**
     * @param {?=} outcome
     * @return {?}
     */
    completeTaskForm(outcome) {
        if (this.form && this.form.taskId) {
            this.formService
                .completeTaskForm(this.form.taskId, this.form.values, outcome)
                .subscribe((/**
             * @return {?}
             */
            () => {
                this.onTaskCompleted(this.form);
                this.storeFormAsMetadata();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => this.onTaskCompletedError(this.form, error)));
        }
    }
    /**
     * @param {?} err
     * @return {?}
     */
    handleError(err) {
        this.error.emit(err);
    }
    /**
     * @param {?} formRepresentationJSON
     * @return {?}
     */
    parseForm(formRepresentationJSON) {
        if (formRepresentationJSON) {
            /** @type {?} */
            const form = new FormModel(formRepresentationJSON, this.data, this.readOnly, this.formService);
            if (!formRepresentationJSON.fields) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            if (this.fieldValidators && this.fieldValidators.length > 0) {
                form.fieldValidators = this.fieldValidators;
            }
            return form;
        }
        return null;
    }
    /**
     * Get custom set of outcomes for a Form Definition.
     * @param {?} form Form definition model.
     * @return {?}
     */
    getFormDefinitionOutcomes(form) {
        return [
            new FormOutcomeModel(form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    checkVisibility(field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    }
    /**
     * @private
     * @return {?}
     */
    refreshFormData() {
        this.form = this.parseForm(this.form.json);
        this.onFormLoaded(this.form);
        this.onFormDataRefreshed(this.form);
    }
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    loadFormForEcmNode(nodeId) {
        this.nodeService.getNodeMetadata(nodeId).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.data = data.metadata;
            this.loadFormFromActiviti(data.nodeType);
        }), this.handleError);
    }
    /**
     * @param {?} nodeType
     * @return {?}
     */
    loadFormFromActiviti(nodeType) {
        this.formService.searchFrom(nodeType).subscribe((/**
         * @param {?} form
         * @return {?}
         */
        (form) => {
            if (!form) {
                this.formService.createFormFromANode(nodeType).subscribe((/**
                 * @param {?} formMetadata
                 * @return {?}
                 */
                (formMetadata) => {
                    this.loadFormFromFormId(formMetadata.id);
                }));
            }
            else {
                this.loadFormFromFormId(form.id);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.handleError(error);
        }));
    }
    /**
     * @private
     * @param {?} formId
     * @return {?}
     */
    loadFormFromFormId(formId) {
        this.formId = formId;
        this.loadForm();
    }
    /**
     * @protected
     * @return {?}
     */
    storeFormAsMetadata() {
        if (this.saveMetadata) {
            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe((/**
             * @param {?} type
             * @return {?}
             */
            (type) => {
                this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, EcmModelService.MODEL_NAMESPACE, this.form.values, this.path, this.nameNode);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.handleError(error);
            }));
        }
    }
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    onFormLoaded(form) {
        this.formLoaded.emit(form);
        this.formService.formLoaded.next(new FormEvent(form));
    }
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    onFormDataRefreshed(form) {
        this.formDataRefreshed.emit(form);
        this.formService.formDataRefreshed.next(new FormEvent(form));
    }
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    onTaskSaved(form) {
        this.formSaved.emit(form);
        this.formService.taskSaved.next(new FormEvent(form));
    }
    /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    onTaskSavedError(form, error) {
        this.handleError(error);
        this.formService.taskSavedError.next(new FormErrorEvent(form, error));
    }
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    onTaskCompleted(form) {
        this.formCompleted.emit(form);
        this.formService.taskCompleted.next(new FormEvent(form));
    }
    /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    onTaskCompletedError(form, error) {
        this.handleError(error);
        this.formService.taskCompletedError.next(new FormErrorEvent(form, error));
    }
    /**
     * @protected
     * @param {?} outcome
     * @return {?}
     */
    onExecuteOutcome(outcome) {
        /** @type {?} */
        const args = new FormOutcomeEvent(outcome);
        this.formService.executeOutcome.next(args);
        if (args.defaultPrevented) {
            return false;
        }
        this.executeOutcome.emit(args);
        if (args.defaultPrevented) {
            return false;
        }
        return true;
    }
}
FormComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-form',
                template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <button [id]=\"'adf-form-'+ outcome.name  | formatSpace\" *ngFor=\"let outcome of form.outcomes\"\n                [color]=\"getColorForOutcome(outcome.name)\" mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                (click)=\"onOutcomeClicked(outcome)\">\n                {{outcome.name | translate | uppercase }}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
FormComponent.ctorParameters = () => [
    { type: FormService },
    { type: WidgetVisibilityService },
    { type: EcmModelService },
    { type: NodeService },
    { type: FormRenderingService }
];
FormComponent.propDecorators = {
    form: [{ type: Input }],
    taskId: [{ type: Input }],
    nodeId: [{ type: Input }],
    formId: [{ type: Input }],
    formName: [{ type: Input }],
    saveMetadata: [{ type: Input }],
    data: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    formLoaded: [{ type: Output }],
    formDataRefreshed: [{ type: Output }]
};
if (false) {
    /**
     * Underlying form model instance.
     * @type {?}
     */
    FormComponent.prototype.form;
    /**
     * Task id to fetch corresponding form and values.
     * @type {?}
     */
    FormComponent.prototype.taskId;
    /**
     * Content Services node ID for the form metadata.
     * @type {?}
     */
    FormComponent.prototype.nodeId;
    /**
     * The id of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formId;
    /**
     * Name of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formName;
    /**
     * Toggle saving of form metadata.
     * @type {?}
     */
    FormComponent.prototype.saveMetadata;
    /**
     * Custom form values map to be used with the rendered form.
     * @type {?}
     */
    FormComponent.prototype.data;
    /**
     * Emitted when the form is submitted with the `Save` or custom outcomes.
     * @type {?}
     */
    FormComponent.prototype.formSaved;
    /**
     * Emitted when the form is submitted with the `Complete` outcome.
     * @type {?}
     */
    FormComponent.prototype.formCompleted;
    /**
     * Emitted when form content is clicked.
     * @type {?}
     */
    FormComponent.prototype.formContentClicked;
    /**
     * Emitted when the form is loaded or reloaded.
     * @type {?}
     */
    FormComponent.prototype.formLoaded;
    /**
     * Emitted when form values are refreshed due to a data property change.
     * @type {?}
     */
    FormComponent.prototype.formDataRefreshed;
    /** @type {?} */
    FormComponent.prototype.debugMode;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.formService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.ecmModelService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.nodeService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.formRenderingService;
}
//# sourceMappingURL=data:application/json;base64,