{"version":3,"sources":["ng://@alfresco/adf-process-services/process-list/models/filter-process.model.ts","ng://@alfresco/adf-process-services/process-list/services/process-filter.service.ts","ng://@alfresco/adf-process-services/app-list/icon.model.ts","ng://@alfresco/adf-process-services/process-list/components/process-filters.component.ts","ng://@alfresco/adf-process-services/process-list/models/process-definition.model.ts","ng://@alfresco/adf-process-services/process-list/models/process-instance-variable.model.ts","ng://@alfresco/adf-process-services/process-list/models/process-instance.model.ts","ng://@alfresco/adf-process-services/process-list/models/process-list.model.ts","ng://@alfresco/adf-process-services/process-list/services/process.service.ts","ng://@alfresco/adf-process-services/process-list/components/process-instance-details.component.ts","ng://@alfresco/adf-process-services/process-list/components/process-audit.directive.ts","ng://@alfresco/adf-process-services/process-list/components/process-instance-header.component.ts","node_modules/tslib/tslib.es6.js","ng://@alfresco/adf-process-services/task-list/models/filter.model.ts","ng://@alfresco/adf-process-services/task-list/models/task-preset.model.ts","ng://@alfresco/adf-process-services/task-list/models/form.model.ts","ng://@alfresco/adf-process-services/task-list/models/task-details.model.ts","ng://@alfresco/adf-process-services/task-list/models/task-list.model.ts","ng://@alfresco/adf-process-services/task-list/services/tasklist.service.ts","ng://@alfresco/adf-process-services/task-list/components/task-list.component.ts","ng://@alfresco/adf-process-services/task-list/components/checklist.component.ts","ng://@alfresco/adf-process-services/task-list/validators/task-description.validator.ts","ng://@alfresco/adf-process-services/task-list/components/task-header.component.ts","ng://@alfresco/adf-process-services/task-list/components/task-details.component.ts","ng://@alfresco/adf-process-services/task-list/components/no-task-detail-template.directive.ts","ng://@alfresco/adf-process-services/task-list/services/task-filter.service.ts","ng://@alfresco/adf-process-services/task-list/components/task-filters.component.ts","ng://@alfresco/adf-process-services/task-list/components/task-audit.directive.ts","ng://@alfresco/adf-process-services/task-list/components/start-task.component.ts","ng://@alfresco/adf-process-services/task-list/components/task-standalone.component.ts","ng://@alfresco/adf-process-services/task-list/components/attach-form.component.ts","ng://@alfresco/adf-process-services/task-list/services/process-upload.service.ts","ng://@alfresco/adf-process-services/task-list/services/task-upload.service.ts","ng://@alfresco/adf-process-services/task-list/models/start-task.model.ts","ng://@alfresco/adf-process-services/task-list/models/task-details.event.ts","ng://@alfresco/adf-process-services/task-list/models/user-event.model.ts","ng://@alfresco/adf-process-services/task-list/models/user-group.model.ts","ng://@alfresco/adf-process-services/material.module.ts","ng://@alfresco/adf-process-services/process-comments/process-comments.component.ts","ng://@alfresco/adf-process-services/process-comments/process-comments.module.ts","ng://@alfresco/adf-process-services/people/components/people/people.component.ts","ng://@alfresco/adf-process-services/people/components/people-list/people-list.component.ts","ng://@alfresco/adf-process-services/people/components/people-search/people-search.component.ts","ng://@alfresco/adf-process-services/people/helpers/getDisplayUser.ts","ng://@alfresco/adf-process-services/people/components/people-search-field/people-search-field.component.ts","ng://@alfresco/adf-process-services/people/components/people-selector/people-selector.component.ts","ng://@alfresco/adf-process-services/people/directives/people-search-action-label.directive.ts","ng://@alfresco/adf-process-services/people/directives/people-search-title.directive.ts","ng://@alfresco/adf-process-services/people/people.module.ts","ng://@alfresco/adf-process-services/content-widget/attach-file-widget-dialog.component.ts","ng://@alfresco/adf-process-services/content-widget/attach-file-widget-dialog.service.ts","ng://@alfresco/adf-process-services/content-widget/attach-file-widget.component.ts","ng://@alfresco/adf-process-services/content-widget/attach-folder-widget.component.ts","ng://@alfresco/adf-process-services/content-widget/content-widget.module.ts","ng://@alfresco/adf-process-services/form/form.component.ts","ng://@alfresco/adf-process-services/form/start-form.component.ts","ng://@alfresco/adf-process-services/form/form.module.ts","ng://@alfresco/adf-process-services/task-list/task-list.module.ts","ng://@alfresco/adf-process-services/process-list/components/process-instance-tasks.component.ts","ng://@alfresco/adf-process-services/process-list/models/process-preset.model.ts","ng://@alfresco/adf-process-services/process-list/components/process-list.component.ts","ng://@alfresco/adf-process-services/process-list/components/start-process.component.ts","ng://@alfresco/adf-process-services/process-list/models/process-instance-filter.model.ts","ng://@alfresco/adf-process-services/process-list/process-list.module.ts","ng://@alfresco/adf-process-services/app-list/apps-list.component.ts","ng://@alfresco/adf-process-services/app-list/select-apps-dialog-component.ts","ng://@alfresco/adf-process-services/app-list/apps-list.module.ts","ng://@alfresco/adf-process-services/attachment/task-attachment-list.component.ts","ng://@alfresco/adf-process-services/attachment/process-attachment-list.component.ts","ng://@alfresco/adf-process-services/attachment/create-process-attachment.component.ts","ng://@alfresco/adf-process-services/attachment/create-task-attachment.component.ts","ng://@alfresco/adf-process-services/attachment/attachment.module.ts","ng://@alfresco/adf-process-services/process.module.ts"],"names":["FilterProcessRepresentationModel","obj","this","id","appId","name","recent","icon","filter","index","prototype","hasFilter","ProcessFilterParamRepresentationModel","processDefinitionId","appDefinitionId","processInstanceId","state","sort","page","size","ProcessFilterService","alfrescoApiService","getProcessFilters","_this","from","callApiProcessFilters","pipe","map","response","filters","data","forEach","filterModel","push","catchError","err","handleProcessError","getProcessFilterById","filterId","find","getProcessFilterByName","filterName","createDefaultFilters","runningFilter","getRunningFilterInstance","runningObservable","addProcessFilter","completedFilter","getCompletedFilterInstance","completedObservable","allFilter","getAllFilterInstance","allObservable","Observable","observer","forkJoin","subscribe","res","next","complete","getInstance","activiti","userFiltersApi","createUserProcessInstanceFilter","getUserProcessInstanceFilters","error","throwError","Injectable","args","providedIn","AlfrescoApiService","IconModel","initIconsMDL","mapGlyphiconToMaterialDesignIcons","iconsMDL","get","DEFAULT_TASKS_APP_MATERIAL_ICON","Map","set","ProcessFiltersComponent","processFilterService","appsProcessService","filterClick","EventEmitter","success","showIcon","filterSelected","ngOnInit","ngOnChanges","changes","appName","currentValue","getFiltersByAppId","getFiltersByAppName","previousValue","selectProcessFilter","length","isFilterListEmpty","resDefault","resetFilter","filterParam","emit","errDefault","getDeployedApplicationsByName","application","selectFilter","currentFilter","processFilter","toLowerCase","isCurrentFilterEmpty","selectDefaultTaskFilter","selectRunningFilter","getCurrentFilter","undefined","getFilterIcon","Component","selector","template","AppsProcessService","Input","Output","ProcessDefinitionRepresentation","description","key","category","version","deploymentId","tenantId","metaDataValues","hasStartForm","ProcessInstanceVariable","scope","value","valueUrl","ProcessInstance","businessKey","ended","graphicalNotationDefined","processDefinitionCategory","processDefinitionDeploymentId","processDefinitionDescription","processDefinitionKey","processDefinitionName","processDefinitionVersion","startFormDefined","started","startedBy","variables","ProcessListModel","total","start","ProcessService","getProcessInstances","requestNode","processApi","filtered","process","getProcesses","of","fetchProcessAuditPdfById","processId","getProcessAuditPdf","fetchProcessAuditJsonById","getProcessAuditJson","getProcess","getProcessInstance","getProcessTasks","taskOpts","taskApi","listTasks","extractData","tasks","task","created","moment","format","getProcessDefinitions","opts","latest","processDefs","pd","startProcess","outcome","startFormValues","startRequest","values","startNewProcessInstance","cancelProcess","deleteProcessInstance","getProcessInstanceVariables","processInstanceVariablesApi","processVars","currentProcessVar","createOrUpdateProcessInstanceVariables","deleteProcessInstanceVariable","variableName","ProcessInstanceDetailsComponent","activitiProcess","logService","showTitle","showRefreshButton","processCancelled","taskClick","showProcessDiagram","load","reset","processInstanceDetails","isRunning","onTaskClicked","event","getProcessNameOrDescription","dateFormat","getFormatDate","datePipe","DatePipe","transform","onShowProcessDiagram","LogService","ViewChild","ProcessAuditDirective","contentService","processListService","fileName","download","clicked","isValidType","setDefaultFormatType","isJsonFormat","isPdfFormat","fetchAuditInfo","blob","audit","downloadBlob","onClickAudit","Directive","host","role","(click)","ContentService","ProcessInstanceHeaderComponent","translationService","appConfig","dateLocale","refreshData","processInstance","defaultProperties","initDefaultProperties","filteredProperties_1","properties","cardItem","isValidSelection","CardViewTextItemModel","label","getProcessStatus","CardViewDateItemModel","locale","default","instant","getStartedByFullName","filteredProperties","indexOf","fullName","firstName","lastName","TranslationService","AppConfigService","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__values","o","m","Symbol","iterator","i","call","done","__read","n","r","e","ar","__spread","arguments","concat","AppDefinitionRepresentationModel","defaultAppId","theme","modelId","FilterParamsModel","FilterRepresentationModel","UserTaskFilterRepresentation","TaskQueryRequestRepresentationModel","tslib_1.__extends","TaskQueryRepresentation","taskPresetsDefaultModel","type","title","sortable","cssClass","Form","TaskDetailsModel","priority","assignee","UserProcessModel","adhocTaskCanBeReassigned","dueDate","duration","endDate","executionId","formKey","initiatorCanCompleteTask","managerOfCandidateGroup","memberOfCandidateGroup","memberOfCandidateUsers","involvedGroups","involvedPeople","parentTaskId","parentTaskName","processInstanceName","processInstanceStartUserId","taskDefinitionKey","getFullName","trim","isCompleted","TaskListModel","input","assign","item","TaskListService","apiService","getFilterForTaskById","taskId","filterList","flatMap","isTaskRelatedToFilter","generateTaskRequestNodeFromFilter","assignment","requestNodeForFilter","callApiTasksFiltered","element","handleError","getTasks","findTasksByState","findAllTaskByState","getTotalTasks","switchMap","findAllTasksWithoutState","activeTasks","completedTasks","getTaskDetails","callApiTaskDetails","details","getTaskChecklist","callApiTaskChecklist","checklists","checklist","getFormList","modelsApi","getModels","modelType","forms","form","attachFormToATask","formId","attachForm","addTask","callApiAddTask","deleteTask","callApiDeleteTask","deleteForm","callApiDeleteForm","completeTask","createNewTask","callApiCreateTask","assignTask","callApiAssignTask","assignTaskByUserId","userId","claimTask","unclaimTask","updateTask","updated","result","fetchTaskAuditPdfById","getTaskAuditPdf","fetchTaskAuditJsonById","getTaskAuditJson","getTask","addSubtask","removeForm","getChecklist","TaskListComponent","taskListService","appConfigService","userPreferences","_super","PRESET_KEY","selectionMode","multiselect","selectFirstRow","rowClick","rowsSelected","PaginationComponent","DEFAULT_PAGINATION","maxItems","rows","isLoading","sorting","hasCustomDataSource","select","UserPreferenceValues","PaginationSize","pageSize","pagination","BehaviorSubject","skipCount","totalItems","ngAfterContentInit","createDatatableSchema","getColumns","setColumns","columns","reload","setCustomDataSource","isPropertyChanged","isSortChanged","split","actualSort","changed","landingTaskId","isEqualToCurrentId","createRequestNode","loadTasksByState","optimizeTaskDetails","selectTask","count","taskIdSelected","isListEmpty","currentInstanceId","dataRow","currentRow","isSelected","getCurrentId","onRowClick","getValue","onRowSelect","selectedInstances","detail","selection","onRowUnselect","onRowKeyUp","keyboardEvent","preventDefault","row","instances","dueAfter","toDate","dueBefore","text","includeProcessInstance","updatePagination","params","needsReload","currentPage","Math","floor","UserPreferencesService","ContentChild","CustomEmptyContentTemplateDirective","CustomLoadingContentTemplateDirective","DataTableSchema","ChecklistComponent","activitiTaskList","dialog","readOnly","checklistTaskCreated","checklistTaskDeleted","taskDetailsModel","showDialog","open","addNewDialog","width","add","newTask","taskName","cancel","delete","check","closeAll","MatDialog","TaskDescriptionValidator","message","isValid","isWhitespace","TaskHeaderComponent","activitiTaskService","bpmUserService","formName","claim","unclaim","inEdit","loadCurrentBpmUserId","parentInfoMap","taskDetails","clickable","getTaskStatus","editable","CardViewMapItemModel","getTaskDuration","multiline","validators","getParentInfo","getCurrentUserInfo","currentUserId","hasAssignee","isAssignedTo","isAssignedToCurrentUser","isCandidateMember","isTaskClaimable","isTaskClaimedByCandidateMember","info","BpmUserService","TaskDetailsComponent","authService","peopleProcessService","cardViewUpdateService","debugMode","showNextTask","showHeader","showHeaderContent","showInvolvePeople","showComments","showChecklist","showFormTitle","showFormCompleteButton","showFormSaveButton","readOnlyForm","showFormRefreshButton","fieldValidators","formSaved","formCompleted","formContentClicked","formLoaded","taskCreated","taskDeleted","executeOutcome","claimedTask","unClaimedTask","taskFormName","taskPeople","showAssignee","showAttachForm","internalReadOnlyForm","peopleSearch","peopleSearchObserver","share","getBpmLoggedUser","user","currentLoggedUser","loadDetails","itemUpdated$","updateTaskDetails","bind","itemClicked$","clickTaskDetails","isStandaloneTask","isStandaloneTaskWithForm","hasFormKey","isStandaloneTaskWithoutForm","isFormComponentVisible","isShowAttachForm","isTaskStandaloneComponentVisible","isTaskActive","updateNotification","clickNotification","target","isNaN","getTime","isAssigned","hasEmailAddress","email","isAssignedToMe","isEmailEqual","isExternalIdEqual","externalId","assigneeMail","currentLoggedEmail","toLocaleLowerCase","assigneeExternalId","currentUserExternalId","isCompleteButtonEnabled","canInitiatorComplete","isCompleteButtonVisible","isSaveButtonVisible","hasSaveButton","loadNextTask","onComplete","onFormCompleted","onShowAttachForm","onCancelAttachForm","onCompleteAttachForm","onFormContentClick","content","onFormSaved","onFormLoaded","onChecklistTaskCreated","onChecklistTaskDeleted","onFormError","errorDialogRef","errorDialog","onFormExecuteOutcome","closeErrorDialog","onClaimAction","onUnclaimAction","isCompletedTask","searchUser","searchedWord","getWorkflowUsers","users","onCloseSearch","assignTaskToUser","selectedUser","getTaskHeaderViewClass","isReadOnlyComment","AuthenticationService","PeopleProcessService","CardViewUpdateService","NoTaskDetailsTemplateDirective","activitiTaskDetails","noTaskDetailsTemplateComponent","TemplateRef","TaskFilterService","involvedTasksFilter","getInvolvedTasksFilterInstance","involvedObservable","addFilter","myTasksFilter","getMyTasksFilterInstance","myTaskObservable","queuedTasksFilter","getQueuedTasksFilterInstance","queuedObservable","completedTasksFilter","getCompletedTasksFilterInstance","completeObservable","getTaskListFilters","callApiTaskFilters","getTaskFilterById","getTaskFilterByName","createUserTaskFilter","getUserTaskFilters","TaskFiltersComponent","taskFilterService","getFilters","createFiltersByAppId","newFilter","selectFilterAndEmit","selectFilterWithTask","filteredFilterList","TaskAuditDirective","MOMENT_DATE_FORMATS","StartTaskComponent","taskService","dateAdapter","userPreferencesService","formBuilder","FORMAT_DATE","MAX_LENGTH","dateError","maxTaskNameLength","loading","validateMaxTaskNameLength","field","FormFieldModel","FormModel","assigneeId","placeholder","Locale","setLocale","loadFormsTask","buildForm","taskForm","group","FormControl","Validators","required","maxLength","whitespaceValidator","valueChanges","taskFormValues","setTaskDetails","control","whitespace","toString","isFormValid","valid","saveTask","createRes","defaultIfEmpty","attachRes","getAssigneeId","parseInt","onCancel","forms$","isUserNameEmpty","isEmpty","getDisplayUser","delimiter","onDateChanged","newDateValue","momentDate","log","defineProperty","providers","provide","DateAdapter","useClass","MomentDateAdapter","MAT_DATE_FORMATS","useValue","ɵ0","encapsulation","ViewEncapsulation","None","FormBuilder","TaskStandaloneComponent","hasCompletePermission","hideCancelButton","onCancelButtonClick","onCompleteButtonClick","hasCompleteButton","hasCancelButton","hasAttachFormButton","AttachFormComponent","formService","cancelAttachForm","disableSubmit","attachFormControl","onFormAttached","selectedFormId","onRemoveButtonClick","onAttachFormButtonClick","getTaskForm","getFormDefinitionByName","formDef","FormService","ProcessUploadService","getUploadPromise","file","options","parentId","promise","contentApi","createRelatedContentOnProcessInstance","isRelatedContent","catch","UploadService","TaskUploadService","createRelatedContentOnTask","StartTaskModel","TaskDetailsEvent","_defaultPrevented","_value","UserEventModel","UserGroupModel","groups","status","modules","MatAutocompleteModule","MatButtonModule","MatCardModule","MatDialogModule","MatCheckboxModule","MatDatepickerModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatOptionModule","MatRadioModule","MatSelectModule","MatSlideToggleModule","MatTableModule","MatTabsModule","MatProgressSpinnerModule","MatNativeDateModule","MatRippleModule","MatTooltipModule","MatChipsModule","MatMenuModule","float","MaterialModule","NgModule","MAT_LABEL_GLOBAL_OPTIONS","ɵ0$1","imports","exports","ProcessCommentsComponent","commentProcessService","comments","beingAdded","comment$","commentObserver","comment","getProcessInstanceComments","resetComments","comment1","comment2","date1","Date","date2","addProcessInstanceComment","unshift","clear","isReadOnly","onError","CommentProcessService","ProcessCommentsModule","FormsModule","ReactiveFormsModule","CommonModule","CoreModule","forChild","declarations","PeopleComponent","people","showAssignment","peopleSearch$","ngAfterViewInit","involveUserAndCloseSearch","involveUserAndClose","involveUserWithoutCloseSearch","involveUser","involveUserWithTask","removeInvolvedUser","involvedUser","getInitialUserName","onAddAssignment","onClickAction","hasPeople","isEditMode","PeopleListComponent","actions","clickRow","clickAction","peopleDataTable","columnList","selectUser","hasActions","onShowRowActionsMenu","onExecuteRowAction","action","DataColumnListComponent","PeopleSearchComponent","searchPeople","closeSearch","filteredResults$","results","performSearch","performSearchCallback","closeSearchList","class","PeopleSearchFieldComponent","defaultPlaceholder","users$","debounceTime","searchWord","PeopleSelectorComponent","peopleIdChange","onSearchUserError","userSelected","updateUserSelection","userDeselected","searchFieldComponent","PeopleSearchActionLabelDirective","PeopleSearchTitleDirective","PeopleModule","AttachFileWidgetDialogComponent","externalApiService","init","ecmHost","context","buttonActionName","actionName","toUpperCase","isLoggedIn","performLogin","loginPanel","submitForm","close","selected","onSelect","nodeList","isFile","chosenNode","onClick","DocumentListService","SitesService","ContentNodeSelectorService","SearchService","ExternalAlfrescoApiService","Inject","MAT_DIALOG_DATA","AttachFileWidgetDialogService","openLogin","titleString","Subject","isSelectionValid","isNodeFile","openLoginDialog","currentPanelClass","chosenWidth","panelClass","entry","AttachFileWidgetComponent","logger","thumbnails","processContentService","activitiContentService","contentDialog","attachDialogService","repositoryList","tempFilesList","hasFile","getMultipleFileParam","getAlfrescoRepositories","repoList","taskSaved","isFileSourceConfigured","fileSource","isMultipleSourceUpload","isOnlyLocalSourceSelected","isAllFileSourceSelected","serviceId","isSimpleUploadButton","isUploadButtonVisible","multipleOption","isDefinedSourceFolder","selectedFolder","isTemporaryFile","findIndex","elem","openSelectDialogFromFileSource","openFileBrowseDialogByFolderId","pathId","selections","_a","apply","uploadFileFromCS","accountId","siteId","onAttachFileChanged","files","onFileChanged","onRemoveAttachFile","splice","contentBlob","removeFile","onAttachFileClicked","isExternal","fileClicked","downloadContent","getFileRawContent","openSelectDialog","repository","accountIdentifier","currentECMHost","getDomainHost","AppConfigValues","ECMHOST","repositoryUrl","formattedRepositoryHost","replace","node","openFileBrowseDialogBySite","fileNodeList","filesSaved","mergeMap","zip","mimeType","applyAlfrescoNode","_b","json","urlToCheck","match","(blur)","(change)","(focus)","(focusin)","(focusout)","(input)","(invalid)","(select)","ThumbnailService","ProcessContentService","ActivitiContentService","ContentNodeDialogService","UploadWidgetComponent","AttachFolderWidgetComponent","nodeService","hasFolder","selectedFolderName","getNode","folderSource","openFolderBrowseDialogByFolderId","openFolderBrowseDialogBySite","removeFolder","NodesApiService","WidgetComponent","ContentWidgetModule","ContentNodeSelectorModule","entryComponents","FormComponent","visibilityService","ecmModelService","formRenderingService","saveMetadata","formDataRefreshed","subscriptions","setComponentTypeResolver","validateForm","validateFormEvent","errorsField","formError","ngOnDestroy","subscription","unsubscribe","getFormByTaskId","getFormDefinitionByFormId","getFormDefinitionByFormName","nodeId","loadFormForEcmNode","refreshFormData","onRefreshClicked","loadForm","findProcessVariablesByTaskId","isAProcessTask","getTaskProcessVariable","taskRepresentation","Promise","resolve","reject","processVariables","parsedForm","parseForm","refreshVisibility","getFormDefinitionById","saveTaskForm","onTaskSaved","storeFormAsMetadata","onTaskSavedError","completeTaskForm","onTaskCompleted","onTaskCompletedError","formRepresentationJSON","fields","outcomes","getFormDefinitionOutcomes","FormOutcomeModel","SAVE_ACTION","isSystem","checkVisibility","onFormDataRefreshed","getNodeMetadata","metadata","loadFormFromActiviti","nodeType","searchFrom","loadFormFromFormId","createFormFromANode","formMetadata","createEcmTypeForActivitiForm","createNodeMetadata","prefixedName","EcmModelService","MODEL_NAMESPACE","path","nameNode","FormEvent","taskSavedError","FormErrorEvent","taskCompleted","taskCompletedError","onExecuteOutcome","FormOutcomeEvent","defaultPrevented","WidgetVisibilityService","NodeService","FormRenderingService","FormBaseComponent","StartFormComponent","showOutcomeButtons","outcomeClick","outcomesContainer","cleanProcessVariable","getStartFormDefinition","loadStartForm","instance","getStartFormInstance","isOutcomeButtonVisible","isFormReadOnly","COMPLETE_ACTION","START_PROCESS_ACTION","FormModule","TaskListModule","FlexLayoutModule","ProcessInstanceTasksComponent","task$","taskObserver","completedTask$","completedTaskObserver","loadActive","loadCompleted","hasStartFormDefined","getUserFullName","clickTask","$event","clickStartTask","showStartDialog","startDialog","height","closeStartDialog","processPresetsDefaultModel","ProcessInstanceListComponent","processService","paginationSize","optimizeProcessDetails","selectFirst","StartProcessInstanceComponent","showSelectProcessDropdown","processFilterSelector","processDefinitions","selectedProcessDef","errorMessageId","maxProcessNameLength","processNameInput","processDefinitionInput","loadStartProcess","filteredProcesses","_filter","moveNodeFromCStoPS","filterValue_1","filteredProcess","option","includes","getSelectedProcess","selectedProcess","processSelected","resetSelectedProcessDefinition","resetErrorMessage","processDefinitionRepresentations","isProcessDefinitionsEmpty","currentProcessDefinition","setValue","getAlfrescoRepositoryName","alfrescoRepositoryName","ALFRESCO_REPOSITORY_NAME","this_1","formValues","startForm","cancelStartProcess","isProcessDefinitionEmpty","isStartFormMissingOrValid","hasErrorMessage","onOutcomeClick","hasProcessName","displayFn","processName","displayDropdown","stopPropagation","inputAutocomplete","panelOpen","closePanel","openPanel","MatAutocompleteTrigger","ProcessFilterRequestRepresentation","ProcessListModule","AppsListComponent","layoutType","LAYOUT_GRID","appClick","appList","hasEmptyCustomContentTemplate","apps$","appsObserver","setDefaultLayoutType","app","emptyCustomContent","getDeployedApplications","filterApps","isDefaultApp","DEFAULT_TASKS_APP_THEME","DEFAULT_TASKS_APP_ICON","DEFAULT_TASKS_APP","getAppName","DEFAULT_TASKS_APP_NAME","selectApp","currentApp","apps","filteredApps","filtersAppId","LAYOUT_LIST","isList","isGrid","getTheme","getBackgroundIcon","SelectAppsDialogComponent","dialogRef","processApps","onStart","MatDialogRef","AppsListModule","TaskAttachmentListComponent","thumbnailService","ngZone","disabled","attachmentClick","hasCustomTemplate","attachments","loadAttachmentsByTaskId","emptyTemplate","hasCustomEmptyTemplate","run","createdBy","getMimeTypeIcon","getTaskRelatedContent","attachList","deleteAttachmentById","contentId","deleteRelatedContent","emitDocumentContent","openContent","isDisabled","NgZone","EmptyListComponent","ProcessAttachmentListComponent","loadAttachmentsByProcessInstanceId","getProcessRelatedContent","CreateProcessAttachmentComponent","onFileUpload","filesList","filesList_1","tslib_1.__values","filesList_1_1","createProcessRelatedContent","AttachmentComponent","createTaskRelatedContent","AttachmentModule","source","ProcessModule","forRoot","ngModule","TRANSLATION_PROVIDER","multi","ProcessModuleLazy","ɵ0$2"],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ProcessFilterRequestRepresentation,\n    ProcessInstanceFilterRepresentation,\n    UserProcessInstanceFilterRepresentation\n} from '@alfresco/js-api';\n\nexport class FilterProcessRepresentationModel implements UserProcessInstanceFilterRepresentation {\n    appId: number;\n    filter: ProcessInstanceFilterRepresentation;\n    icon: string;\n    id: number;\n    index: number;\n    name: string;\n    recent: boolean;\n\n    constructor(obj: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.appId = obj.appId || null;\n            this.name = obj.name || null;\n            this.recent = !!obj.recent;\n            this.icon = obj.icon || null;\n            this.filter = obj.filter || null;\n            this.index = obj.index;\n        }\n    }\n\n    hasFilter() {\n        return !!this.filter;\n    }\n}\n\n/**\n * This object represent the parameters of a process filter.\n */\nexport class ProcessFilterParamRepresentationModel implements ProcessFilterRequestRepresentation {\n\n    processDefinitionId?: string;\n    processInstanceId?: string;\n    appDefinitionId?: number;\n    state?: any;\n    sort?: any;\n    page?: number;\n    size?: number;\n\n    constructor(obj?: any) {\n        this.processDefinitionId = obj.processDefinitionId || null;\n        this.appDefinitionId = obj.appDefinitionId || null;\n        this.processInstanceId = obj.processInstanceId || null;\n        this.state = obj.state || null;\n        this.sort = obj.sort || null;\n        this.page = obj.page || null;\n        this.size = obj.size || null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, from, forkJoin, throwError } from 'rxjs';\nimport { FilterProcessRepresentationModel } from '../models/filter-process.model';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessFilterService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Gets all filters defined for a Process App.\n     * @param appId ID of the target app\n     * @returns Array of filter details\n     */\n    getProcessFilters(appId: number): Observable<FilterProcessRepresentationModel[]> {\n        return from(this.callApiProcessFilters(appId))\n            .pipe(\n                map((response: any) => {\n                    const filters: FilterProcessRepresentationModel[] = [];\n                    response.data.forEach((filter: FilterProcessRepresentationModel) => {\n                        const filterModel = new FilterProcessRepresentationModel(filter);\n                        filters.push(filterModel);\n                    });\n                    return filters;\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Retrieves the process filter by ID.\n     * @param filterId ID of the filter\n     * @param appId ID of the target app\n     * @returns Details of the filter\n     */\n    getProcessFilterById(filterId: number, appId?: number): Observable<FilterProcessRepresentationModel> {\n        return from(this.callApiProcessFilters(appId))\n            .pipe(\n                map((response: any) => {\n                    return response.data.find((filter) => filter.id === filterId);\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Retrieves the process filter by name.\n     * @param filterName Name of the filter\n     * @param appId ID of the target app\n     * @returns Details of the filter\n     */\n    getProcessFilterByName(filterName: string, appId?: number): Observable<FilterProcessRepresentationModel> {\n        return from(this.callApiProcessFilters(appId))\n            .pipe(\n                map((response: any) => {\n                    return response.data.find((filter) => filter.name === filterName);\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Creates and returns the default filters for an app.\n     * @param appId ID of the target app\n     * @returns Default filters just created\n     */\n    public createDefaultFilters(appId: number): Observable<FilterProcessRepresentationModel[]> {\n        const runningFilter = this.getRunningFilterInstance(appId);\n        const runningObservable = this.addProcessFilter(runningFilter);\n\n        const completedFilter = this.getCompletedFilterInstance(appId);\n        const completedObservable = this.addProcessFilter(completedFilter);\n\n        const allFilter = this.getAllFilterInstance(appId);\n        const allObservable = this.addProcessFilter(allFilter);\n\n        return new Observable((observer) => {\n            forkJoin(\n                runningObservable,\n                completedObservable,\n                allObservable\n            ).subscribe(\n                (res) => {\n                    const filters: FilterProcessRepresentationModel[] = [];\n                    res.forEach((filter) => {\n                        if (filter.name === runningFilter.name) {\n                            runningFilter.id = filter.id;\n                            filters.push(runningFilter);\n                        } else if (filter.name === completedFilter.name) {\n                            completedFilter.id = filter.id;\n                            filters.push(completedFilter);\n                        } else if (filter.name === allFilter.name) {\n                            allFilter.id = filter.id;\n                            filters.push(allFilter);\n                        }\n                    });\n                    observer.next(filters);\n                    observer.complete();\n                },\n                (err: any) => {\n                    this.handleProcessError(err);\n                });\n        });\n    }\n\n    /**\n     * Creates and returns a filter that matches \"running\" process instances.\n     * @param appId ID of the target app\n     * @returns Filter just created\n     */\n    public getRunningFilterInstance(appId: number): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'Running',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-random',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' }\n        });\n    }\n\n    /**\n     * Returns a static Completed filter instance.\n     * @param appId ID of the target app\n     * @returns Details of the filter\n     */\n    private getCompletedFilterInstance(appId: number): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'Completed',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-ok-sign',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' }\n        });\n    }\n\n    /**\n     * Returns a static All filter instance.\n     * @param appId ID of the target app\n     * @returns Details of the filter\n     */\n    private getAllFilterInstance(appId: number): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'All',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-th',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' }\n        });\n    }\n\n    /**\n     * Adds a filter.\n     * @param filter The filter to add\n     * @returns The filter just added\n     */\n    addProcessFilter(filter: FilterProcessRepresentationModel): Observable<FilterProcessRepresentationModel> {\n        return from(this.alfrescoApiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(filter))\n            .pipe(\n                map((response: FilterProcessRepresentationModel) => {\n                    return response;\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.\n     * @param appId ID of the target app\n     * @returns List of filter details\n     */\n    callApiProcessFilters(appId?: number) {\n        if (appId) {\n            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });\n        } else {\n            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters();\n        }\n    }\n\n    private handleProcessError(error: any) {\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* spellchecker: disable */\nexport class IconModel {\n    public static DEFAULT_TASKS_APP_MATERIAL_ICON: string = 'favorite_border';\n\n    private iconsMDL: Map<string, string>;\n\n    constructor() {\n        this.initIconsMDL();\n    }\n\n    mapGlyphiconToMaterialDesignIcons(icon: string) {\n        return this.iconsMDL.get(icon) ? this.iconsMDL.get(icon) : IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON;\n    }\n\n    /**\n     * Map all the bootstrap glyphicon icons with Material design material icon\n     */\n    initIconsMDL() {\n        this.iconsMDL = new Map<string, string>();\n\n        this.iconsMDL.set('glyphicon-asterisk', 'ac_unit');\n        this.iconsMDL.set('glyphicon-plus', 'add');\n        this.iconsMDL.set('glyphicon-euro', 'euro_symbol');\n        this.iconsMDL.set('glyphicon-cloud', 'cloud');\n        this.iconsMDL.set('glyphicon-envelope', 'mail');\n        this.iconsMDL.set('glyphicon-pencil', 'create');\n        this.iconsMDL.set('glyphicon-glass', 'local_bar');\n        this.iconsMDL.set('glyphicon-music', 'music_note');\n        this.iconsMDL.set('glyphicon-search', 'search');\n        this.iconsMDL.set('glyphicon-heart', 'favorite');\n        this.iconsMDL.set('glyphicon-heart-empty', 'favorite_border');\n        this.iconsMDL.set('glyphicon-star', 'star');\n        this.iconsMDL.set('glyphicon-star-empty', 'star_border');\n        this.iconsMDL.set('glyphicon-user', 'person');\n        this.iconsMDL.set('glyphicon-film', 'movie_creation');\n        this.iconsMDL.set('glyphicon-th-large', 'view_comfy');\n        this.iconsMDL.set('glyphicon-th', 'dashboard');\n        this.iconsMDL.set('glyphicon-th-list', 'list');\n        this.iconsMDL.set('glyphicon-ok', 'done');\n        this.iconsMDL.set('glyphicon-remove', 'cancel');\n        this.iconsMDL.set('glyphicon-zoom-in', 'zoom_in');\n        this.iconsMDL.set('glyphicon-zoom-out', 'zoom_out');\n        this.iconsMDL.set('glyphicon-off', 'highlight_off');\n        this.iconsMDL.set('glyphicon-signal', 'signal_cellular_4_bar');\n        this.iconsMDL.set('glyphicon-cog', 'settings');\n        this.iconsMDL.set('glyphicon-trash', 'delete');\n        this.iconsMDL.set('glyphicon-home', 'home');\n        this.iconsMDL.set('glyphicon-file', 'insert_drive_file');\n        this.iconsMDL.set('glyphicon-time', 'access_time');\n        this.iconsMDL.set('glyphicon-road', 'map');\n        this.iconsMDL.set('glyphicon-download-alt', 'file_download');\n        this.iconsMDL.set('glyphicon-download', 'file_download');\n        this.iconsMDL.set('glyphicon-upload', 'file_upload');\n        this.iconsMDL.set('glyphicon-inbox', 'inbox');\n        this.iconsMDL.set('glyphicon-play-circle', 'play_circle_outline');\n        this.iconsMDL.set('glyphicon-repeat', 'refresh');\n        this.iconsMDL.set('glyphicon-refresh', 'sync');\n        this.iconsMDL.set('glyphicon-list-alt', 'event_note');\n        this.iconsMDL.set('glyphicon-lock', 'lock_outline');\n        this.iconsMDL.set('glyphicon-flag', 'assistant_photo');\n        this.iconsMDL.set('glyphicon-headphones', 'headset');\n        this.iconsMDL.set('glyphicon-volume-up', 'volume_up');\n        this.iconsMDL.set('glyphicon-tag', 'local_offer');\n        this.iconsMDL.set('glyphicon-tags', 'local_offer');\n        this.iconsMDL.set('glyphicon-book', 'library_books');\n        this.iconsMDL.set('glyphicon-bookmark', 'collections_bookmark');\n        this.iconsMDL.set('glyphicon-print', 'local_printshop');\n        this.iconsMDL.set('glyphicon-camera', 'local_see');\n        this.iconsMDL.set('glyphicon-list', 'view_list');\n        this.iconsMDL.set('glyphicon-facetime-video', 'video_call');\n        this.iconsMDL.set('glyphicon-picture', 'photo');\n        this.iconsMDL.set('glyphicon-map-marker', 'add_location');\n        this.iconsMDL.set('glyphicon-adjust', 'brightness_4');\n        this.iconsMDL.set('glyphicon-tint', 'invert_colors');\n        this.iconsMDL.set('glyphicon-edit', 'edit');\n        this.iconsMDL.set('glyphicon-share', 'share');\n        this.iconsMDL.set('glyphicon-check', 'assignment_turned_in');\n        this.iconsMDL.set('glyphicon-move', 'open_with');\n        this.iconsMDL.set('glyphicon-play', 'play_arrow');\n        this.iconsMDL.set('glyphicon-eject', 'eject');\n        this.iconsMDL.set('glyphicon-plus-sign', 'add_circle');\n        this.iconsMDL.set('glyphicon-minus-sign', 'remove_circle');\n        this.iconsMDL.set('glyphicon-remove-sign', 'cancel');\n        this.iconsMDL.set('glyphicon-ok-sign', 'check_circle');\n        this.iconsMDL.set('glyphicon-question-sign', 'help');\n        this.iconsMDL.set('glyphicon-info-sign', 'info');\n        this.iconsMDL.set('glyphicon-screenshot', 'flare');\n        this.iconsMDL.set('glyphicon-remove-circle', 'cancel');\n        this.iconsMDL.set('glyphicon-ok-circle', 'add_circle');\n        this.iconsMDL.set('glyphicon-ban-circle', 'block');\n        this.iconsMDL.set('glyphicon-share-alt', 'redo');\n        this.iconsMDL.set('glyphicon-exclamation-sign', 'error');\n        this.iconsMDL.set('glyphicon-gift', 'giftcard');\n        this.iconsMDL.set('glyphicon-leaf', 'spa');\n        this.iconsMDL.set('glyphicon-fire', 'whatshot');\n        this.iconsMDL.set('glyphicon-eye-open', 'remove_red_eye');\n        this.iconsMDL.set('glyphicon-eye-close', 'remove_red_eye');\n        this.iconsMDL.set('glyphicon-warning-sign', 'warning');\n        this.iconsMDL.set('glyphicon-plane', 'airplanemode_active');\n        this.iconsMDL.set('glyphicon-calendar', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-random', 'shuffle');\n        this.iconsMDL.set('glyphicon-comment', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-magnet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-retweet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-shopping-cart', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-folder-close', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-folder-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-hdd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-bullhorn', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-bell', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-certificate', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-thumbs-up', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-thumbs-down', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-hand-left', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-globe', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-wrench', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tasks', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-filter', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-briefcase', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-dashboard', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-paperclip', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-link', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-phone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-pushpin', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-usd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-gbp', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-sort', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-flash', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-record', 'radio_button_checked');\n        this.iconsMDL.set('glyphicon-save', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-saved', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-send', 'send');\n        this.iconsMDL.set('glyphicon-floppy-disk', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-credit-card', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cutlery', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-earphone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-phone-alt', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tower', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-stats', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cloud-download', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cloud-upload', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tree-conifer', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tree-deciduous', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-align-left', 'format_align_left');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppsProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { ProcessInstanceFilterRepresentation, UserProcessInstanceFilterRepresentation } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\nimport { FilterProcessRepresentationModel } from '../models/filter-process.model';\nimport { ProcessFilterService } from './../services/process-filter.service';\nimport { IconModel } from '../../app-list/icon.model';\n\n@Component({\n    selector: 'adf-process-instance-filters',\n    templateUrl: './process-filters.component.html',\n    styleUrls: ['process-filters.component.scss']\n})\nexport class ProcessFiltersComponent implements OnInit, OnChanges {\n\n    /** The parameters to filter the task filter. If there is no match then the default one\n     * (ie, the first filter in the list) is selected.\n     */\n    @Input()\n    filterParam: FilterProcessRepresentationModel;\n\n    /** Emitted when the user selects a filter from the list. */\n    @Output()\n    filterClick: EventEmitter<UserProcessInstanceFilterRepresentation> = new EventEmitter<UserProcessInstanceFilterRepresentation>();\n\n    /** Emitted when the list of filters has been successfully loaded from the server. */\n    @Output()\n    success: EventEmitter<ProcessInstanceFilterRepresentation[]> = new EventEmitter<ProcessInstanceFilterRepresentation[]>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Display filters available to the current user for the application with the specified ID. */\n    @Input()\n    appId: number;\n\n    /** Display filters available to the current user for the application with the specified name. */\n    @Input()\n    appName: string;\n\n    /** Toggle to show or hide the filter's icon. */\n    @Input()\n    showIcon: boolean = true;\n\n    /** Emitted when a process filter is selected. */\n    @Output()\n    filterSelected: EventEmitter<ProcessInstanceFilterRepresentation> = new EventEmitter<ProcessInstanceFilterRepresentation>();\n\n    filter$: Observable<ProcessInstanceFilterRepresentation>;\n\n    currentFilter: ProcessInstanceFilterRepresentation;\n\n    filters: UserProcessInstanceFilterRepresentation [] = [];\n\n    private iconsMDL: IconModel;\n\n    constructor(private processFilterService: ProcessFilterService,\n                private appsProcessService: AppsProcessService) {\n    }\n\n    ngOnInit() {\n        this.iconsMDL = new IconModel();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appId = changes['appId'];\n        const appName = changes['appName'];\n        const filter = changes['filterParam'];\n\n        if (appId && (appId.currentValue || appId.currentValue === null)) {\n            this.getFiltersByAppId(appId.currentValue);\n        } else if (appName && appName.currentValue) {\n            this.getFiltersByAppName(appName.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectProcessFilter(filter.currentValue);\n        }\n    }\n\n    /**\n     * Return the filter list filtered by appId\n     * @param appId - optional\n     */\n    getFiltersByAppId(appId?: number) {\n        this.processFilterService.getProcessFilters(appId).subscribe(\n            (res: ProcessInstanceFilterRepresentation[]) => {\n                if (res.length === 0 && this.isFilterListEmpty()) {\n                    this.processFilterService.createDefaultFilters(appId).subscribe(\n                        (resDefault: ProcessInstanceFilterRepresentation[]) => {\n                            this.resetFilter();\n                            this.filters = resDefault;\n                            this.selectProcessFilter(this.filterParam);\n                            this.success.emit(resDefault);\n                        },\n                        (errDefault: any) => {\n                            this.error.emit(errDefault);\n                        }\n                    );\n                } else {\n                    this.resetFilter();\n                    this.filters = res;\n                    this.selectProcessFilter(this.filterParam);\n                    this.success.emit(res);\n                }\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     * @param appName\n     */\n    getFiltersByAppName(appName: string) {\n        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(\n            (application) => {\n                this.getFiltersByAppId(application.id);\n                this.selectProcessFilter(this.filterParam);\n            },\n            (err) => {\n                this.error.emit(err);\n            });\n    }\n\n    /**\n     * Pass the selected filter as next\n     * @param filter\n     */\n    public selectFilter(filter: ProcessInstanceFilterRepresentation) {\n        this.currentFilter = filter;\n        this.filterClick.emit(filter);\n    }\n\n    /**\n     * Select the first filter of a list if present\n     */\n    public selectProcessFilter(filterParam: FilterProcessRepresentationModel) {\n        if (filterParam) {\n            this.filters.filter((processFilter: UserProcessInstanceFilterRepresentation, index) => {\n                if (filterParam.name && filterParam.name.toLowerCase() === processFilter.name.toLowerCase() ||\n                    filterParam.id === processFilter.id ||\n                    filterParam.index === index) {\n                    this.currentFilter = processFilter;\n                    this.filterSelected.emit(processFilter);\n                }\n            });\n        }\n        if (this.isCurrentFilterEmpty()) {\n            this.selectDefaultTaskFilter();\n        }\n    }\n\n    /**\n     * Select the Running filter\n     */\n    public selectRunningFilter() {\n        this.selectProcessFilter(this.processFilterService.getRunningFilterInstance(null));\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     */\n    public selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n            this.filterSelected.emit(this.filters[0]);\n        }\n    }\n\n    /**\n     * Return the current task\n     */\n    getCurrentFilter(): ProcessInstanceFilterRepresentation {\n        return this.currentFilter;\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n\n    private isCurrentFilterEmpty(): boolean {\n        return this.currentFilter === undefined || null;\n    }\n\n    /**\n     * Return current filter icon\n     */\n    getFilterIcon(icon): string {\n        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessDefinitionRepresentation {\n    id: string;\n    name: string;\n    description: string;\n    key: string;\n    category: string;\n    version: number;\n    deploymentId: string;\n    tenantId: string;\n    metaDataValues: any[];\n    hasStartForm: boolean;\n\n    constructor(obj?: any) {\n        this.id = obj && obj.id || null;\n        this.name = obj && obj.name || null;\n        this.description = obj && obj.description || null;\n        this.key = obj && obj.key || null;\n        this.category = obj && obj.category || null;\n        this.version = obj && obj.version || 0;\n        this.deploymentId = obj && obj.deploymentId || null;\n        this.tenantId = obj && obj.tenantId || null;\n        this.metaDataValues = obj && obj.metaDataValues || [];\n        this.hasStartForm = obj && obj.hasStartForm === true ? true : false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RestVariable } from '@alfresco/js-api';\n\nexport class ProcessInstanceVariable implements RestVariable {\n\n    name?: string;\n    scope?: string;\n    type?: string;\n    value?: string;\n    valueUrl?: string;\n\n    constructor(obj?: any) {\n        this.name = obj && obj.name !== undefined ? obj.name : null;\n        this.scope = obj && obj.scope !== undefined ? obj.scope : null;\n        this.value = obj && obj.value !== undefined ? obj.value : null;\n        this.valueUrl = obj && obj.valueUrl !== undefined ? obj.valueUrl : null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LightUserRepresentation, ProcessInstanceRepresentation, RestVariable } from '@alfresco/js-api';\n\nexport class ProcessInstance implements ProcessInstanceRepresentation {\n\n    businessKey?: string;\n    ended?: Date;\n    graphicalNotationDefined?: boolean;\n    id?: string;\n    name?: string;\n    processDefinitionCategory?: string;\n    processDefinitionDeploymentId?: string;\n    processDefinitionDescription?: string;\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionName?: string;\n    processDefinitionVersion?: number;\n    startFormDefined?: boolean;\n    started?: Date;\n    startedBy?: LightUserRepresentation;\n    tenantId?: string;\n    variables?: RestVariable[];\n\n    constructor(data?: any) {\n        this.businessKey = data && data.businessKey !== undefined ? data.businessKey : null;\n        this.ended = data && data.ended !== undefined ? data.ended : null;\n        this.graphicalNotationDefined = data && data.graphicalNotationDefined !== undefined ? data.graphicalNotationDefined : null;\n        this.id = data && data.id !== undefined ? data.id : null;\n        this.name = data && data.name !== undefined ? data.name : null;\n        this.processDefinitionCategory = data && data.processDefinitionCategory !== undefined ? data.processDefinitionCategory : null;\n        this.processDefinitionDeploymentId = data && data.processDefinitionDeploymentId !== undefined ? data.processDefinitionDeploymentId : null;\n        this.processDefinitionDescription = data && data.processDefinitionDescription !== undefined ? data.processDefinitionDescription : null;\n        this.processDefinitionId = data && data.processDefinitionId !== undefined ? data.processDefinitionId : null;\n        this.processDefinitionKey = data && data.processDefinitionKey !== undefined ? data.processDefinitionKey : null;\n        this.processDefinitionName = data && data.processDefinitionName !== undefined ? data.processDefinitionName : null;\n        this.processDefinitionVersion = data && data.processDefinitionVersion !== undefined ? data.processDefinitionVersion : null;\n        this.startFormDefined = data && data.startFormDefined !== undefined ? data.startFormDefined : null;\n        this.started = data && data.started !== undefined ? data.started : null;\n        this.startedBy = data && data.startedBy !== undefined ? data.startedBy : null;\n        this.tenantId = data && data.tenantId !== undefined ? data.tenantId : null;\n        this.variables = data && data.variables !== undefined ? data.variables : null;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProcessInstance } from './process-instance.model';\n\nexport class ProcessListModel {\n    size: number;\n    total: number;\n    start: number;\n    length: number;\n    data: ProcessInstance [];\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.size = obj.size || null;\n            this.total = obj.total || null;\n            this.start = obj.start || null;\n            this.length = obj.length || null;\n            this.data = obj.data || [];\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, FormValues } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { RestVariable } from '@alfresco/js-api';\nimport { Observable, from, throwError, of } from 'rxjs';\nimport { TaskDetailsModel } from '../../task-list';\nimport { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';\nimport { ProcessDefinitionRepresentation } from '../models/process-definition.model';\nimport { ProcessInstanceVariable } from '../models/process-instance-variable.model';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessListModel } from '../models/process-list.model';\nimport { map, catchError } from 'rxjs/operators';\n\ndeclare let moment: any;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Gets process instances for a filter and optionally a process definition.\n     * @param requestNode Filter for instances\n     * @param processDefinitionKey Limits returned instances to a process definition\n     * @returns List of process instances\n     */\n    getProcessInstances(requestNode: ProcessFilterParamRepresentationModel, processDefinitionKey?: string): Observable<ProcessListModel> {\n        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstances(requestNode))\n            .pipe(\n                map((res: any) => {\n                    if (processDefinitionKey) {\n                        const filtered = res.data.filter((process) => process.processDefinitionKey === processDefinitionKey);\n                        res.data = filtered;\n                        return res;\n                    } else {\n                        return res;\n                    }\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets processes for a filter and optionally a process definition.\n     * @param requestNode Filter for instances\n     * @param processDefinitionKey Limits returned instances to a process definition\n     * @returns List of processes\n     */\n    getProcesses(requestNode: ProcessFilterParamRepresentationModel, processDefinitionKey?: string): Observable<ProcessListModel> {\n        return this.getProcessInstances(requestNode, processDefinitionKey)\n            .pipe(catchError(() => {\n                return of(new ProcessListModel({}));\n            }));\n    }\n\n    /**\n     * Fetches the Process Audit information as a PDF.\n     * @param processId ID of the target process\n     * @returns Binary PDF data\n     */\n    fetchProcessAuditPdfById(processId: string): Observable<Blob> {\n        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditPdf(processId))\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Fetches the Process Audit information in a JSON format.\n     * @param processId ID of the target process\n     * @returns JSON data\n     */\n    fetchProcessAuditJsonById(processId: string): Observable<any> {\n        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditJson(processId))\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets Process Instance metadata.\n     * @param processInstanceId ID of the target process\n     * @returns Metadata for the instance\n     */\n    getProcess(processInstanceId: string): Observable<ProcessInstance> {\n        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstance(processInstanceId))\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets task instances for a process instance.\n     * @param processInstanceId ID of the process instance\n     * @param state Task state filter (can be \"active\" or \"completed\")\n     * @returns Array of task instance details\n     */\n    getProcessTasks(processInstanceId: string, state?: string): Observable<TaskDetailsModel[]> {\n        const taskOpts = state ? {\n            processInstanceId: processInstanceId,\n            state: state\n        } : {\n                processInstanceId: processInstanceId\n            };\n        return from(this.alfrescoApiService.getInstance().activiti.taskApi.listTasks(taskOpts))\n            .pipe(\n                map(this.extractData),\n                map((tasks) => tasks.map((task: any) => {\n                    task.created = moment(task.created, 'YYYY-MM-DD').format();\n                    return task;\n                })),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets process definitions associated with an app.\n     * @param appId ID of a target app\n     * @returns Array of process definitions\n     */\n    getProcessDefinitions(appId?: number): Observable<ProcessDefinitionRepresentation[]> {\n        const opts = appId ? {\n            latest: true,\n            appDefinitionId: appId\n        } : {\n                latest: true\n            };\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processApi.getProcessDefinitions(opts)\n        )\n            .pipe(\n                map(this.extractData),\n                map((processDefs) => processDefs.map((pd) => new ProcessDefinitionRepresentation(pd))),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Starts a process based on a process definition, name, form values or variables.\n     * @param processDefinitionId Process definition ID\n     * @param name Process name\n     * @param outcome Process outcome\n     * @param startFormValues Values for the start form\n     * @param variables Array of process instance variables\n     * @returns Details of the process instance just started\n     */\n    startProcess(processDefinitionId: string, name: string, outcome?: string, startFormValues?: FormValues, variables?: ProcessInstanceVariable[]): Observable<ProcessInstance> {\n        const startRequest: any = {\n            name: name,\n            processDefinitionId: processDefinitionId\n        };\n        if (outcome) {\n            startRequest.outcome = outcome;\n        }\n        if (startFormValues) {\n            startRequest.values = startFormValues;\n        }\n        if (variables) {\n            startRequest.variables = variables;\n        }\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest)\n        )\n            .pipe(\n                map((pd) => new ProcessInstance(pd)),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Cancels a process instance.\n     * @param processInstanceId ID of process to cancel\n     * @returns Null response notifying when the operation is complete\n     */\n    cancelProcess(processInstanceId: string): Observable<void> {\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId)\n        )\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets the variables for a process instance.\n     * @param processInstanceId ID of the target process\n     * @returns Array of instance variable info\n     */\n    getProcessInstanceVariables(processInstanceId: string): Observable<ProcessInstanceVariable[]> {\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId)\n        )\n            .pipe(\n                map((processVars: any[]) => processVars.map((currentProcessVar) => new ProcessInstanceVariable(currentProcessVar))),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Creates or updates variables for a process instance.\n     * @param processInstanceId ID of the target process\n     * @param variables Variables to update\n     * @returns Array of instance variable info\n     */\n    createOrUpdateProcessInstanceVariables(processInstanceId: string, variables: RestVariable[]): Observable<ProcessInstanceVariable[]> {\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processInstanceId, variables)\n        ).pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Deletes a variable for a process instance.\n     * @param processInstanceId ID of the target process\n     * @param variableName Name of the variable to delete\n     * @returns Null response notifying when the operation is complete\n     */\n    deleteProcessInstanceVariable(processInstanceId: string, variableName: string): Observable<void> {\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processInstanceId, variableName)\n        )\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    private extractData(res: any) {\n        return res.data || {};\n    }\n\n    private handleProcessError(error: any) {\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogService } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { TaskDetailsEvent } from '../../task-list';\n\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nimport { ProcessInstanceHeaderComponent } from './process-instance-header.component';\nimport { ProcessInstanceTasksComponent } from './process-instance-tasks.component';\n\n@Component({\n    selector: 'adf-process-instance-details',\n    templateUrl: './process-instance-details.component.html',\n    styleUrls: ['./process-instance-details.component.css']\n})\nexport class ProcessInstanceDetailsComponent implements OnChanges {\n\n    /** (required) The numeric ID of the process instance to display. */\n    @Input()\n    processInstanceId: string;\n\n    @ViewChild('processInstanceHeader')\n    processInstanceHeader: ProcessInstanceHeaderComponent;\n\n    @ViewChild('processInstanceTasks')\n    tasksList: ProcessInstanceTasksComponent;\n\n    /** Toggles whether to show or hide the title. */\n    @Input()\n    showTitle: boolean = true;\n\n    /** Toggles whether to show or hide the refresh button. */\n    @Input()\n    showRefreshButton: boolean = true;\n\n    /** Emitted when the current process is cancelled by the user from within the component. */\n    @Output()\n    processCancelled: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when a task is clicked. */\n    @Output()\n    taskClick: EventEmitter<TaskDetailsEvent> = new EventEmitter<TaskDetailsEvent>();\n\n    processInstanceDetails: ProcessInstance;\n\n    /** Emitted when the \"show diagram\" button is clicked. */\n    @Output()\n    showProcessDiagram: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * Constructor\n     * @param translate Translation service\n     * @param activitiProcess   Process service\n     */\n    constructor(private activitiProcess: ProcessService,\n                private logService: LogService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const processInstanceId = changes['processInstanceId'];\n        if (processInstanceId && !processInstanceId.currentValue) {\n            this.reset();\n            return;\n        }\n        if (processInstanceId && processInstanceId.currentValue) {\n            this.load(processInstanceId.currentValue);\n            return;\n        }\n    }\n\n    /**\n     * Reset the task detail\n     */\n    reset() {\n        this.processInstanceDetails = null;\n    }\n\n    load(processId: string) {\n        if (processId) {\n            this.activitiProcess.getProcess(processId).subscribe(\n                (res: ProcessInstance) => {\n                    this.processInstanceDetails = res;\n                }\n            );\n        }\n    }\n\n    isRunning(): boolean {\n        return this.processInstanceDetails && !this.processInstanceDetails.ended;\n    }\n\n    cancelProcess() {\n        this.activitiProcess.cancelProcess(this.processInstanceId).subscribe(\n            (data) => {\n                this.processCancelled.emit(data);\n            }, (err) => {\n                this.error.emit(err);\n            });\n    }\n\n    // bubbles (taskClick) event\n    onTaskClicked(event: TaskDetailsEvent) {\n        this.taskClick.emit(event);\n    }\n\n    getProcessNameOrDescription(dateFormat): string {\n        let name = '';\n        if (this.processInstanceDetails) {\n            name = this.processInstanceDetails.name ||\n                this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);\n        }\n        return name;\n    }\n\n    getFormatDate(value, format: string) {\n        const datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch (err) {\n            this.logService.error(`ProcessListInstanceHeader: error parsing date ${value} to format ${format}`);\n        }\n    }\n\n    onShowProcessDiagram(processInstanceId: any) {\n        this.showProcessDiagram.emit({value: this.processInstanceId});\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { ContentService } from '@alfresco/adf-core';\nimport { Directive, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessService } from './../services/process.service';\n\nconst JSON_FORMAT: string = 'json';\nconst PDF_FORMAT: string = 'pdf';\n\n@Directive({\n    selector: 'button[adf-process-audit]',\n    host: {\n        'role': 'button',\n        '(click)': 'onClickAudit()'\n    }\n})\nexport class ProcessAuditDirective implements OnChanges {\n\n    /** ID of the process. */\n    @Input('process-id')\n    processId: string;\n\n    /** Name of the file to download (for PDF downloads). */\n    @Input()\n    fileName: string = 'Audit';\n\n    /** Format for the audit information (can be \"pdf\" or \"json\"). */\n    @Input()\n    format: string = 'pdf';\n\n    /** Enables downloading of the audit file on clicking. */\n    @Input()\n    download: boolean = true;\n\n    /** Emitted when the decorated element is clicked. */\n    @Output()\n    clicked: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    public audit: any;\n\n    /**\n     *\n     * @param translateService\n     * @param processListService\n     */\n    constructor(private contentService: ContentService,\n                private processListService: ProcessService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isValidType()) {\n            this.setDefaultFormatType();\n        }\n    }\n\n    isValidType() {\n        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {\n            return true;\n        }\n        return false;\n    }\n\n    setDefaultFormatType(): void {\n        this.format = PDF_FORMAT;\n    }\n\n    /**\n     * fetch the audit information in the requested format\n     */\n    fetchAuditInfo(): void {\n        if (this.isPdfFormat()) {\n            this.processListService.fetchProcessAuditPdfById(this.processId).subscribe(\n                (blob: Blob) => {\n                    this.audit = blob;\n                    if (this.download) {\n                        this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');\n                    }\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.processListService.fetchProcessAuditJsonById(this.processId).subscribe(\n                (res) => {\n                    this.audit = res;\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    onClickAudit() {\n        this.fetchAuditInfo();\n    }\n\n    isJsonFormat() {\n        return this.format === JSON_FORMAT;\n    }\n\n    isPdfFormat() {\n        return this.format === PDF_FORMAT;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfigService, CardViewDateItemModel, CardViewItem, CardViewBaseItemModel, CardViewTextItemModel, TranslationService } from '@alfresco/adf-core';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ProcessInstance } from '../models/process-instance.model';\n\n@Component({\n    selector: 'adf-process-instance-header',\n    templateUrl: './process-instance-header.component.html',\n    styleUrls: ['./process-instance-header.component.css']\n})\nexport class ProcessInstanceHeaderComponent implements OnChanges {\n\n    /** (**required**) Full details of the process instance to display information about. */\n    @Input()\n    processInstance: ProcessInstance;\n\n    properties: CardViewItem [];\n    dateFormat: string;\n    dateLocale: string;\n\n    constructor(private translationService: TranslationService,\n                private appConfig: AppConfigService) {\n        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');\n        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.refreshData();\n    }\n\n    refreshData(): void {\n        if (this.processInstance) {\n            const defaultProperties = this.initDefaultProperties();\n            const filteredProperties: string[] = this.appConfig.get('adf-process-instance-header.presets.properties');\n            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));\n        }\n    }\n\n    private initDefaultProperties(): any[] {\n        return [\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.STATUS',\n                    value: this.getProcessStatus(),\n                    key: 'status'\n                }),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.END_DATE',\n                    value: this.processInstance.ended,\n                    format: this.dateFormat,\n                    locale: this.dateLocale,\n                    key: 'ended',\n                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.END_DATE_DEFAULT')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.CATEGORY',\n                    value: this.processInstance.processDefinitionCategory,\n                    key: 'category',\n                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CATEGORY_DEFAULT')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY',\n                    value: this.processInstance.businessKey,\n                    key: 'businessKey',\n                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY_DEFAULT')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED_BY',\n                    value: this.getStartedByFullName(),\n                    key: 'assignee',\n                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CREATED_BY_DEFAULT')\n                }),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED',\n                    value: this.processInstance.started,\n                    format: this.dateFormat,\n                    locale: this.dateLocale,\n                    key: 'created'\n                }),\n            new CardViewTextItemModel(\n                {label: 'ADF_PROCESS_LIST.PROPERTIES.ID',\n                value: this.processInstance.id,\n                key: 'id'\n            }),\n            new CardViewTextItemModel(\n                {label: 'ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION',\n                value: this.processInstance.processDefinitionDescription,\n                key: 'description',\n                default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION_DEFAULT')\n            })\n        ];\n    }\n\n    private isValidSelection(filteredProperties: string[], cardItem: CardViewBaseItemModel): boolean {\n        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;\n    }\n\n    getProcessStatus(): string {\n        if (this.processInstance) {\n            return this.isRunning() ? 'Running' : 'Completed';\n        }\n    }\n\n    getStartedByFullName(): string {\n        let fullName = '';\n        if (this.processInstance && this.processInstance.startedBy) {\n            fullName += this.processInstance.startedBy.firstName || '';\n            fullName += fullName ? ' ' : '';\n            fullName += this.processInstance.startedBy.lastName || '';\n        }\n        return fullName;\n    }\n\n    isRunning(): boolean {\n        return this.processInstance && !this.processInstance.ended;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskFilterRepresentation, UserTaskFilterRepresentation, TaskQueryRepresentation } from '@alfresco/js-api';\n\nexport class AppDefinitionRepresentationModel {\n    defaultAppId: string;\n    deploymentId: string;\n    name: string;\n    description: string;\n    theme: string;\n    icon: string;\n    id: number;\n    modelId: number;\n    tenantId: number;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.defaultAppId = obj.defaultAppId ? obj.defaultAppId : null;\n            this.deploymentId = obj.deploymentId ? obj.deploymentId : null;\n            this.name = obj.name ? obj.name : null;\n            this.description = obj.description ? obj.description : null;\n            this.theme = obj.theme ? obj.theme : null;\n            this.icon = obj.icon ? obj.icon : null;\n            this.id = obj.id ? obj.id : null;\n            this.modelId = obj.modelId ? obj.modelId : null;\n            this.tenantId = obj.tenantId ? obj.tenantId : null;\n        }\n    }\n}\n\nexport class FilterParamsModel {\n    id: number;\n    name: string;\n    index: number;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.name = obj.name || null;\n            this.index = obj.index;\n        }\n    }\n}\n\nexport class FilterRepresentationModel implements UserTaskFilterRepresentation {\n    id: number;\n    appId: number;\n    name: string;\n    recent: boolean;\n    icon: string;\n    filter: TaskFilterRepresentation;\n    index: number;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.appId = obj.appId || null;\n            this.name = obj.name || null;\n            this.recent = !!obj.recent;\n            this.icon = obj.icon || null;\n            this.filter = new UserTaskFilterRepresentation(obj.filter);\n            this.index = obj.index;\n        }\n    }\n\n    hasFilter() {\n        return this.filter ? true : false;\n    }\n}\n\nexport class TaskQueryRequestRepresentationModel extends TaskQueryRepresentation {\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let taskPresetsDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_TASK_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'created',\n            'type': 'text',\n            'title': 'ADF_TASK_LIST.PROPERTIES.CREATED',\n            'cssClass': 'hidden',\n            'sortable': true\n        },\n        {\n            'key': 'assignee',\n            'type': 'text',\n            'title': 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent of the Form.\n */\nexport class Form {\n\n    id: number;\n    name: string;\n\n    constructor(id: number, name: string) {\n        this.name = name;\n        this.id = id;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent the details of a task.\n */\nimport { UserProcessModel } from '@alfresco/adf-core';\nimport { TaskRepresentation } from '@alfresco/js-api';\nimport { UserGroupModel } from './user-group.model';\n\nexport class TaskDetailsModel implements TaskRepresentation {\n    id?: string;\n    name?: string;\n    assignee?: UserProcessModel;\n    priority?: number;\n    adhocTaskCanBeReassigned?: boolean;\n    category?: string;\n    created?: Date;\n    description?: string;\n    parentName?: string;\n    dueDate?: Date;\n    duration?: number;\n    endDate?: Date;\n    executionId?: string;\n    formKey?: string;\n    initiatorCanCompleteTask?: boolean;\n    managerOfCandidateGroup?: boolean;\n    memberOfCandidateGroup?: boolean;\n    memberOfCandidateUsers?: boolean;\n    involvedGroups?: UserGroupModel [];\n    involvedPeople?: UserProcessModel [];\n    parentTaskId?: string;\n    parentTaskName?: string;\n    processDefinitionCategory?: string;\n    processDefinitionDeploymentId?: string;\n    processDefinitionDescription?: string;\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionName?: string;\n    processDefinitionVersion?: number = 0;\n    processInstanceId?: string;\n    processInstanceName?: string;\n    processInstanceStartUserId?: string;\n    taskDefinitionKey?: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.name = obj.name || null;\n            this.priority = obj.priority;\n            this.assignee = obj.assignee ? new UserProcessModel(obj.assignee) : null;\n            this.adhocTaskCanBeReassigned = obj.adhocTaskCanBeReassigned;\n            this.category = obj.category || null;\n            this.created = obj.created || null;\n            this.description = obj.description || null;\n            this.dueDate = obj.dueDate || null;\n            this.duration = obj.duration || null;\n            this.endDate = obj.endDate || null;\n            this.executionId = obj.executionId || null;\n            this.formKey = obj.formKey || null;\n            this.initiatorCanCompleteTask = !!obj.initiatorCanCompleteTask;\n            this.managerOfCandidateGroup = !!obj.managerOfCandidateGroup;\n            this.memberOfCandidateGroup = !!obj.memberOfCandidateGroup;\n            this.memberOfCandidateUsers = !!obj.memberOfCandidateUsers;\n            this.involvedGroups = obj.involvedGroups;\n            this.involvedPeople = obj.involvedPeople;\n            this.parentTaskId = obj.parentTaskId || null;\n            this.parentTaskName = obj.parentTaskName || null;\n            this.processDefinitionCategory = obj.processDefinitionCategory || null;\n            this.processDefinitionDeploymentId = obj.processDefinitionDeploymentId || null;\n            this.processDefinitionDescription = obj.processDefinitionDescription || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processDefinitionKey = obj.processDefinitionKey || null;\n            this.processDefinitionName = obj.processDefinitionName || null;\n            this.processDefinitionVersion = obj.processDefinitionVersion || 0;\n            this.processInstanceId = obj.processInstanceId || null;\n            this.processInstanceName = obj.processInstanceName || null;\n            this.processInstanceStartUserId = obj.processInstanceStartUserId || null;\n            this.taskDefinitionKey = obj.taskDefinitionKey || null;\n        }\n    }\n\n    getFullName(): string {\n        let fullName: string = '';\n\n        if (this.assignee) {\n            const firstName: string = this.assignee.firstName ? this.assignee.firstName : '';\n            const lastName: string = this.assignee.lastName ? this.assignee.lastName : '';\n            fullName = `${firstName} ${lastName}`;\n        }\n\n        return fullName.trim();\n    }\n\n    isCompleted(): boolean {\n        return !!this.endDate;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskDetailsModel } from './task-details.model';\n\nexport class TaskListModel  {\n    size?: number;\n    total?: number;\n    start?: number;\n    length?: number;\n    data?: TaskDetailsModel[] = [];\n\n    constructor(input?: any) {\n        if (input) {\n            Object.assign(this, input);\n            if (input.data) {\n                this.data = input.data.map((item: any) => {\n                    return new TaskDetailsModel(item);\n                });\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, from, forkJoin, throwError, of } from 'rxjs';\nimport { map, catchError, switchMap, flatMap, filter } from 'rxjs/operators';\nimport { FilterRepresentationModel, TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { Form } from '../models/form.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListModel } from '../models/task-list.model';\nimport {\n    TaskQueryRepresentation,\n    AssigneeIdentifierRepresentation\n} from '@alfresco/js-api';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskListService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets all the filters in the list that belong to a task.\n     * @param taskId ID of the target task\n     * @param filterList List of filters to search through\n     * @returns Filters belonging to the task\n     */\n    getFilterForTaskById(taskId: string, filterList: FilterRepresentationModel[]): Observable<FilterRepresentationModel> {\n        return from(filterList)\n            .pipe(\n                flatMap((data: FilterRepresentationModel) => this.isTaskRelatedToFilter(taskId, data)),\n                filter((data: FilterRepresentationModel) => data != null)\n            );\n    }\n\n    /**\n     * Gets the search query for a task based on the supplied filter.\n     * @param filter The filter to use\n     * @returns The search query\n     */\n    private generateTaskRequestNodeFromFilter(filterModel: FilterRepresentationModel): TaskQueryRequestRepresentationModel {\n        const requestNode = {\n            appDefinitionId: filterModel.appId,\n            assignment: filterModel.filter.assignment,\n            state: filterModel.filter.state,\n            sort: filterModel.filter.sort\n        };\n        return new TaskQueryRequestRepresentationModel(requestNode);\n    }\n\n    /**\n     * Checks if a taskId is filtered with the given filter.\n     * @param taskId ID of the target task\n     * @param filterModel The filter you want to check\n     * @returns The filter if it is related or null otherwise\n     */\n    isTaskRelatedToFilter(taskId: string, filterModel: FilterRepresentationModel): Observable<FilterRepresentationModel> {\n        const requestNodeForFilter = this.generateTaskRequestNodeFromFilter(filterModel);\n        return from(this.callApiTasksFiltered(requestNodeForFilter))\n            .pipe(\n                map((res: any) => {\n                    return res.data.find((element) => element.id === taskId) ? filterModel : null;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets all the tasks matching the supplied query.\n     * @param requestNode Query to search for tasks\n     * @returns List of tasks\n     */\n    getTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel> {\n        return from(this.callApiTasksFiltered(requestNode))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets tasks matching a query and state value.\n     * @param requestNode Query to search for tasks\n     * @param state Task state. Can be \"open\" or \"completed\".\n     * @returns List of tasks\n     */\n    findTasksByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel> {\n        if (state) {\n            requestNode.state = state;\n        }\n        return this.getTasks(requestNode)\n            .pipe(catchError(() => of(new TaskListModel())));\n    }\n\n    /**\n     * Gets all tasks matching a query and state value.\n     * @param requestNode Query to search for tasks.\n     * @param state Task state. Can be \"open\" or \"completed\".\n     * @returns List of tasks\n     */\n    findAllTaskByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel> {\n        if (state) {\n            requestNode.state = state;\n        }\n        return this.getTotalTasks(requestNode)\n            .pipe(\n                switchMap((res: any) => {\n                    requestNode.size = res.total;\n                    return this.getTasks(requestNode);\n                })\n            );\n    }\n\n    /**\n     * Gets all tasks matching the supplied query but ignoring the task state.\n     * @param requestNode Query to search for tasks\n     * @returns List of tasks\n     */\n    findAllTasksWithoutState(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel> {\n        return forkJoin(\n            this.findTasksByState(requestNode, 'open'),\n            this.findAllTaskByState(requestNode, 'completed'),\n            (activeTasks: TaskListModel, completedTasks: TaskListModel) => {\n                const tasks = Object.assign({}, activeTasks);\n                tasks.total += completedTasks.total;\n                tasks.data = tasks.data.concat(completedTasks.data);\n                return tasks;\n            }\n        );\n    }\n\n    /**\n     * Gets details for a task.\n     * @param taskId ID of the target task.\n     * @returns Task details\n     */\n    getTaskDetails(taskId: string): Observable<TaskDetailsModel> {\n        return from(this.callApiTaskDetails(taskId))\n            .pipe(\n                map((details: any) => {\n                    return new TaskDetailsModel(details);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets the checklist for a task.\n     * @param id ID of the target task\n     * @returns Array of checklist task details\n     */\n    getTaskChecklist(id: string): Observable<TaskDetailsModel[]> {\n        return from(this.callApiTaskChecklist(id))\n            .pipe(\n                map((response: any) => {\n                    const checklists: TaskDetailsModel[] = [];\n                    response.data.forEach((checklist) => {\n                        checklists.push(new TaskDetailsModel(checklist));\n                    });\n                    return checklists;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets all available reusable forms.\n     * @returns Array of form details\n     */\n    getFormList(): Observable<Form[]> {\n        const opts = {\n            'filter': 'myReusableForms', // String | filter\n            'sort': 'modifiedDesc', // String | sort\n            'modelType': 2 // Integer | modelType\n        };\n\n        return from(this.apiService.getInstance().activiti.modelsApi.getModels(opts))\n            .pipe(\n                map((response: any) => {\n                    const forms: Form[] = [];\n                    response.data.forEach((form) => {\n                        forms.push(new Form(form.id, form.name));\n                    });\n                    return forms;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Attaches a form to a task.\n     * @param taskId ID of the target task\n     * @param formId ID of the form to add\n     * @returns Null response notifying when the operation is complete\n     */\n    attachFormToATask(taskId: string, formId: number): Observable<any> {\n        return from(this.apiService.taskApi.attachForm(taskId, { 'formId': formId }))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Adds a subtask (ie, a checklist task) to a parent task.\n     * @param task The task to add\n     * @returns The subtask that was added\n     */\n    addTask(task: TaskDetailsModel): Observable<TaskDetailsModel> {\n        return from(this.callApiAddTask(task))\n            .pipe(\n                map((response: TaskDetailsModel) => {\n                    return new TaskDetailsModel(response);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Deletes a subtask (ie, a checklist task) from a parent task.\n     * @param taskId The task to delete\n     * @returns Null response notifying when the operation is complete\n     */\n    deleteTask(taskId: string): Observable<TaskDetailsModel> {\n        return from(this.callApiDeleteTask(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Deletes a form from a task.\n     * @param taskId Task id related to form\n     * @returns Null response notifying when the operation is complete\n     */\n    deleteForm(taskId: string): Observable<TaskDetailsModel> {\n        return from(this.callApiDeleteForm(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gives completed status to a task.\n     * @param taskId ID of the target task\n     * @returns Null response notifying when the operation is complete\n     */\n    completeTask(taskId: string) {\n        return from(this.apiService.taskApi.completeTask(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets the total number of the tasks found by a query.\n     * @param requestNode Query to search for tasks\n     * @returns Number of tasks\n     */\n    public getTotalTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<any> {\n        requestNode.size = 0;\n        return from(this.callApiTasksFiltered(requestNode))\n            .pipe(\n                map((res: any) => {\n                    return res;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Creates a new standalone task.\n     * @param task Details of the new task\n     * @returns Details of the newly created task\n     */\n    createNewTask(task: TaskDetailsModel): Observable<TaskDetailsModel> {\n        return from(this.callApiCreateTask(task))\n            .pipe(\n                map((response: TaskDetailsModel) => {\n                    return new TaskDetailsModel(response);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Assigns a task to a user or group.\n     * @param taskId The task to assign\n     * @param requestNode User or group to assign the task to\n     * @returns Details of the assigned task\n     */\n    assignTask(taskId: string, requestNode: any): Observable<TaskDetailsModel> {\n        const assignee = { assignee: requestNode.id };\n        return from(this.callApiAssignTask(taskId, assignee))\n            .pipe(\n                map((response: TaskDetailsModel) => {\n                    return new TaskDetailsModel(response);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Assigns a task to a user.\n     * @param taskId ID of the task to assign\n     * @param userId ID of the user to assign the task to\n     * @returns Details of the assigned task\n     */\n    assignTaskByUserId(taskId: string, userId: string): Observable<TaskDetailsModel> {\n        const assignee = <AssigneeIdentifierRepresentation> { assignee: userId };\n        return from(this.callApiAssignTask(taskId, assignee))\n            .pipe(\n                map((response: TaskDetailsModel) => {\n                    return new TaskDetailsModel(response);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Claims a task for the current user.\n     * @param taskId ID of the task to claim\n     * @returns Details of the claimed task\n     */\n    claimTask(taskId: string): Observable<TaskDetailsModel> {\n        return from(this.apiService.taskApi.claimTask(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Un-claims a task for the current user.\n     * @param taskId ID of the task to unclaim\n     * @returns Null response notifying when the operation is complete\n     */\n    unclaimTask(taskId: string): Observable<TaskDetailsModel> {\n        return from(this.apiService.taskApi.unclaimTask(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Updates the details (name, description, due date) for a task.\n     * @param taskId ID of the task to update\n     * @param updated Data to update the task (as a `TaskUpdateRepresentation` instance).\n     * @returns Updated task details\n     */\n    updateTask(taskId: any, updated): Observable<TaskDetailsModel> {\n        return from(this.apiService.taskApi.updateTask(taskId, updated))\n            .pipe(\n                map((result) => <TaskDetailsModel> result),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Fetches the Task Audit information in PDF format.\n     * @param taskId ID of the target task\n     * @returns Binary PDF data\n     */\n    fetchTaskAuditPdfById(taskId: string): Observable<Blob> {\n        return from(this.apiService.taskApi.getTaskAuditPdf(taskId))\n            .pipe(\n                map((data) => <Blob> data),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Fetch the Task Audit information in JSON format\n     * @param taskId ID of the target task\n     * @returns JSON data\n     */\n    fetchTaskAuditJsonById(taskId: string): Observable<any> {\n        return from(this.apiService.taskApi.getTaskAuditJson(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    private callApiTasksFiltered(requestNode: TaskQueryRepresentation): Promise<TaskListModel> {\n        return this.apiService.taskApi.listTasks(requestNode);\n    }\n\n    private callApiTaskDetails(taskId: string): Promise<TaskDetailsModel> {\n        return this.apiService.taskApi.getTask(taskId);\n    }\n\n    private callApiAddTask(task: TaskDetailsModel): Promise<TaskDetailsModel> {\n        return this.apiService.taskApi.addSubtask(task.parentTaskId, task);\n    }\n\n    private callApiDeleteTask(taskId: string): Promise<any> {\n        return this.apiService.taskApi.deleteTask(taskId);\n    }\n\n    private callApiDeleteForm(taskId: string): Promise<any> {\n        return this.apiService.taskApi.removeForm(taskId);\n    }\n\n    private callApiTaskChecklist(taskId: string): Promise<TaskListModel> {\n        return this.apiService.taskApi.getChecklist(taskId);\n    }\n\n    private callApiCreateTask(task: TaskDetailsModel): Promise<TaskDetailsModel> {\n        return this.apiService.taskApi.createNewTask(task);\n    }\n\n    private callApiAssignTask(taskId: string, requestNode: AssigneeIdentifierRepresentation): Promise<TaskDetailsModel> {\n        return this.apiService.taskApi.assignTask(taskId, requestNode);\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataRowEvent, DataTableAdapter, DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective } from '@alfresco/adf-core';\nimport {\n    AppConfigService, PaginationComponent, PaginatedComponent,\n    UserPreferencesService, UserPreferenceValues, PaginationModel } from '@alfresco/adf-core';\nimport {\n    AfterContentInit, Component, ContentChild, EventEmitter,\n    Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { TaskListModel } from '../models/task-list.model';\nimport { taskPresetsDefaultModel } from '../models/task-preset.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport moment from 'moment-es6';\n\n@Component({\n    selector: 'adf-tasklist',\n    templateUrl: './task-list.component.html',\n    styleUrls: ['./task-list.component.css']\n})\nexport class TaskListComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent {\n\n    static PRESET_KEY = 'adf-task-list.presets';\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    customEmptyContent: CustomEmptyContentTemplateDirective;\n\n    @ContentChild(CustomLoadingContentTemplateDirective)\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n\n    requestNode: TaskQueryRequestRepresentationModel;\n\n    /** The id of the app. */\n    @Input()\n    appId: number;\n\n    /** The Instance Id of the process. */\n    @Input()\n    processInstanceId: string;\n\n    /** The Definition Id of the process. */\n    @Input()\n    processDefinitionId: string;\n\n    /** Current state of the process. Possible values are: `completed`, `active`. */\n    @Input()\n    state: string;\n\n    /** The assignment of the process. Possible values are: \"assignee\" (the current user\n     * is the assignee), \"candidate\" (the current user is a task candidate, \"group_x\" (the task\n     * is assigned to a group where the current user is a member,\n     * no value (the current user is involved).\n     */\n    @Input()\n    assignment: string;\n\n    /** Define the sort order of the tasks. Possible values are : `created-desc`,\n     * `created-asc`, `due-desc`, `due-asc`\n     */\n    @Input()\n    sort: string;\n\n    /** Name of the tasklist. */\n    @Input()\n    name: string;\n\n    /** Define which task id should be selected after reloading. If the task id doesn't\n     * exist or nothing is passed then the first task will be selected.\n     */\n    @Input()\n    landingTaskId: string;\n\n    /**\n     * Data source object that represents the number and the type of the columns that\n     * you want to show.\n     */\n    @Input()\n    data: DataTableAdapter;\n\n    /** Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,\n     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for\n     * multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // none|single|multiple\n\n    /** Toggles multiple row selection, renders checkboxes at the beginning of each row */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Toggles default selection of the first row */\n    @Input()\n    selectFirstRow: boolean = true;\n\n    /** The id of a task */\n    @Input()\n    taskId: string;\n\n    /** Toggles inclusion of Process Instances */\n    @Input()\n    includeProcessInstance: boolean;\n\n    /** Starting point of the list within the full set of tasks. */\n    @Input()\n    start: number;\n\n    /** Emitted when a task in the list is clicked */\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when rows are selected/unselected */\n    @Output()\n    rowsSelected: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    /** Emitted when the task list is loaded */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    currentInstanceId: string;\n    selectedInstances: any[];\n    pagination: BehaviorSubject<PaginationModel>;\n\n    /** The page number of the tasks to fetch. */\n    @Input()\n    page: number = 0;\n\n    /** The number of tasks to fetch. Default value: 25. */\n    @Input()\n    size: number = PaginationComponent.DEFAULT_PAGINATION.maxItems;\n\n    /** Filter the tasks. Display only tasks with `created_date` after `dueAfter`. */\n    @Input()\n    dueAfter: string;\n\n    /** Filter the tasks. Display only tasks with `created_date` before `dueBefore`. */\n    @Input()\n    dueBefore: string;\n\n    rows: any[] = [];\n    isLoading: boolean = true;\n    sorting: any[] = ['created', 'desc'];\n\n    /**\n     * Toggles custom data source mode.\n     * When enabled the component reloads data from it's current source instead of the server side.\n     * This allows generating and displaying custom data sets (i.e. filtered out content).\n     *\n     * @memberOf TaskListComponent\n     */\n    hasCustomDataSource: boolean = false;\n\n    constructor(private taskListService: TaskListService,\n                appConfigService: AppConfigService,\n                private userPreferences: UserPreferencesService) {\n        super(appConfigService, TaskListComponent.PRESET_KEY, taskPresetsDefaultModel);\n        this.userPreferences.select(UserPreferenceValues.PaginationSize).subscribe((pageSize) => {\n            this.size = pageSize;\n        });\n\n        this.pagination = new BehaviorSubject<PaginationModel>(<PaginationModel> {\n            maxItems: this.size,\n            skipCount: 0,\n            totalItems: 0\n        });\n    }\n\n    ngAfterContentInit() {\n        this.createDatatableSchema();\n        if (this.data && this.data.getColumns().length === 0) {\n            this.data.setColumns(this.columns);\n        }\n\n        if (this.appId) {\n            this.reload();\n        }\n    }\n\n    setCustomDataSource(rows: any[]): void {\n        if (rows) {\n            this.rows = rows;\n            this.hasCustomDataSource = true;\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isPropertyChanged(changes)) {\n            if (this.isSortChanged(changes)) {\n                this.sorting = this.sort ? this.sort.split('-') : this.sorting;\n            }\n            this.reload();\n        }\n    }\n\n    private isSortChanged(changes: SimpleChanges): boolean {\n        const actualSort = changes['sort'];\n        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;\n    }\n\n    private isPropertyChanged(changes: SimpleChanges): boolean {\n        let changed: boolean = true;\n\n        const landingTaskId = changes['landingTaskId'];\n        const page = changes['page'];\n        const size = changes['size'];\n        if (landingTaskId && landingTaskId.currentValue && this.isEqualToCurrentId(landingTaskId.currentValue)) {\n            changed = false;\n        } else if (page && page.currentValue !== page.previousValue) {\n            changed = true;\n        } else if (size && size.currentValue !== size.previousValue) {\n            changed = true;\n        }\n\n        return changed;\n    }\n\n    reload(): void {\n        if (!this.hasCustomDataSource) {\n            this.requestNode = this.createRequestNode();\n            this.load(this.requestNode);\n        } else {\n            this.isLoading = false;\n        }\n    }\n\n    private load(requestNode: TaskQueryRequestRepresentationModel) {\n        this.isLoading = true;\n        this.loadTasksByState().subscribe(\n            (tasks) => {\n                this.rows = this.optimizeTaskDetails(tasks.data);\n                this.selectTask(this.landingTaskId);\n                this.success.emit(tasks);\n                this.isLoading = false;\n                this.pagination.next({\n                    count: tasks.data.length,\n                    maxItems: this.size,\n                    skipCount: this.page * this.size,\n                    totalItems: tasks.total\n                });\n            }, (error) => {\n                this.error.emit(error);\n                this.isLoading = false;\n            });\n    }\n\n    private loadTasksByState(): Observable<TaskListModel> {\n        return this.requestNode.state === 'all'\n            ? this.taskListService.findAllTasksWithoutState(this.requestNode)\n            : this.taskListService.findTasksByState(this.requestNode);\n    }\n\n    /**\n     * Select the task given in input if present\n     */\n    selectTask(taskIdSelected: string): void {\n        if (!this.isListEmpty()) {\n            let dataRow = null;\n            if (taskIdSelected) {\n                dataRow = this.rows.find((currentRow: any) => {\n                    return currentRow['id'] === taskIdSelected;\n                });\n            }\n            if (!dataRow && this.selectFirstRow) {\n                dataRow = this.rows[0];\n            }\n            if (dataRow) {\n                dataRow.isSelected = true;\n                this.currentInstanceId = dataRow['id'];\n            }\n        } else {\n            this.currentInstanceId = null;\n        }\n    }\n\n    /**\n     * Return the current id\n     */\n    getCurrentId(): string {\n        return this.currentInstanceId;\n    }\n\n    /**\n     * Check if the taskId is the same of the selected task\n     * @param taskId\n     */\n    isEqualToCurrentId(taskId: string): boolean {\n        return this.currentInstanceId === taskId;\n    }\n\n    /**\n     * Check if the list is empty\n     */\n    isListEmpty(): boolean {\n        return !this.rows || this.rows.length === 0;\n    }\n\n    onRowClick(item: DataRowEvent) {\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    onRowSelect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowUnselect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n\n    /**\n     * Optimize name field\n     * @param instances\n     */\n    private optimizeTaskDetails(instances: any[]): any[] {\n        instances = instances.map((task) => {\n            if (!task.name) {\n                task.name = 'No name';\n            }\n            return task;\n        });\n        return instances;\n    }\n\n    private createRequestNode() {\n\n        const requestNode = {\n            appDefinitionId: this.appId,\n            dueAfter: this.dueAfter ? moment(this.dueAfter).toDate() : null,\n            dueBefore: this.dueBefore ? moment(this.dueBefore).toDate() : null,\n            processInstanceId: this.processInstanceId,\n            processDefinitionId: this.processDefinitionId,\n            text: this.name,\n            assignment: this.assignment,\n            state: this.state,\n            sort: this.sort,\n            page: this.page,\n            size: this.size,\n            start: this.start,\n            taskId: this.taskId,\n            includeProcessInstance: this.includeProcessInstance\n        };\n        return new TaskQueryRequestRepresentationModel(requestNode);\n    }\n\n    updatePagination(params: PaginationModel) {\n        const needsReload = params.maxItems || params.skipCount;\n        this.size = params.maxItems;\n        this.page = this.currentPage(params.skipCount, params.maxItems);\n        if (needsReload) {\n            this.reload();\n        }\n    }\n\n    currentPage(skipCount: number, maxItems: number): number {\n        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\n\n@Component({\n    selector: 'adf-checklist',\n    templateUrl: './checklist.component.html',\n    styleUrls: ['./checklist.component.scss']\n})\nexport class ChecklistComponent implements OnChanges {\n\n    /** (required) The id of the parent task to which subtasks are\n     * attached.\n     */\n    @Input()\n    taskId: string;\n\n    /** Toggle readonly state of the form. All form widgets\n     * will render as readonly if enabled.\n     */\n    @Input()\n    readOnly: boolean = false;\n\n    /** (required) The assignee id that the subtasks are assigned to. */\n    @Input()\n    assignee: string;\n\n    /** Emitted when a new checklist task is created. */\n    @Output()\n    checklistTaskCreated: EventEmitter<TaskDetailsModel> = new EventEmitter<TaskDetailsModel>();\n\n    /** Emitted when a checklist task is deleted. */\n    @Output()\n    checklistTaskDeleted: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('dialog')\n    addNewDialog: any;\n\n    taskName: string;\n\n    checklist: TaskDetailsModel [] = [];\n\n    /**\n     * Constructor\n     * @param auth\n     * @param translate\n     */\n    constructor(private activitiTaskList: TaskListService,\n                private dialog: MatDialog) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const taskId = changes['taskId'];\n        if (taskId && taskId.currentValue) {\n            this.getTaskChecklist(taskId.currentValue);\n            return;\n        }\n    }\n\n    public getTaskChecklist(taskId: string) {\n        this.checklist = [];\n        if (this.taskId) {\n            this.activitiTaskList.getTaskChecklist(this.taskId).subscribe(\n                (taskDetailsModel: TaskDetailsModel[]) => {\n                    taskDetailsModel.forEach((task) => {\n                        this.checklist.push(task);\n                    });\n                },\n                (error) => {\n                    this.error.emit(error);\n                }\n            );\n        } else {\n            this.checklist = [];\n        }\n    }\n\n    showDialog() {\n        this.dialog.open(this.addNewDialog, { width: '350px' });\n    }\n\n    public add() {\n        const newTask = new TaskDetailsModel({\n            name: this.taskName,\n            parentTaskId: this.taskId,\n            assignee: { id: this.assignee }\n        });\n        this.activitiTaskList.addTask(newTask).subscribe(\n            (taskDetailsModel: TaskDetailsModel) => {\n                this.checklist.push(taskDetailsModel);\n                this.checklistTaskCreated.emit(taskDetailsModel);\n                this.taskName = '';\n            },\n            (error) => {\n                this.error.emit(error);\n            }\n        );\n        this.cancel();\n    }\n\n    public delete(taskId: string) {\n        this.activitiTaskList.deleteTask(taskId).subscribe(\n            () => {\n                this.checklist = this.checklist.filter((check) => check.id !== taskId);\n                this.checklistTaskDeleted.emit(taskId);\n            },\n            (error) => {\n                this.error.emit(error);\n            });\n    }\n\n    public cancel() {\n        this.dialog.closeAll();\n        this.taskName = '';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CardViewItemValidator } from '@alfresco/adf-core';\n\nexport class TaskDescriptionValidator implements CardViewItemValidator {\n\n    message: string = 'ADF_CLOUD_TASK_HEADER.FORM_VALIDATION.INVALID_FIELD';\n\n    isValid(value: any): boolean {\n        const isWhitespace = (value || '').trim().length === 0;\n        return value.length === 0 || !isWhitespace;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport {\n    BpmUserService,\n    CardViewDateItemModel,\n    CardViewItem,\n    CardViewMapItemModel,\n    CardViewTextItemModel,\n    CardViewBaseItemModel,\n    LogService,\n    TranslationService,\n    AppConfigService\n} from '@alfresco/adf-core';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { TaskDescriptionValidator } from '../validators/task-description.validator';\n\n@Component({\n    selector: 'adf-task-header',\n    templateUrl: './task-header.component.html',\n    styleUrls: ['./task-header.component.scss']\n})\nexport class TaskHeaderComponent implements OnChanges, OnInit {\n\n    /** The name of the form. */\n    @Input()\n    formName: string = null;\n\n    /** (required) Details related to the task. */\n    @Input()\n    taskDetails: TaskDetailsModel;\n\n    /** Emitted when the task is claimed. */\n    @Output()\n    claim: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task is unclaimed (ie, requeued). */\n    @Output()\n    unclaim: EventEmitter<any> = new EventEmitter<any>();\n\n    private currentUserId: number;\n\n    properties: CardViewItem [];\n    inEdit: boolean = false;\n    dateFormat: string;\n    dateLocale: string;\n\n    constructor(private activitiTaskService: TaskListService,\n                private bpmUserService: BpmUserService,\n                private translationService: TranslationService,\n                private logService: LogService,\n                private appConfig: AppConfigService) {\n        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');\n        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');\n    }\n\n    ngOnInit() {\n        this.loadCurrentBpmUserId();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.refreshData();\n    }\n\n    private initDefaultProperties(parentInfoMap) {\n        return [\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',\n                    value: this.taskDetails.getFullName(),\n                    key: 'assignee',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT'),\n                    clickable: !this.isCompleted(),\n                    icon: 'create'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.STATUS',\n                    value: this.getTaskStatus(),\n                    key: 'status'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.PRIORITY',\n                    value: this.taskDetails.priority,\n                    key: 'priority',\n                    editable: true\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE',\n                    value: this.taskDetails.dueDate,\n                    key: 'dueDate',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT'),\n                    editable: true,\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.CATEGORY',\n                    value: this.taskDetails.category,\n                    key: 'category',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT')\n                }\n            ),\n            new CardViewMapItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME',\n                    value: parentInfoMap,\n                    key: 'parentName',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT'),\n                    clickable: true\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.CREATED',\n                    value: this.taskDetails.created,\n                    key: 'created',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.DURATION',\n                    value: this.getTaskDuration(),\n                    key: 'duration'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.PARENT_TASK_ID',\n                    value: this.taskDetails.parentTaskId,\n                    key: 'parentTaskId'\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.END_DATE',\n                    value: this.taskDetails.endDate,\n                    key: 'endDate',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.ID',\n                    value: this.taskDetails.id,\n                    key: 'id'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION',\n                    value: this.taskDetails.description,\n                    key: 'description',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT'),\n                    multiline: true,\n                    editable: true,\n                    validators: [new TaskDescriptionValidator()]\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',\n                    value: this.formName,\n                    key: 'formName',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),\n                    clickable: !!this.formName,\n                    icon: 'create'\n                }\n            )\n        ];\n    }\n\n    /**\n     * Refresh the card data\n     */\n    refreshData() {\n        if (this.taskDetails) {\n            const parentInfoMap = this.getParentInfo();\n            const defaultProperties = this.initDefaultProperties(parentInfoMap);\n            const filteredProperties: string[] = this.appConfig.get('adf-task-header.presets.properties');\n            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));\n        }\n    }\n\n    private isValidSelection(filteredProperties: string[], cardItem: CardViewBaseItemModel): boolean {\n        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;\n    }\n\n    /**\n     * Loads current bpm userId\n     */\n    private loadCurrentBpmUserId(): void {\n        this.bpmUserService.getCurrentUserInfo().subscribe((res) => {\n            this.currentUserId = res ? +res.id : null;\n        });\n    }\n\n    /**\n     * Return the process parent information\n     */\n    getParentInfo() {\n        if (this.taskDetails.processInstanceId && this.taskDetails.processDefinitionName) {\n            return new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);\n        }\n    }\n\n    /**\n     * Does the task have an assignee\n     */\n    public hasAssignee(): boolean {\n        return !!this.taskDetails.assignee ? true : false;\n    }\n\n    /**\n     * Returns true if the task is assigned to logged in user\n     */\n    public isAssignedTo(userId): boolean {\n        return this.hasAssignee() ? this.taskDetails.assignee.id === userId : false;\n    }\n\n    /**\n     * Return true if the task assigned\n     */\n    public isAssignedToCurrentUser(): boolean {\n        return this.hasAssignee() && this.isAssignedTo(this.currentUserId);\n    }\n\n    /**\n     * Return true if the user is a candidate member\n     */\n    isCandidateMember() {\n        return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;\n    }\n\n    /**\n     * Return true if the task claimable\n     */\n    public isTaskClaimable(): boolean {\n        return !this.hasAssignee() && this.isCandidateMember();\n    }\n\n    /**\n     * Return true if the task claimed by candidate member.\n     */\n    public isTaskClaimedByCandidateMember(): boolean {\n        return this.isCandidateMember() && this.isAssignedToCurrentUser() && !this.isCompleted();\n    }\n\n    /**\n     * Returns task's status\n     */\n    getTaskStatus(): string {\n        return (this.taskDetails && this.taskDetails.isCompleted()) ? 'Completed' : 'Running';\n    }\n\n    /**\n     * Claim task\n     *\n     * @param taskId\n     */\n    claimTask(taskId: string) {\n        this.activitiTaskService.claimTask(taskId).subscribe(\n            (res: any) => {\n                this.logService.info('Task claimed');\n                this.claim.emit(taskId);\n            });\n    }\n\n    /**\n     * Unclaim task\n     *\n     * @param taskId\n     */\n    unclaimTask(taskId: string) {\n        this.activitiTaskService.unclaimTask(taskId).subscribe(\n            (res: any) => {\n                this.logService.info('Task unclaimed');\n                this.unclaim.emit(taskId);\n            });\n    }\n\n    /**\n     * Returns true if the task is completed\n     */\n    isCompleted(): boolean {\n        return this.taskDetails && !!this.taskDetails.endDate;\n    }\n\n    getTaskDuration(): string {\n        return this.taskDetails.duration ? `${this.taskDetails.duration} ms` : '';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';\nimport {\n    AuthenticationService,\n    CardViewUpdateService,\n    ClickNotification,\n    LogService,\n    UpdateNotification,\n    CommentsComponent\n} from '@alfresco/adf-core';\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable, Observer } from 'rxjs';\nimport { ContentLinkModel, FormFieldValidator, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';\nimport { TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { UserRepresentation } from '@alfresco/js-api';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-task-details',\n    templateUrl: './task-details.component.html',\n    styleUrls: ['./task-details.component.scss']\n})\nexport class TaskDetailsComponent implements OnInit, OnChanges {\n\n    @ViewChild('activitiComments')\n    activitiComments: CommentsComponent;\n\n    @ViewChild('activitiChecklist')\n    activitiChecklist: any;\n\n    @ViewChild('errorDialog')\n    errorDialog: TemplateRef<any>;\n\n    /** Toggles debug mode. */\n    @Input()\n    debugMode: boolean = false;\n\n    /** (**required**) The id of the task whose details we are asking for. */\n    @Input()\n    taskId: string;\n\n    /** Automatically renders the next task when the current one is completed. */\n    @Input()\n    showNextTask: boolean = true;\n\n    /** Toggles task details Header component. */\n    @Input()\n    showHeader: boolean = true;\n\n    /** Toggles collapsed/expanded state of the Header component. */\n    @Input()\n    showHeaderContent: boolean = true;\n\n    /** Toggles `Involve People` feature for the Header component. */\n    @Input()\n    showInvolvePeople: boolean = true;\n\n    /** Toggles `Comments` feature for the Header component. */\n    @Input()\n    showComments: boolean = true;\n\n    /** Toggles `Checklist` feature for the Header component. */\n    @Input()\n    showChecklist: boolean = true;\n\n    /** Toggles rendering of the form title. */\n    @Input()\n    showFormTitle: boolean = false;\n\n    /** Toggles rendering of the `Complete` outcome button. */\n    @Input()\n    showFormCompleteButton: boolean = true;\n\n    /** Toggles rendering of the `Save` outcome button. */\n    @Input()\n    showFormSaveButton: boolean = true;\n\n    /** Toggles read-only state of the form. All form widgets render as read-only\n     * if enabled.\n     */\n    @Input()\n    readOnlyForm: boolean = false;\n\n    /** Toggles rendering of the `Refresh` button. */\n    @Input()\n    showFormRefreshButton: boolean = true;\n\n    /** Field validators for use with the form. */\n    @Input()\n    fieldValidators: FormFieldValidator[] = [];\n\n    /** Emitted when the form is submitted with the `Save` or custom outcomes. */\n    @Output()\n    formSaved: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    /** Emitted when the form is submitted with the `Complete` outcome. */\n    @Output()\n    formCompleted: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    /** Emitted when the form field content is clicked. */\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    /** Emitted when the form is loaded or reloaded. */\n    @Output()\n    formLoaded: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    /** Emitted when a checklist task is created. */\n    @Output()\n    taskCreated: EventEmitter<TaskDetailsModel> = new EventEmitter<TaskDetailsModel>();\n\n    /** Emitted when a checklist task is deleted. */\n    @Output()\n    taskDeleted: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when any outcome is executed. Default behaviour can be prevented\n     * via `event.preventDefault()`.\n     */\n    @Output()\n    executeOutcome: EventEmitter<FormOutcomeEvent> = new EventEmitter<FormOutcomeEvent>();\n\n    /** Emitted when a task is assigned. */\n    @Output()\n    assignTask: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when a task is claimed. */\n    @Output()\n    claimedTask: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when a task is unclaimed. */\n    @Output()\n    unClaimedTask: EventEmitter<string> = new EventEmitter<string>();\n\n    taskDetails: TaskDetailsModel;\n    taskFormName: string = null;\n\n    taskPeople: UserProcessModel[] = [];\n\n    noTaskDetailsTemplateComponent: TemplateRef<any>;\n\n    showAssignee: boolean = false;\n    showAttachForm: boolean = false;\n    internalReadOnlyForm: boolean = false;\n\n    private peopleSearchObserver: Observer<UserProcessModel[]>;\n    public errorDialogRef: MatDialogRef<TemplateRef<any>>;\n\n    peopleSearch: Observable<UserProcessModel[]>;\n\n    currentLoggedUser: UserRepresentation;\n    data: any;\n\n    constructor(private taskListService: TaskListService,\n                private authService: AuthenticationService,\n                private peopleProcessService: PeopleProcessService,\n                private logService: LogService,\n                private cardViewUpdateService: CardViewUpdateService,\n                private dialog: MatDialog) {\n\n        this.peopleSearch = new Observable<UserProcessModel[]>((observer) => this.peopleSearchObserver = observer)\n            .pipe(share());\n        this.authService.getBpmLoggedUser().subscribe((user: UserRepresentation) => {\n            this.currentLoggedUser = user;\n        });\n    }\n\n    ngOnInit() {\n        if (this.taskId) {\n            this.loadDetails(this.taskId);\n        }\n\n        this.cardViewUpdateService.itemUpdated$.subscribe(this.updateTaskDetails.bind(this));\n        this.cardViewUpdateService.itemClicked$.subscribe(this.clickTaskDetails.bind(this));\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const taskId = changes.taskId;\n        this.showAssignee = false;\n\n        if (taskId && !taskId.currentValue) {\n            this.reset();\n        } else if (taskId && taskId.currentValue) {\n            this.loadDetails(taskId.currentValue);\n        }\n    }\n\n    isStandaloneTask(): boolean {\n        return !(this.taskDetails && (!!this.taskDetails.processDefinitionId));\n    }\n\n    isStandaloneTaskWithForm(): boolean {\n        return this.isStandaloneTask() && this.hasFormKey();\n    }\n\n    isStandaloneTaskWithoutForm(): boolean {\n        return this.isStandaloneTask() && !this.hasFormKey();\n    }\n\n    isFormComponentVisible(): boolean {\n        return this.hasFormKey() && !this.isShowAttachForm();\n    }\n\n    isTaskStandaloneComponentVisible(): boolean {\n        return this.isStandaloneTaskWithoutForm() && !this.isShowAttachForm();\n    }\n\n    isShowAttachForm(): boolean {\n        return this.showAttachForm;\n    }\n\n    /**\n     * Reset the task details\n     */\n    private reset() {\n        this.taskDetails = null;\n    }\n\n    /**\n     * Check if the task has a form\n     */\n    hasFormKey(): boolean {\n        return (this.taskDetails && (!!this.taskDetails.formKey));\n    }\n\n    isTaskActive() {\n        return this.taskDetails && this.taskDetails.duration === null;\n    }\n\n    /**\n     * Save a task detail and update it after a successful response\n     *\n     * @param updateNotification\n     */\n    private updateTaskDetails(updateNotification: UpdateNotification) {\n        this.taskListService.updateTask(this.taskId, updateNotification.changed)\n            .subscribe(\n                () => {\n                    this.loadDetails(this.taskId);\n                }\n            );\n    }\n\n    private clickTaskDetails(clickNotification: ClickNotification) {\n        if (clickNotification.target.key === 'assignee') {\n            this.showAssignee = true;\n        }\n        if (clickNotification.target.key === 'formName') {\n            this.showAttachForm = true;\n        }\n    }\n\n    /**\n     * Load the activiti task details\n     * @param taskId\n     */\n    private loadDetails(taskId: string) {\n        this.taskPeople = [];\n        this.taskFormName = null;\n\n        if (taskId) {\n            this.taskListService.getTaskDetails(taskId).subscribe(\n                (res: TaskDetailsModel) => {\n                    this.showAttachForm = false;\n                    this.taskDetails = res;\n\n                    if (this.taskDetails.name === 'null') {\n                        this.taskDetails.name = 'No name';\n                    }\n\n                    const endDate: any = res.endDate;\n                    if (endDate && !isNaN(endDate.getTime())) {\n                        this.internalReadOnlyForm = true;\n                    } else {\n                        this.internalReadOnlyForm = this.readOnlyForm;\n                    }\n\n                    if (this.taskDetails && this.taskDetails.involvedPeople) {\n                        this.taskDetails.involvedPeople.forEach((user) => {\n                            this.taskPeople.push(new UserProcessModel(user));\n                        });\n                    }\n                });\n        }\n    }\n\n    isAssigned(): boolean {\n        return !!this.taskDetails.assignee;\n    }\n\n    private hasEmailAddress(): boolean {\n        return this.taskDetails.assignee.email ? true : false;\n    }\n\n    isAssignedToMe(): boolean {\n        return this.isAssigned() && this.hasEmailAddress() ?\n            this.isEmailEqual(this.taskDetails.assignee.email, this.currentLoggedUser.email) :\n            this.isExternalIdEqual(this.taskDetails.assignee.externalId, this.currentLoggedUser.externalId);\n    }\n\n    private isEmailEqual(assigneeMail, currentLoggedEmail): boolean {\n        return assigneeMail.toLocaleLowerCase() === currentLoggedEmail.toLocaleLowerCase();\n    }\n\n    private isExternalIdEqual(assigneeExternalId, currentUserExternalId): boolean {\n        return assigneeExternalId.toLocaleLowerCase() === currentUserExternalId.toLocaleLowerCase();\n    }\n\n    isCompleteButtonEnabled(): boolean {\n        return this.isAssignedToMe() || this.canInitiatorComplete();\n    }\n\n    isCompleteButtonVisible(): boolean {\n        return !this.hasFormKey() && this.isTaskActive() && this.isCompleteButtonEnabled();\n    }\n\n    canInitiatorComplete(): boolean {\n        return this.taskDetails.initiatorCanCompleteTask;\n    }\n\n    isSaveButtonVisible(): boolean {\n        return this.hasSaveButton() && (!this.canInitiatorComplete() || this.isAssignedToMe());\n    }\n\n    hasSaveButton(): boolean {\n        return this.showFormSaveButton;\n    }\n\n    /**\n     * Retrieve the next open task\n     * @param processInstanceId\n     * @param processDefinitionId\n     */\n    private loadNextTask(processInstanceId: string, processDefinitionId: string): void {\n        const requestNode = new TaskQueryRequestRepresentationModel(\n            {\n                processInstanceId: processInstanceId,\n                processDefinitionId: processDefinitionId\n            }\n        );\n        this.taskListService.getTasks(requestNode).subscribe(\n            (response) => {\n                if (response && response.length > 0) {\n                    this.taskDetails = new TaskDetailsModel(response[0]);\n                } else {\n                    this.reset();\n                }\n            }, (error) => {\n                this.error.emit(error);\n            });\n    }\n\n    /**\n     * Complete button clicked\n     */\n    onComplete(): void {\n        this.taskListService.completeTask(this.taskId).subscribe(\n            (res) => this.onFormCompleted(null)\n        );\n    }\n\n    onShowAttachForm() {\n        this.showAttachForm = true;\n    }\n\n    onCancelAttachForm() {\n        this.showAttachForm = false;\n    }\n\n    onCompleteAttachForm() {\n        this.showAttachForm = false;\n        this.loadDetails(this.taskId);\n    }\n\n    onFormContentClick(content: ContentLinkModel): void {\n        this.formContentClicked.emit(content);\n    }\n\n    onFormSaved(form: FormModel): void {\n        this.formSaved.emit(form);\n    }\n\n    onFormCompleted(form: FormModel): void {\n        this.formCompleted.emit(form);\n        if (this.showNextTask && (this.taskDetails.processInstanceId || this.taskDetails.processDefinitionId)) {\n            this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);\n        }\n    }\n\n    onFormLoaded(form: FormModel): void {\n        this.taskFormName = (form && form.name ? form.name : null);\n        this.formLoaded.emit(form);\n    }\n\n    onChecklistTaskCreated(task: TaskDetailsModel): void {\n        this.taskCreated.emit(task);\n    }\n\n    onChecklistTaskDeleted(taskId: string): void {\n        this.taskDeleted.emit(taskId);\n    }\n\n    onFormError(error: any): void {\n        this.errorDialogRef = this.dialog.open(this.errorDialog, { width: '500px' });\n        this.error.emit(error);\n    }\n\n    onFormExecuteOutcome(event: FormOutcomeEvent): void {\n        this.executeOutcome.emit(event);\n    }\n\n    closeErrorDialog(): void {\n        this.dialog.closeAll();\n    }\n\n    onClaimAction(taskId: string): void {\n        this.claimedTask.emit(taskId);\n        this.loadDetails(taskId);\n    }\n\n    onUnclaimAction(taskId: string): void {\n        this.unClaimedTask.emit(taskId);\n        this.loadDetails(taskId);\n    }\n\n    isCompletedTask(): boolean {\n        return this.taskDetails && this.taskDetails.endDate ? true : undefined;\n    }\n\n    searchUser(searchedWord: string) {\n        this.peopleProcessService.getWorkflowUsers(null, searchedWord)\n            .subscribe((users) => {\n                users = users.filter((user) => user.id !== this.taskDetails.assignee.id);\n                this.peopleSearchObserver.next(users);\n            }, (error) => this.logService.error('Could not load users'));\n    }\n\n    onCloseSearch() {\n        this.showAssignee = false;\n    }\n\n    assignTaskToUser(selectedUser: UserProcessModel) {\n        this.taskListService.assignTask(this.taskDetails.id, selectedUser).subscribe(\n            (res: any) => {\n                this.logService.info('Task Assigned to ' + selectedUser.email);\n                this.assignTask.emit();\n            });\n        this.showAssignee = false;\n    }\n\n    getTaskHeaderViewClass(): string {\n        if (this.showAssignee) {\n            return 'assign-edit-view';\n        } else {\n            return 'default-view';\n        }\n    }\n\n    isReadOnlyComment(): boolean {\n        return (this.taskDetails && this.taskDetails.isCompleted()) && (this.taskPeople && this.taskPeople.length === 0);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AfterContentInit,\n    ContentChild,\n    Directive,\n    TemplateRef\n} from '@angular/core';\nimport { TaskDetailsComponent } from './task-details.component';\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({\n    selector: 'adf-no-task-details-template, no-task-details-template'\n})\nexport class NoTaskDetailsTemplateDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(\n        private activitiTaskDetails: TaskDetailsComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.activitiTaskDetails.noTaskDetailsTemplateComponent = this.template;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, forkJoin, from, throwError } from 'rxjs';\nimport { FilterRepresentationModel } from '../models/filter.model';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskFilterService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Creates and returns the default filters for a process app.\n     * @param appId ID of the target app\n     * @returns Array of default filters just created\n     */\n    public createDefaultFilters(appId: number): Observable<FilterRepresentationModel[]> {\n        const involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);\n        const involvedObservable = this.addFilter(involvedTasksFilter);\n\n        const myTasksFilter = this.getMyTasksFilterInstance(appId);\n        const myTaskObservable = this.addFilter(myTasksFilter);\n\n        const queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);\n        const queuedObservable = this.addFilter(queuedTasksFilter);\n\n        const completedTasksFilter = this.getCompletedTasksFilterInstance(appId);\n        const completeObservable = this.addFilter(completedTasksFilter);\n\n        return new Observable((observer) => {\n            forkJoin(\n                involvedObservable,\n                myTaskObservable,\n                queuedObservable,\n                completeObservable\n            ).subscribe(\n                (res) => {\n                    const filters: FilterRepresentationModel[] = [];\n                    res.forEach((filter) => {\n                        if (filter.name === involvedTasksFilter.name) {\n                            involvedTasksFilter.id = filter.id;\n                            filters.push(involvedTasksFilter);\n                        } else if (filter.name === myTasksFilter.name) {\n                            myTasksFilter.id = filter.id;\n                            filters.push(myTasksFilter);\n                        } else if (filter.name === queuedTasksFilter.name) {\n                            queuedTasksFilter.id = filter.id;\n                            filters.push(queuedTasksFilter);\n                        } else if (filter.name === completedTasksFilter.name) {\n                            completedTasksFilter.id = filter.id;\n                            filters.push(completedTasksFilter);\n                        }\n                    });\n                    observer.next(filters);\n                    observer.complete();\n                },\n                (err: any) => {\n                    this.logService.error(err);\n                });\n        });\n    }\n\n    /**\n     * Gets all task filters for a process app.\n     * @param appId Optional ID for a specific app\n     * @returns Array of task filter details\n     */\n    getTaskListFilters(appId?: number): Observable<FilterRepresentationModel[]> {\n        return from(this.callApiTaskFilters(appId))\n            .pipe(\n                map((response: any) => {\n                    const filters: FilterRepresentationModel[] = [];\n                    response.data.forEach((filter: FilterRepresentationModel) => {\n                        const filterModel = new FilterRepresentationModel(filter);\n                        filters.push(filterModel);\n                    });\n                    return filters;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets a task filter by ID.\n     * @param filterId ID of the filter\n     * @param appId ID of the app for the filter\n     * @returns Details of task filter\n     */\n    getTaskFilterById(filterId: number, appId?: number): Observable<FilterRepresentationModel> {\n        return from(this.callApiTaskFilters(appId)).pipe(\n            map((response) => response.data.find((filter) => filter.id === filterId)),\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets a task filter by name.\n     * @param taskName Name of the filter\n     * @param appId ID of the app for the filter\n     * @returns Details of task filter\n     */\n    getTaskFilterByName(taskName: string, appId?: number): Observable<FilterRepresentationModel> {\n        return from(this.callApiTaskFilters(appId)).pipe(\n            map((response) => response.data.find((filter) => filter.name === taskName)),\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Adds a new task filter\n     * @param filter The new filter to add\n     * @returns Details of task filter just added\n     */\n    addFilter(filter: FilterRepresentationModel): Observable<FilterRepresentationModel> {\n        return from(this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter))\n            .pipe(\n                map((response: FilterRepresentationModel) => {\n                    return response;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Calls `getUserTaskFilters` from the Alfresco JS API.\n     * @param appId ID of the target app\n     * @returns List of task filters\n     */\n    callApiTaskFilters(appId?: number): Promise<any> {\n        if (appId) {\n            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({appId: appId});\n        } else {\n            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();\n        }\n    }\n\n    /**\n     * Creates and returns a filter for \"Involved\" task instances.\n     * @param appId ID of the target app\n     * @returns The newly created filter\n     */\n    getInvolvedTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Involved Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-align-left',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved'}\n        });\n    }\n\n    /**\n     * Creates and returns a filter for \"My Tasks\" task instances.\n     * @param appId ID of the target app\n     * @returns The newly created filter\n     */\n    getMyTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'My Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-inbox',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee'}\n        });\n    }\n\n    /**\n     * Creates and returns a filter for \"Queued Tasks\" task instances.\n     * @param appId ID of the target app\n     * @returns The newly created filter\n     */\n    getQueuedTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Queued Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-record',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate'}\n        });\n    }\n\n    /**\n     * Creates and returns a filter for \"Completed\" task instances.\n     * @param appId ID of the target app\n     * @returns The newly created filter\n     */\n    getCompletedTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Completed Tasks',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-ok-sign',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved'}\n        });\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppsProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FilterParamsModel, FilterRepresentationModel } from '../models/filter.model';\nimport { TaskFilterService } from './../services/task-filter.service';\nimport { TaskListService } from './../services/tasklist.service';\nimport { IconModel } from '../../app-list/icon.model';\n\n@Component({\n    selector: 'adf-task-filters',\n    templateUrl: './task-filters.component.html',\n    styleUrls: ['task-filters.component.scss']\n})\nexport class TaskFiltersComponent implements OnInit, OnChanges {\n\n    /** Parameters to use for the task filter. If there is no match then\n     * the default filter (the first one the list) is selected.\n     */\n    @Input()\n    filterParam: FilterParamsModel;\n\n    /** Emitted when a filter in the list is clicked. */\n    @Output()\n    filterClick: EventEmitter<FilterRepresentationModel> = new EventEmitter<FilterRepresentationModel>();\n\n    /** Emitted when the list is loaded. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs during loading. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Display filters available to the current user for the application with the specified ID. */\n    @Input()\n    appId: number;\n\n    /** Display filters available to the current user for the application with the specified name. */\n    @Input()\n    appName: string;\n\n    /** Toggles display of the filter's icon. */\n    @Input()\n    showIcon: boolean;\n\n    filter$: Observable<FilterRepresentationModel>;\n\n    currentFilter: FilterRepresentationModel;\n\n    filters: FilterRepresentationModel [] = [];\n\n    private iconsMDL: IconModel;\n\n    constructor(private taskFilterService: TaskFilterService,\n                private taskListService: TaskListService,\n                private appsProcessService: AppsProcessService) {\n    }\n\n    ngOnInit() {\n        this.iconsMDL = new IconModel();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        const appId = changes['appId'];\n        const filter = changes['filterParam'];\n        if (appName && appName.currentValue) {\n            this.getFiltersByAppName(appName.currentValue);\n        } else if (appId && appId.currentValue !== appId.previousValue) {\n            this.getFiltersByAppId(appId.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectFilter(filter.currentValue);\n        }\n    }\n\n    /**\n     * Return the task list filtered by appId or by appName\n     * @param appId\n     * @param appName\n     */\n    getFilters(appId?: number, appName?: string) {\n        appName ? this.getFiltersByAppName(appName) : this.getFiltersByAppId(appId);\n    }\n\n    /**\n     * Return the filter list filtered by appId\n     * @param appId - optional\n     */\n    getFiltersByAppId(appId?: number) {\n        this.taskFilterService.getTaskListFilters(appId).subscribe(\n            (res: FilterRepresentationModel[]) => {\n                if (res.length === 0 && this.isFilterListEmpty()) {\n                    this.createFiltersByAppId(appId);\n                } else {\n                    this.resetFilter();\n                    this.filters = res;\n                    this.selectFilter(this.filterParam);\n                    this.success.emit(res);\n                }\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     * @param appName\n     */\n    getFiltersByAppName(appName: string) {\n        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(\n            (application) => {\n                this.getFiltersByAppId(application.id);\n            },\n            (err) => {\n                this.error.emit(err);\n            });\n    }\n\n    /**\n     * Create default filters by appId\n     * @param appId\n     */\n    createFiltersByAppId(appId?: number) {\n        this.taskFilterService.createDefaultFilters(appId).subscribe(\n            (resDefault: FilterRepresentationModel[]) => {\n                this.resetFilter();\n                this.filters = resDefault;\n                this.selectFilter(this.filterParam);\n                this.success.emit(resDefault);\n            },\n            (errDefault: any) => {\n                this.error.emit(errDefault);\n            }\n        );\n    }\n\n    /**\n     * Pass the selected filter as next\n     * @param filter\n     */\n    public selectFilter(newFilter: FilterParamsModel) {\n        if (newFilter) {\n            this.currentFilter = this.filters.find( (filter, index) =>\n                newFilter.index === index ||\n                newFilter.id === filter.id ||\n                (newFilter.name &&\n                    (newFilter.name.toLocaleLowerCase() === filter.name.toLocaleLowerCase())\n                ));\n        }\n        if (!this.currentFilter) {\n            this.selectDefaultTaskFilter();\n        }\n    }\n\n    public selectFilterAndEmit(newFilter: FilterParamsModel) {\n        this.selectFilter(newFilter);\n        this.filterClick.emit(this.currentFilter);\n    }\n\n    /**\n     * Select filter with task\n     * @param taskId\n     */\n    public selectFilterWithTask(taskId: string) {\n        const filteredFilterList: FilterRepresentationModel[] = [];\n        this.taskListService.getFilterForTaskById(taskId, this.filters).subscribe(\n            (filter: FilterRepresentationModel) => {\n                filteredFilterList.push(filter);\n            },\n            (err) => {\n                this.error.emit(err);\n            },\n            () => {\n                if (filteredFilterList.length > 0) {\n                    this.selectFilter(filteredFilterList[0]);\n                    this.filterClick.emit(this.currentFilter);\n                }\n            });\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     * @param filteredFilterList\n     */\n    public selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Return the current task\n     */\n    getCurrentFilter(): FilterRepresentationModel {\n        return this.currentFilter;\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n\n    /**\n     * Return current filter icon\n     */\n    getFilterIcon(icon): string {\n        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { ContentService } from '@alfresco/adf-core';\nimport { Directive, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { TaskListService } from './../services/tasklist.service';\n\nconst JSON_FORMAT: string = 'json';\nconst PDF_FORMAT: string = 'pdf';\n\n@Directive({\n    selector: 'button[adf-task-audit]',\n    host: {\n        'role': 'button',\n        '(click)': 'onClickAudit()'\n    }\n})\nexport class TaskAuditDirective implements OnChanges {\n\n    /** (**required**) The id of the task. */\n    @Input('task-id')\n    taskId: string;\n\n    /** Name of the downloaded file (for PDF downloads). */\n    @Input()\n    fileName: string = 'Audit';\n\n    /** Format of the audit information. Can be \"pdf\" or \"json\". */\n    @Input()\n    format: string = 'pdf';\n\n    /** Enables downloading of the audit when the decorated element is clicked. */\n    @Input()\n    download: boolean = true;\n\n    /** Emitted when the decorated element is clicked. */\n    @Output()\n    clicked: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    public audit: any;\n\n    /**\n     *\n     * @param translateService\n     * @param taskListService\n     */\n    constructor(private contentService: ContentService,\n                private taskListService: TaskListService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isValidType()) {\n            this.setDefaultFormatType();\n        }\n    }\n\n    isValidType() {\n        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {\n            return true;\n        }\n        return false;\n    }\n\n    setDefaultFormatType(): void {\n        this.format = PDF_FORMAT;\n    }\n\n    /**\n     * fetch the audit information in the requested format\n     */\n    fetchAuditInfo(): void {\n        if (this.isPdfFormat()) {\n            this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe(\n                (blob: Blob) => {\n                    this.audit = blob;\n                    if (this.download) {\n                        this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');\n                    }\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe(\n                (res) => {\n                    this.audit = res;\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    onClickAudit() {\n        this.fetchAuditInfo();\n    }\n\n    isJsonFormat() {\n        return this.format === JSON_FORMAT;\n    }\n\n    isPdfFormat() {\n        return this.format === PDF_FORMAT;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogService, UserPreferencesService, UserPreferenceValues, UserProcessModel, FormFieldModel, FormModel } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { MOMENT_DATE_FORMATS, MomentDateAdapter } from '@alfresco/adf-core';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\nimport { Observable, of } from 'rxjs';\nimport { Form } from '../models/form.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { switchMap, defaultIfEmpty } from 'rxjs/operators';\nimport { FormBuilder, AbstractControl, Validators, FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'adf-start-task',\n    templateUrl: './start-task.component.html',\n    styleUrls: ['./start-task.component.scss'],\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartTaskComponent implements OnInit {\n\n    public FORMAT_DATE: string = 'DD/MM/YYYY';\n    MAX_LENGTH: number = 255;\n\n    /** (required) The id of the app. */\n    @Input()\n    appId: number;\n\n    /** Default Task Name. */\n    @Input()\n    name: string = '';\n\n    /** Emitted when the task is successfully created. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the cancel button is clicked by the user. */\n    @Output()\n    cancel: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    taskDetailsModel: TaskDetailsModel = new TaskDetailsModel();\n    forms$: Observable<Form[]>;\n    assigneeId: number;\n    field: FormFieldModel;\n    taskForm: FormGroup;\n    dateError: boolean = false;\n    maxTaskNameLength: number = this.MAX_LENGTH;\n    loading = false;\n\n    /**\n     * Constructor\n     * @param auth\n     * @param translate\n     * @param taskService\n     */\n    constructor(private taskService: TaskListService,\n                private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService,\n                private formBuilder: FormBuilder,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        if (this.name) {\n            this.taskDetailsModel.name = this.name;\n        }\n\n        this.validateMaxTaskNameLength();\n\n        this.field = new FormFieldModel(new FormModel(), { id: this.assigneeId, value: this.assigneeId, placeholder: 'Assignee' });\n        this.userPreferencesService.select(UserPreferenceValues.Locale).subscribe((locale) => {\n            this.dateAdapter.setLocale(locale);\n        });\n\n        this.loadFormsTask();\n        this.buildForm();\n    }\n\n    buildForm() {\n        this.taskForm = this.formBuilder.group({\n            name: new FormControl(this.taskDetailsModel.name, [Validators.required, Validators.maxLength(this.maxTaskNameLength), this.whitespaceValidator]),\n            description: new FormControl('', [this.whitespaceValidator]),\n            formKey: new FormControl('')\n        });\n\n        this.taskForm.valueChanges.subscribe((taskFormValues) => this.setTaskDetails(taskFormValues));\n    }\n\n    public whitespaceValidator(control: FormControl) {\n        if (control.value) {\n            const isWhitespace = (control.value || '').trim().length === 0;\n            const isValid =  control.value.length === 0 || !isWhitespace;\n            return isValid ? null : { 'whitespace': true };\n        }\n    }\n\n    setTaskDetails(form) {\n        this.taskDetailsModel.name = form.name;\n        this.taskDetailsModel.description = form.description;\n        this.taskDetailsModel.formKey = form.formKey ? form.formKey.toString() : null;\n    }\n\n    isFormValid() {\n        return this.taskForm.valid && !this.dateError && !this.loading;\n    }\n\n    public saveTask(): void {\n        this.loading = true;\n        if (this.appId) {\n            this.taskDetailsModel.category = this.appId.toString();\n        }\n        this.taskService.createNewTask(this.taskDetailsModel)\n            .pipe(\n                switchMap((createRes: any) =>\n                    this.attachForm(createRes.id, this.taskDetailsModel.formKey).pipe(\n                        defaultIfEmpty(createRes),\n                        switchMap((attachRes: any) =>\n                            this.assignTaskByUserId(createRes.id, this.assigneeId).pipe(\n                                defaultIfEmpty(attachRes ? attachRes : createRes)\n                            )\n                        )\n                    )\n                )\n            )\n            .subscribe(\n                (res: any) => {\n                    this.loading = false;\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.loading = false;\n                    this.error.emit(err);\n                    this.logService.error('An error occurred while creating new task');\n                });\n    }\n\n    getAssigneeId(userId) {\n        this.assigneeId = userId;\n    }\n\n    private attachForm(taskId: string, formKey: string): Observable<any> {\n        let response = of();\n        if (taskId && formKey) {\n            response = this.taskService.attachFormToATask(taskId, parseInt(formKey, 10));\n        }\n        return response;\n    }\n\n    private assignTaskByUserId(taskId: string, userId: any): Observable<any> {\n        let response = of();\n        if (taskId && userId) {\n            response = this.taskService.assignTaskByUserId(taskId, userId);\n        }\n        return response;\n    }\n\n    public onCancel(): void {\n        this.cancel.emit();\n    }\n\n    private loadFormsTask(): void {\n        this.forms$ = this.taskService.getFormList();\n    }\n\n    public isUserNameEmpty(user: UserProcessModel): boolean {\n        return !user || (this.isEmpty(user.firstName) && this.isEmpty(user.lastName));\n    }\n\n    private isEmpty(data: string): boolean {\n        return data === undefined || data === null || data.trim().length === 0;\n    }\n\n    public getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n\n    onDateChanged(newDateValue: any) {\n        this.dateError = false;\n\n        if (newDateValue) {\n            let momentDate;\n\n            if (typeof newDateValue === 'string') {\n                momentDate = moment(newDateValue, this.FORMAT_DATE, true);\n            } else {\n                momentDate = newDateValue;\n            }\n\n            if (momentDate.isValid()) {\n                this.taskDetailsModel.dueDate = momentDate.toDate();\n            } else {\n                this.dateError = true;\n                this.taskDetailsModel.dueDate = null;\n            }\n        } else {\n            this.taskDetailsModel.dueDate = null;\n        }\n    }\n\n    private validateMaxTaskNameLength() {\n        if (this.maxTaskNameLength > this.MAX_LENGTH) {\n            this.maxTaskNameLength = this.MAX_LENGTH;\n            this.logService.log(`the task name length cannot be greater than ${this.MAX_LENGTH}`);\n        }\n    }\n\n    get nameController(): AbstractControl {\n        return this.taskForm.get('name');\n    }\n\n    get descriptionController(): AbstractControl {\n        return this.taskForm.get('description');\n    }\n\n    get formKeyController(): AbstractControl {\n        return this.taskForm.get('formKey');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'adf-task-standalone',\n    templateUrl: './task-standalone.component.html',\n    styleUrls: ['./task-standalone.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class TaskStandaloneComponent {\n\n    /** Name of the task. */\n    @Input()\n    taskName;\n\n    /** Id of the task. */\n    @Input()\n    taskId;\n\n    /** If true then Task completed message is shown and `Complete` and `Cancel` buttons are hidden. */\n    @Input()\n    isCompleted: boolean = false;\n\n    /** Toggles rendering of the `Complete` button. */\n    @Input()\n    hasCompletePermission: boolean = true;\n\n    // TODO: rename all with show prefix\n    /** Toggles rendering of the `Cancel` button. */\n    @Input()\n    hideCancelButton: boolean = true;\n\n    /** Emitted when the \"Cancel\" button is clicked. */\n    @Output()\n    cancel: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when the form associated with the task is completed. */\n    @Output()\n    complete: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when the form associated with the form task is attached. */\n    @Output()\n    showAttachForm: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor() { }\n\n    onCancelButtonClick(): void {\n        this.cancel.emit();\n    }\n\n    onCompleteButtonClick(): void {\n        this.complete.emit();\n    }\n\n    hasCompleteButton(): boolean {\n        return this.hasCompletePermission && !this.isCompleted;\n    }\n\n    hasCancelButton(): boolean {\n        return !this.hideCancelButton && !this.isCompleted;\n    }\n\n    hasAttachFormButton(): boolean {\n        return !this.isCompleted;\n    }\n\n    onShowAttachForm() {\n        this.showAttachForm.emit();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormService, LogService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { Form } from '../models/form.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'adf-attach-form',\n    templateUrl: './attach-form.component.html',\n    styleUrls: ['./attach-form.component.scss']\n})\n\nexport class AttachFormComponent implements OnInit, OnChanges {\n    constructor(private taskService: TaskListService,\n                private logService: LogService,\n                private formService: FormService) { }\n\n    /** Id of the task. */\n    @Input()\n    taskId;\n\n    /** Identifier of the form to attach. */\n    @Input()\n    formKey;\n\n    /** Emitted when the \"Cancel\" button is clicked. */\n    @Output()\n    cancelAttachForm: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when the form is attached successfully. */\n    @Output()\n    success: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    forms: Form[];\n\n    formId: number;\n    disableSubmit: boolean = true;\n    selectedFormId: number;\n\n    attachFormControl: FormControl;\n\n    ngOnInit() {\n        this.attachFormControl = new FormControl('', Validators.required);\n        this.attachFormControl.valueChanges.subscribe( (currentValue) => {\n            if (this.attachFormControl.valid) {\n                if ( this.formId !== currentValue) {\n                    this.disableSubmit = false;\n                } else {\n                    this.disableSubmit = true;\n                }\n            }\n        });\n    }\n\n    ngOnChanges() {\n        this.formId = undefined;\n        this.disableSubmit = true;\n        this.loadFormsTask();\n        if (this.formKey) {\n            this.onFormAttached();\n        }\n    }\n\n    onCancelButtonClick(): void {\n        this.selectedFormId = this.formId;\n        this.cancelAttachForm.emit();\n    }\n\n    onRemoveButtonClick(): void {\n        this.taskService.deleteForm(this.taskId).subscribe(\n            () => {\n                this.formId = this.selectedFormId = null;\n                this.success.emit();\n            },\n            (err) => {\n                this.error.emit(err);\n                this.logService.error('An error occurred while trying to delete the form');\n            });\n    }\n\n    onAttachFormButtonClick(): void {\n        this.attachForm(this.taskId, this.selectedFormId);\n    }\n\n    private loadFormsTask(): void {\n        this.taskService.getFormList().subscribe((form: Form[]) => {\n                this.forms = form;\n            },\n            (err) => {\n                this.error.emit(err);\n                this.logService.error('An error occurred while trying to get the forms');\n            });\n    }\n\n    private onFormAttached() {\n        this.formService.getTaskForm(this.taskId)\n            .subscribe((res) => {\n                this.formService.getFormDefinitionByName(res.name).subscribe((formDef) => {\n                    this.formId = this.selectedFormId = formDef;\n                });\n            }, (err) => {\n                this.error.emit(err);\n                this.logService.error('Could not load forms');\n            });\n    }\n\n    private attachForm(taskId: string, formId: number) {\n        if (taskId && formId) {\n            this.taskService.attachFormToATask(taskId, formId)\n                .subscribe(() => {\n                    this.success.emit();\n                }, (err) => {\n                    this.error.emit(err);\n                    this.logService.error('Could not attach form');\n                });\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService, UploadService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessUploadService extends UploadService {\n\n    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n    getUploadPromise(file: any): any {\n        const opts = {\n            isRelatedContent: true\n        };\n        const processInstanceId = file.options.parentId;\n        const promise = this.apiService.getInstance().activiti.contentApi.createRelatedContentOnProcessInstance(processInstanceId, file.file, opts);\n\n        promise.catch((err) => this.handleError(err));\n\n        return promise;\n    }\n\n    private handleError(error: any) {\n        return throwError(error || 'Server error');\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService, UploadService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskUploadService extends UploadService {\n\n    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n    getUploadPromise(file: any): any {\n        const opts = {\n            isRelatedContent: true\n        };\n        const taskId = file.options.parentId;\n        const promise = this.apiService.getInstance().activiti.contentApi.createRelatedContentOnTask(taskId, file.file, opts);\n\n        promise.catch((err) => this.handleError(err));\n\n        return promise;\n    }\n\n    private handleError(error: any) {\n        return throwError(error || 'Server error');\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent of the StartTaskModel.\n */\nimport { UserProcessModel } from '@alfresco/adf-core';\n\nexport class StartTaskModel {\n\n    name: string;\n    description: string;\n    assignee: UserProcessModel;\n    dueDate: any;\n    formKey: any;\n    category: string;\n\n    constructor(obj?: any) {\n        this.name = obj && obj.name || null;\n        this.description = obj && obj.description || null;\n        this.assignee = obj && obj.assignee ? new UserProcessModel(obj.assignee) : null;\n        this.dueDate = obj && obj.dueDate || null;\n        this.formKey = obj && obj.formKey || null;\n        this.category = obj && obj.category || null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskDetailsModel } from './task-details.model';\n\nexport class TaskDetailsEvent {\n\n    private _value: TaskDetailsModel;\n    private _defaultPrevented: boolean = false;\n\n    get value(): TaskDetailsModel {\n        return this._value;\n    }\n\n    get defaultPrevented() {\n        return this._defaultPrevented;\n    }\n\n    constructor(value: TaskDetailsModel) {\n        this._value = value;\n    }\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent the User Event.\n */\nexport class UserEventModel {\n    type: string = '';\n    value: any = {};\n\n    constructor(obj?: any) {\n        this.type = obj && obj.type;\n        this.value = obj && obj.value || {};\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent the process service user group.*\n */\n\nexport class UserGroupModel {\n    id?: number;\n    name?: string;\n    externalId?: string;\n    status?: string;\n    groups?: any = {};\n\n    constructor(obj?: any) {\n        this.id = obj && obj.id;\n        this.name = obj && obj.name;\n        this.externalId = obj && obj.externalId;\n        this.status = obj && obj.status;\n        this.groups = obj && obj.groups;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MAT_LABEL_GLOBAL_OPTIONS, MatAutocompleteModule, MatButtonModule, MatCardModule, MatCheckboxModule,\n    MatChipsModule, MatDatepickerModule, MatDialogModule, MatGridListModule, MatIconModule,\n    MatInputModule, MatListModule, MatNativeDateModule, MatOptionModule, MatProgressSpinnerModule, MatRadioModule,\n    MatRippleModule, MatSelectModule, MatSlideToggleModule, MatTableModule, MatTabsModule,\n    MatTooltipModule, MatMenuModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,\n        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,\n        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,\n        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,\n        MatChipsModule, MatMenuModule\n    ];\n}\n\n@NgModule({\n    providers: [\n        {provide: MAT_LABEL_GLOBAL_OPTIONS, useValue: { float: 'never' }}\n    ],\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommentModel, CommentProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-process-instance-comments',\n    templateUrl: './process-comments.component.html',\n    styleUrls: ['./process-comments.component.scss']\n})\nexport class ProcessCommentsComponent implements OnChanges {\n\n    /** (**required**) The numeric ID of the process instance to display comments for. */\n    @Input()\n    processInstanceId: string;\n\n    /** Should the comments be read-only? */\n    @Input()\n    readOnly: boolean = true;\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    comments: CommentModel [] = [];\n\n    private commentObserver: Observer<CommentModel>;\n    comment$: Observable<CommentModel>;\n\n    message: string;\n\n    beingAdded: boolean = false;\n\n    constructor(private commentProcessService: CommentProcessService) {\n        this.comment$ = new Observable<CommentModel>((observer) =>  this.commentObserver = observer)\n            .pipe(share());\n        this.comment$.subscribe((comment: CommentModel) => {\n            this.comments.push(comment);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const processInstanceId = changes['processInstanceId'];\n        if (processInstanceId) {\n            if (processInstanceId.currentValue) {\n                this.getProcessInstanceComments(processInstanceId.currentValue);\n            } else {\n                this.resetComments();\n            }\n        }\n    }\n\n    private getProcessInstanceComments(processInstanceId: string): void {\n        this.resetComments();\n        if (processInstanceId) {\n            this.commentProcessService.getProcessInstanceComments(processInstanceId).subscribe(\n                (res: CommentModel[]) => {\n                    res = res.sort((comment1: CommentModel, comment2: CommentModel) => {\n                        const date1 = new Date(comment1.created);\n                        const date2 = new Date(comment2.created);\n                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;\n                    });\n                    res.forEach((comment) => {\n                        this.commentObserver.next(comment);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        }\n    }\n\n    private resetComments(): void {\n        this.comments = [];\n    }\n\n    add(): void {\n        if (this.message && this.message.trim() && !this.beingAdded) {\n            this.beingAdded = true;\n            this.commentProcessService.addProcessInstanceComment(this.processInstanceId, this.message)\n                .subscribe(\n                    (res: CommentModel) => {\n                        this.comments.unshift(res);\n                        this.message = '';\n                        this.beingAdded = false;\n\n                    },\n                    (err) => {\n                        this.error.emit(err);\n                        this.beingAdded = false;\n                    }\n                );\n        }\n    }\n\n    clear(): void {\n        this.message = '';\n    }\n\n    isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n    onError(error: any) {\n        this.error.emit(error);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { ProcessCommentsComponent } from './process-comments.component';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        CommonModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        ProcessCommentsComponent\n    ],\n    exports: [\n        ProcessCommentsComponent\n    ]\n})\nexport class ProcessCommentsModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogService, UserProcessModel } from '@alfresco/adf-core';\nimport { PeopleProcessService } from '@alfresco/adf-core';\nimport { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { UserEventModel } from '../../../task-list/models/user-event.model';\nimport { PeopleSearchComponent } from '../people-search/people-search.component';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-people',\n    templateUrl: './people.component.html',\n    styleUrls: ['./people.component.scss']\n})\nexport class PeopleComponent implements OnInit, AfterViewInit {\n\n    /** The array of User objects to display. */\n    @Input()\n    people: UserProcessModel[] = [];\n\n    /** The numeric ID of the task. */\n    @Input()\n    taskId: string = '';\n\n    /** Should the data be read-only? */\n    @Input()\n    readOnly: boolean = false;\n\n    @ViewChild('peopleSearch')\n    peopleSearch: PeopleSearchComponent;\n\n    showAssignment: boolean = false;\n\n    private peopleSearchObserver: Observer<UserProcessModel[]>;\n    peopleSearch$: Observable<UserProcessModel[]>;\n\n    constructor(private logService: LogService, public peopleProcessService: PeopleProcessService) {\n        this.peopleSearch$ = new Observable<UserProcessModel[]>((observer) => this.peopleSearchObserver = observer)\n            .pipe(\n                share()\n            );\n    }\n\n    ngOnInit() {\n    }\n\n    ngAfterViewInit() {\n    }\n\n    involveUserAndCloseSearch() {\n        if (this.peopleSearch) {\n            this.peopleSearch.involveUserAndClose();\n        }\n    }\n\n    involveUserWithoutCloseSearch() {\n        if (this.peopleSearch) {\n            this.peopleSearch.involveUser();\n        }\n    }\n\n    searchUser(searchedWord: string) {\n        this.peopleProcessService.getWorkflowUsers(this.taskId, searchedWord)\n            .subscribe((users) => {\n                this.peopleSearchObserver.next(users);\n            }, (error) => this.logService.error(error));\n    }\n\n    involveUser(user: UserProcessModel) {\n        if (user && user.id) {\n            this.peopleProcessService.involveUserWithTask(this.taskId, user.id.toString())\n                .subscribe(() => {\n                    this.people = [...this.people, user];\n                }, (error) => this.logService.error('Impossible to involve user with task'));\n        }\n    }\n\n    removeInvolvedUser(user: UserProcessModel) {\n        this.peopleProcessService.removeInvolvedUser(this.taskId, user.id.toString())\n            .subscribe(() => {\n                this.people = this.people.filter((involvedUser) => {\n                    return involvedUser.id !== user.id;\n                });\n            }, (error) => this.logService.error('Impossible to remove involved user from task'));\n    }\n\n    getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n\n    getInitialUserName(firstName: string, lastName: string) {\n        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');\n        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');\n        return this.getDisplayUser(firstName, lastName, '');\n    }\n\n    onAddAssignment() {\n        this.showAssignment = true;\n    }\n\n    onClickAction(event: UserEventModel) {\n        if (event.type === 'remove') {\n            this.removeInvolvedUser(event.value);\n        }\n    }\n\n    hasPeople() {\n        return this.people && this.people.length > 0;\n    }\n\n    isEditMode() {\n        return !this.readOnly;\n    }\n\n    onCloseSearch() {\n        this.showAssignment = false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataTableComponent } from '@alfresco/adf-core';\nimport { DataColumnListComponent, UserProcessModel } from '@alfresco/adf-core';\nimport { AfterContentInit, AfterViewInit, Component, ContentChild, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { UserEventModel } from '../../../task-list/models/user-event.model';\n\n@Component({\n    selector: 'adf-people-list',\n    templateUrl: './people-list.component.html',\n    styleUrls: ['./people-list.component.scss']\n})\n\nexport class PeopleListComponent implements AfterViewInit, AfterContentInit {\n\n    @ContentChild(DataColumnListComponent) columnList: DataColumnListComponent;\n\n    @ViewChild('dataTable')\n    peopleDataTable: DataTableComponent;\n\n    /** The array of user data used to populate the people list. */\n    @Input()\n    users: UserProcessModel[];\n\n    /** Toggles whether or not actions should be visible, i.e. the 'Three-Dots' menu. */\n    @Input()\n    actions: boolean = false;\n\n    /** Emitted when the user clicks a row in the people list. */\n    @Output()\n    clickRow: EventEmitter<UserProcessModel> = new EventEmitter<UserProcessModel>();\n\n    /** Emitted when the user clicks in the 'Three Dots' drop down menu for a row. */\n    @Output()\n    clickAction: EventEmitter<UserEventModel> = new EventEmitter<UserEventModel>();\n\n    user: UserProcessModel;\n\n    ngAfterContentInit() {\n        this.peopleDataTable.columnList = this.columnList;\n    }\n\n    ngAfterViewInit() {\n    }\n\n    selectUser(event: any) {\n        this.user = event.value.obj;\n        this.clickRow.emit(this.user);\n    }\n\n    hasActions(): boolean {\n        return this.actions;\n    }\n\n    onShowRowActionsMenu(event: any) {\n\n        const removeAction = {\n            title: 'Remove',\n            name: 'remove'\n        };\n\n        event.value.actions = [\n            removeAction\n        ];\n    }\n\n    onExecuteRowAction(event: any) {\n        const args = event.value;\n        const action = args.action;\n        this.clickAction.emit(new UserEventModel({type: action.name, value: args.row.obj}));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserProcessModel } from '@alfresco/adf-core';\nimport { Component, EventEmitter, OnInit, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PerformSearchCallback } from '../../interfaces/perform-search-callback.interface';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-people-search',\n    templateUrl: './people-search.component.html',\n    styleUrls: ['./people-search.component.scss'],\n    host: {\n        'class': 'adf-people-search'\n    },\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class PeopleSearchComponent implements OnInit {\n\n    /** Parameters for displaying the list. */\n    @Input()\n    results: Observable<UserProcessModel[]>;\n\n    /** Emitted when a search is performed with a new keyword. */\n    @Output()\n    searchPeople: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when a user is selected and the action button is clicked. */\n    @Output()\n    success: EventEmitter<UserProcessModel> = new EventEmitter<UserProcessModel>();\n\n    /** Emitted when the \"close\" button is clicked. */\n    @Output()\n    closeSearch = new EventEmitter();\n\n    filteredResults$: Observable<UserProcessModel[]>;\n    selectedUser: UserProcessModel = {};\n    performSearch: PerformSearchCallback;\n\n    constructor() {}\n\n    ngOnInit() {\n        this.filteredResults$ = this.results\n            .pipe(\n                map((users) => {\n                    return users.filter((user) => user.id !== this.selectedUser.id);\n                })\n            );\n        this.performSearch = this.performSearchCallback.bind(this);\n    }\n\n    private performSearchCallback(event): Observable<UserProcessModel[]> {\n        this.searchPeople.emit(event);\n        return this.filteredResults$;\n    }\n\n    onRowClick(user: UserProcessModel) {\n        this.selectedUser = user;\n    }\n\n    closeSearchList() {\n        this.closeSearch.emit();\n    }\n\n    involveUserAndClose() {\n        this.involveUser();\n        this.closeSearchList();\n    }\n\n    involveUser() {\n        if (this.selectedUser === undefined) {\n            return;\n        }\n        this.success.emit(this.selectedUser);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n    firstName = (firstName !== null ? firstName : '');\n    lastName = (lastName !== null ? lastName : '');\n    return firstName + delimiter + lastName;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserProcessModel, TranslationService, PeopleProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { PerformSearchCallback } from '../../interfaces/perform-search-callback.interface';\nimport { getDisplayUser } from '../../helpers/getDisplayUser';\n\n@Component({\n    selector: 'adf-people-search-field',\n    templateUrl: './people-search-field.component.html',\n    styleUrls: ['./people-search-field.component.scss'],\n    host: { 'class': 'adf-people-search-field' },\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class PeopleSearchFieldComponent {\n\n    @Input()\n    performSearch: PerformSearchCallback;\n\n    @Input()\n    placeholder: string;\n\n    @Output()\n    rowClick: EventEmitter<UserProcessModel> = new EventEmitter<UserProcessModel>();\n\n    users$: Observable<UserProcessModel[]>;\n    searchUser: FormControl = new FormControl();\n\n    defaultPlaceholder = 'ADF_TASK_LIST.PEOPLE.SEARCH_USER';\n\n    constructor(public peopleProcessService: PeopleProcessService,\n                private translationService: TranslationService) {\n        this.users$ = this.searchUser.valueChanges\n            .pipe(\n                debounceTime(200),\n                switchMap((searchWord: string) => {\n                    if (searchWord && searchWord.trim()) {\n                        return this.performSearch(searchWord);\n                    } else {\n                        return of([]);\n                    }\n                })\n            );\n\n        this.defaultPlaceholder = this.translationService.instant(this.defaultPlaceholder);\n    }\n\n    public reset() {\n        this.searchUser.reset();\n    }\n\n    get searchPlaceholder() {\n        return this.placeholder || this.defaultPlaceholder;\n    }\n\n    onRowClick(event) {\n        this.rowClick.emit(event);\n    }\n\n    getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        return getDisplayUser(firstName, lastName, delimiter);\n    }\n\n    getInitialUserName(firstName: string, lastName: string) {\n        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');\n        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');\n        return this.getDisplayUser(firstName, lastName, '');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewChild, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';\nimport { PerformSearchCallback } from '../../interfaces/perform-search-callback.interface';\nimport { PeopleProcessService, UserProcessModel, LogService, TranslationService } from '@alfresco/adf-core';\nimport { PeopleSearchFieldComponent } from '../people-search-field/people-search-field.component';\nimport { getDisplayUser } from '../../helpers/getDisplayUser';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nconst DEFAULT_ASSIGNEE_PLACEHOLDER = 'ADF_TASK_LIST.PEOPLE.ASSIGNEE';\n\n@Component({\n    selector: 'adf-people-selector',\n    templateUrl: './people-selector.component.html',\n    styleUrls: ['./people-selector.component.scss'],\n    host: { 'class': 'adf-people-selector' },\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class PeopleSelectorComponent {\n\n    @Input()\n    peopleId: UserProcessModel;\n\n    // Poorly documented Angular magic for [(peopleId)]\n    @Output()\n    peopleIdChange: EventEmitter<number>;\n\n    @ViewChild('peopleSearchField')\n    searchFieldComponent: PeopleSearchFieldComponent;\n\n    performSearch: PerformSearchCallback;\n    selectedUser: UserProcessModel;\n    defaultPlaceholder: string;\n\n    constructor(\n        private peopleProcessService: PeopleProcessService,\n        private logService: LogService,\n        private translationService: TranslationService) {\n\n        this.peopleIdChange = new EventEmitter();\n        this.performSearch = this.searchUser.bind(this);\n        this.defaultPlaceholder = this.translationService.instant(DEFAULT_ASSIGNEE_PLACEHOLDER);\n    }\n\n    searchUser(searchWord: string): Observable<{} | UserProcessModel[]> {\n        return this.peopleProcessService.getWorkflowUsers(undefined, searchWord)\n            .pipe(\n                catchError(this.onSearchUserError.bind(this))\n            );\n    }\n\n    private onSearchUserError(): Observable<UserProcessModel[]> {\n        this.logService.error('getWorkflowUsers threw error');\n        return of([]);\n    }\n\n    userSelected(user: UserProcessModel): void {\n        this.updateUserSelection(user);\n    }\n\n    userDeselected(): void {\n        this.updateUserSelection(undefined);\n    }\n\n    private updateUserSelection(user: UserProcessModel): void {\n        this.selectedUser = user;\n        this.peopleIdChange.emit(user && user.id || undefined);\n        this.searchFieldComponent.reset();\n    }\n\n    get placeholder() {\n        if (!this.selectedUser) {\n            return this.defaultPlaceholder;\n        }\n\n        return getDisplayUser(this.selectedUser.firstName, this.selectedUser.lastName, ' ');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive } from '@angular/core';\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({ selector: 'adf-people-search-action-label, people-search-action-label' })\nexport class PeopleSearchActionLabelDirective { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive } from '@angular/core';\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({ selector: 'adf-people-search-title, people-search-title' })\nexport class PeopleSearchTitleDirective { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { PeopleComponent } from './components/people/people.component';\nimport { PeopleListComponent } from './components/people-list/people-list.component';\nimport { PeopleSearchComponent } from './components/people-search/people-search.component';\nimport { PeopleSearchFieldComponent } from './components/people-search-field/people-search-field.component';\nimport { PeopleSelectorComponent } from './components/people-selector/people-selector.component';\n\nimport { PeopleSearchActionLabelDirective } from './directives/people-search-action-label.directive';\nimport { PeopleSearchTitleDirective } from './directives/people-search-title.directive';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        CommonModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        PeopleComponent,\n        PeopleSearchComponent,\n        PeopleSearchFieldComponent,\n        PeopleSelectorComponent,\n        PeopleSearchTitleDirective,\n        PeopleSearchActionLabelDirective,\n        PeopleListComponent\n    ],\n    exports: [\n        PeopleComponent,\n        PeopleSearchComponent,\n        PeopleSearchFieldComponent,\n        PeopleSelectorComponent,\n        PeopleSearchTitleDirective,\n        PeopleSearchActionLabelDirective,\n        PeopleListComponent\n    ]\n})\nexport class PeopleModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { ExternalAlfrescoApiService, AlfrescoApiService, AuthenticationService, LoginDialogPanelComponent, SitesService, SearchService } from '@alfresco/adf-core';\nimport { DocumentListService, ContentNodeSelectorService } from '@alfresco/adf-content-services';\nimport { AttachFileWidgetDialogComponentData } from './attach-file-widget-dialog-component.interface';\nimport { Node } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-attach-file-widget-dialog',\n    templateUrl: './attach-file-widget-dialog.component.html',\n    styleUrls: ['./attach-file-widget-dialog.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [ AuthenticationService,\n                 DocumentListService,\n                 SitesService,\n                 ContentNodeSelectorService,\n                 SearchService,\n                 { provide: AlfrescoApiService, useClass: ExternalAlfrescoApiService} ]\n})\nexport class AttachFileWidgetDialogComponent {\n\n    @ViewChild('adfLoginPanel')\n    loginPanel: LoginDialogPanelComponent;\n\n    chosenNode: Node[];\n    buttonActionName;\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: AttachFileWidgetDialogComponentData,\n                private externalApiService: AlfrescoApiService) {\n        (<any> externalApiService).init(data.ecmHost, data.context);\n        this.buttonActionName = data.actionName ? `ATTACH-FILE.ACTIONS.${data.actionName.toUpperCase()}` : 'ATTACH-FILE.ACTIONS.CHOOSE';\n    }\n\n    isLoggedIn() {\n        return this.externalApiService.getInstance().isLoggedIn();\n    }\n\n    performLogin() {\n        this.loginPanel.submitForm();\n    }\n\n    close() {\n        this.data.selected.complete();\n    }\n\n    onSelect(nodeList: Node[]) {\n        if (nodeList && nodeList[0].isFile) {\n            this.chosenNode = nodeList;\n        } else {\n            this.chosenNode = null;\n        }\n    }\n\n    onClick(event: any) {\n        this.data.selected.next(this.chosenNode);\n        this.data.selected.complete();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { AttachFileWidgetDialogComponentData } from './attach-file-widget-dialog-component.interface';\nimport { Node } from '@alfresco/js-api';\nimport { AttachFileWidgetDialogComponent } from './attach-file-widget-dialog.component';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AttachFileWidgetDialogService {\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private dialog: MatDialog) {\n    }\n\n    /**\n     * Opens a dialog to choose a file to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry Item to upload\n     * @returns Information about the chosen file(s)\n     */\n    openLogin(ecmHost: string, actionName?: string, context?: string): Observable<Node[]> {\n        const titleString: string = `Please log in for ${ecmHost}`;\n        const selected = new Subject<Node[]>();\n        selected.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: AttachFileWidgetDialogComponentData = {\n            title : titleString,\n            actionName,\n            selected,\n            ecmHost,\n            context,\n            isSelectionValid: this.isNodeFile.bind(this)\n        };\n\n        this.openLoginDialog(data, 'adf-attach-file-widget-dialog', '630px');\n        return selected;\n    }\n\n    private openLoginDialog(data: AttachFileWidgetDialogComponentData, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(AttachFileWidgetDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    /** Closes the currently open dialog. */\n    close() {\n        this.dialog.closeAll();\n    }\n\n    private isNodeFile(entry: Node): boolean {\n        return entry.isFile;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector */\n\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport {\n    UploadWidgetComponent,\n    FormService,\n    LogService,\n    ThumbnailService,\n    ProcessContentService,\n    ActivitiContentService,\n    ContentService,\n    FormEvent,\n    AppConfigValues,\n    AppConfigService\n} from '@alfresco/adf-core';\nimport { ContentNodeDialogService } from '@alfresco/adf-content-services';\nimport { Node, RelatedContentRepresentation } from '@alfresco/js-api';\nimport { from, zip, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { AttachFileWidgetDialogService } from './attach-file-widget-dialog.service';\n\n@Component({\n    selector: 'attach-widget',\n    templateUrl: './attach-file-widget.component.html',\n    styleUrls: ['./attach-file-widget.component.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class AttachFileWidgetComponent extends UploadWidgetComponent implements OnInit {\n\n    repositoryList = [];\n    private tempFilesList = [];\n\n    constructor(public formService: FormService,\n                private logger: LogService,\n                public thumbnails: ThumbnailService,\n                public processContentService: ProcessContentService,\n                private activitiContentService: ActivitiContentService,\n                private contentService: ContentService,\n                private contentDialog: ContentNodeDialogService,\n                private appConfigService: AppConfigService,\n                private attachDialogService: AttachFileWidgetDialogService) {\n        super(formService, logger, thumbnails, processContentService);\n    }\n\n    ngOnInit() {\n        if (this.field &&\n            this.field.value &&\n            this.field.value.length > 0) {\n            this.hasFile = true;\n        }\n        this.getMultipleFileParam();\n\n        this.activitiContentService.getAlfrescoRepositories(null, true).subscribe((repoList) => {\n            this.repositoryList = repoList;\n        });\n\n        this.formService.taskSaved.subscribe((formSaved: FormEvent) => {\n            if (formSaved.form.id === this.field.form.id) {\n                this.tempFilesList = [];\n            }\n        });\n    }\n\n    isFileSourceConfigured(): boolean {\n        return !!this.field.params && !!this.field.params.fileSource;\n    }\n\n    isMultipleSourceUpload(): boolean {\n        return !this.field.readOnly && this.isFileSourceConfigured() && !this.isOnlyLocalSourceSelected();\n    }\n\n    isAllFileSourceSelected(): boolean {\n        return this.field.params &&\n            this.field.params.fileSource &&\n            this.field.params.fileSource.serviceId === 'all-file-sources';\n    }\n\n    isOnlyLocalSourceSelected(): boolean {\n        return this.field.params &&\n            this.field.params.fileSource &&\n            this.field.params.fileSource.serviceId === 'local-file';\n    }\n\n    isSimpleUploadButton(): boolean {\n        return this.isUploadButtonVisible() &&\n            !this.isFileSourceConfigured() ||\n            this.isOnlyLocalSourceSelected();\n    }\n\n    isUploadButtonVisible(): boolean {\n        return (!this.hasFile || this.multipleOption) && !this.field.readOnly;\n    }\n\n    isDefinedSourceFolder(): boolean {\n        return !!this.field.params &&\n            !!this.field.params.fileSource &&\n            !!this.field.params.fileSource.selectedFolder;\n    }\n\n    isTemporaryFile(file): boolean {\n        return this.tempFilesList.findIndex((elem) => elem.name === file.name) >= 0;\n    }\n\n    openSelectDialogFromFileSource() {\n        const params = this.field.params;\n        if (this.isDefinedSourceFolder()) {\n            this.contentDialog.openFileBrowseDialogByFolderId(params.fileSource.selectedFolder.pathId).subscribe(\n                (selections: Node[]) => {\n                    this.tempFilesList.push(...selections);\n                    this.uploadFileFromCS(selections,\n                        this.field.params.fileSource.selectedFolder.accountId,\n                        this.field.params.fileSource.selectedFolder.siteId);\n                });\n        }\n    }\n\n    onAttachFileChanged(event: any) {\n        this.tempFilesList.push(...Array.from(event.target.files));\n        this.onFileChanged(event);\n    }\n\n    onRemoveAttachFile(file: File | RelatedContentRepresentation) {\n        if (this.isTemporaryFile(file)) {\n            this.tempFilesList.splice(this.tempFilesList.indexOf((<RelatedContentRepresentation> file).contentBlob), 1);\n        }\n        this.removeFile(file);\n    }\n\n    onAttachFileClicked(file: any) {\n        if (file.isExternal) {\n            this.logger.info(`The file ${file.name} comes from an external source and cannot be showed at this moment`);\n            return;\n        }\n        if (this.isTemporaryFile(file)) {\n            this.formService.formContentClicked.next(file);\n        } else {\n            this.fileClicked(file);\n        }\n    }\n\n    downloadContent(file: any | RelatedContentRepresentation): void {\n        if (this.isTemporaryFile(file)) {\n            this.contentService.downloadBlob((<RelatedContentRepresentation> file).contentBlob, file.name);\n        } else {\n            this.processContentService.getFileRawContent((<any> file).id).subscribe(\n                (blob: Blob) => {\n                    this.contentService.downloadBlob(blob, (<any> file).name);\n                },\n                (err) => {\n                    this.logger.error('Impossible retrieve content for download');\n                }\n            );\n        }\n    }\n\n    openSelectDialog(repository) {\n        const accountIdentifier = 'alfresco-' + repository.id + '-' + repository.name;\n        const currentECMHost = this.getDomainHost(this.appConfigService.get(AppConfigValues.ECMHOST));\n        const chosenRepositoryHost = this.getDomainHost(repository.repositoryUrl);\n        if (chosenRepositoryHost !== currentECMHost) {\n            const formattedRepositoryHost = repository.repositoryUrl.replace('/alfresco', '');\n            this.attachDialogService.openLogin(formattedRepositoryHost).subscribe(\n                (selections: any[]) => {\n                    selections.forEach((node) => node.isExternal = true);\n                    this.tempFilesList.push(...selections);\n                    this.uploadFileFromCS(selections, accountIdentifier);\n                });\n        } else {\n            this.contentDialog.openFileBrowseDialogBySite().subscribe(\n                (selections: Node[]) => {\n                    this.tempFilesList.push(...selections);\n                    this.uploadFileFromCS(selections, accountIdentifier);\n                });\n        }\n    }\n\n    private uploadFileFromCS(fileNodeList: any[], accountId: string, siteId?: string) {\n        const filesSaved = [];\n        from(fileNodeList).pipe(\n            mergeMap((node) =>\n                zip(\n                    of(node.content.mimeType),\n                    this.activitiContentService.applyAlfrescoNode(node, siteId, accountId),\n                    of(node.isExternal)\n                )\n            )\n        )\n            .subscribe(([mimeType, res, isExternal]) => {\n                    res.mimeType = mimeType;\n                    res.isExternal = isExternal;\n                    filesSaved.push(res);\n                },\n                (error) => {\n                    this.logger.error(error);\n                },\n                () => {\n                    this.field.value = filesSaved;\n                    this.field.json.value = filesSaved;\n                    this.hasFile = true;\n                });\n    }\n\n    private getDomainHost(urlToCheck) {\n        const result = urlToCheck.match('^(?:https?:\\/\\/)?(?:[^@\\/\\n]+@)?(?:www\\.)?([^:\\/?\\n]+)');\n        return result[1];\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector*/\n\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport {\n    WidgetComponent,\n    FormService,\n    NodesApiService\n} from '@alfresco/adf-core';\nimport { ContentNodeDialogService } from '@alfresco/adf-content-services';\nimport { Node } from '@alfresco/js-api';\n\n@Component({\n    selector: 'attach-folder-widget',\n    templateUrl: './attach-folder-widget.component.html',\n    styleUrls: ['./attach-folder-widget.component.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class AttachFolderWidgetComponent extends WidgetComponent implements OnInit {\n\n    hasFolder: boolean = false;\n    selectedFolderName: string = '';\n\n    constructor(private contentDialog: ContentNodeDialogService,\n                public formService: FormService,\n                private nodeService: NodesApiService) {\n        super();\n    }\n\n    ngOnInit() {\n        if (this.field &&\n            this.field.value) {\n            this.hasFolder = true;\n            this.nodeService.getNode(this.field.value).subscribe((node: Node) => {\n                this.selectedFolderName = node.name;\n            });\n        }\n    }\n\n    isDefinedSourceFolder(): boolean {\n        return !!this.field.params &&\n            !!this.field.params.folderSource &&\n            !!this.field.params.folderSource.selectedFolder;\n    }\n\n    openSelectDialogFromFileSource() {\n        const params = this.field.params;\n        if (this.isDefinedSourceFolder()) {\n            this.contentDialog.openFolderBrowseDialogByFolderId(params.folderSource.selectedFolder.pathId).subscribe(\n                (selections: Node[]) => {\n                    this.selectedFolderName = selections[0].name;\n                    this.field.value = selections[0].id;\n                    this.hasFolder = true;\n                });\n        } else {\n            this.contentDialog.openFolderBrowseDialogBySite().subscribe(\n                (selections: Node[]) => {\n                    this.selectedFolderName = selections[0].name;\n                    this.field.value = selections[0].id;\n                    this.hasFolder = true;\n                });\n        }\n    }\n\n    removeFolder() {\n        this.field.value = null;\n        this.selectedFolderName = '';\n        this.hasFolder = false;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ContentNodeSelectorModule } from '@alfresco/adf-content-services';\n\nimport { AttachFileWidgetComponent } from './attach-file-widget.component';\nimport { AttachFolderWidgetComponent } from './attach-folder-widget.component';\nimport { AttachFileWidgetDialogComponent } from './attach-file-widget-dialog.component';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        ContentNodeSelectorModule,\n        MaterialModule\n    ],\n    entryComponents: [\n        AttachFileWidgetComponent,\n        AttachFolderWidgetComponent,\n        AttachFileWidgetDialogComponent\n    ],\n    declarations: [\n        AttachFileWidgetComponent,\n        AttachFolderWidgetComponent,\n        AttachFileWidgetDialogComponent\n    ],\n    exports: [\n        AttachFileWidgetComponent,\n        AttachFolderWidgetComponent,\n        AttachFileWidgetDialogComponent\n    ]\n})\nexport class ContentWidgetModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component, EventEmitter, Input, Output, ViewEncapsulation, SimpleChanges, OnInit, OnDestroy, OnChanges\n} from '@angular/core';\nimport { AttachFileWidgetComponent, AttachFolderWidgetComponent } from '../content-widget';\nimport { EcmModelService, NodeService, WidgetVisibilityService,\n    FormService, FormRenderingService, FormBaseComponent, FormOutcomeModel,\n    ValidateFormEvent, FormEvent, FormErrorEvent, FormFieldModel,\n    FormModel, FormOutcomeEvent, FormValues, ContentLinkModel } from '@alfresco/adf-core';\n\nimport { Observable, of, Subscription } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-form',\n    templateUrl: './form.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent extends FormBaseComponent implements OnInit, OnDestroy, OnChanges {\n\n    /** Underlying form model instance. */\n    @Input()\n    form: FormModel;\n\n    /** Task id to fetch corresponding form and values. */\n    @Input()\n    taskId: string;\n\n    /** Content Services node ID for the form metadata. */\n    @Input()\n    nodeId: string;\n\n    /** The id of the form definition to load and display with custom values. */\n    @Input()\n    formId: number;\n\n    /** Name of the form definition to load and display with custom values. */\n    @Input()\n    formName: string;\n\n    /** Toggle saving of form metadata. */\n    @Input()\n    saveMetadata: boolean = false;\n\n    /** Custom form values map to be used with the rendered form. */\n    @Input()\n    data: FormValues;\n\n    /** Emitted when the form is submitted with the `Save` or custom outcomes. */\n    @Output()\n    formSaved: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    /** Emitted when the form is submitted with the `Complete` outcome. */\n    @Output()\n    formCompleted: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    /** Emitted when form content is clicked. */\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    /** Emitted when the form is loaded or reloaded. */\n    @Output()\n    formLoaded: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    /** Emitted when form values are refreshed due to a data property change. */\n    @Output()\n    formDataRefreshed: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    debugMode: boolean = false;\n\n    protected subscriptions: Subscription[] = [];\n\n    constructor(protected formService: FormService,\n                protected visibilityService: WidgetVisibilityService,\n                protected ecmModelService: EcmModelService,\n                protected nodeService: NodeService,\n                protected formRenderingService: FormRenderingService) {\n        super();\n        this.formRenderingService.setComponentTypeResolver('upload', () => AttachFileWidgetComponent, true);\n        this.formRenderingService.setComponentTypeResolver('select-folder', () => AttachFolderWidgetComponent, true);\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(\n            this.formService.formContentClicked.subscribe((content: ContentLinkModel) => {\n                this.formContentClicked.emit(content);\n            }),\n            this.formService.validateForm.subscribe((validateFormEvent: ValidateFormEvent) => {\n                if (validateFormEvent.errorsField.length > 0) {\n                    this.formError.next(validateFormEvent.errorsField);\n                }\n            })\n        );\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const taskId = changes['taskId'];\n        if (taskId && taskId.currentValue) {\n            this.getFormByTaskId(taskId.currentValue);\n            return;\n        }\n\n        const formId = changes['formId'];\n        if (formId && formId.currentValue) {\n            this.getFormDefinitionByFormId(formId.currentValue);\n            return;\n        }\n\n        const formName = changes['formName'];\n        if (formName && formName.currentValue) {\n            this.getFormDefinitionByFormName(formName.currentValue);\n            return;\n        }\n\n        const nodeId = changes['nodeId'];\n        if (nodeId && nodeId.currentValue) {\n            this.loadFormForEcmNode(nodeId.currentValue);\n            return;\n        }\n\n        const data = changes['data'];\n        if (data && data.currentValue) {\n            this.refreshFormData();\n            return;\n        }\n    }\n\n    /**\n     * Invoked when user clicks form refresh button.\n     */\n    onRefreshClicked() {\n        this.loadForm();\n    }\n\n    loadForm() {\n        if (this.taskId) {\n            this.getFormByTaskId(this.taskId);\n            return;\n        }\n\n        if (this.formId) {\n            this.getFormDefinitionByFormId(this.formId);\n            return;\n        }\n\n        if (this.formName) {\n            this.getFormDefinitionByFormName(this.formName);\n            return;\n        }\n    }\n\n    findProcessVariablesByTaskId(taskId: string): Observable<any> {\n        return this.formService.getTask(taskId).pipe(\n            switchMap((task: any) => {\n                if (this.isAProcessTask(task)) {\n                    return this.visibilityService.getTaskProcessVariable(taskId);\n                } else {\n                    return of({});\n                }\n            })\n        );\n    }\n\n    isAProcessTask(taskRepresentation) {\n        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';\n    }\n\n    getFormByTaskId(taskId: string): Promise<FormModel> {\n        return new Promise<FormModel>((resolve, reject) => {\n            this.findProcessVariablesByTaskId(taskId).subscribe((processVariables) => {\n                this.formService\n                    .getTaskForm(taskId)\n                    .subscribe(\n                        (form) => {\n                            const parsedForm = this.parseForm(form);\n                            this.visibilityService.refreshVisibility(parsedForm);\n                            parsedForm.validateForm();\n                            this.form = parsedForm;\n                            this.onFormLoaded(this.form);\n                            resolve(this.form);\n                        },\n                        (error) => {\n                            this.handleError(error);\n                            // reject(error);\n                            resolve(null);\n                        }\n                    );\n            });\n        });\n    }\n\n    getFormDefinitionByFormId(formId: number) {\n        this.formService\n            .getFormDefinitionById(formId)\n            .subscribe(\n                (form) => {\n                    this.formName = form.name;\n                    this.form = this.parseForm(form);\n                    this.visibilityService.refreshVisibility(this.form);\n                    this.form.validateForm();\n                    this.onFormLoaded(this.form);\n                },\n                (error) => {\n                    this.handleError(error);\n                }\n            );\n    }\n\n    getFormDefinitionByFormName(formName: string) {\n        this.formService\n            .getFormDefinitionByName(formName)\n            .subscribe(\n                (id) => {\n                    this.formService.getFormDefinitionById(id).subscribe(\n                        (form) => {\n                            this.form = this.parseForm(form);\n                            this.visibilityService.refreshVisibility(this.form);\n                            this.form.validateForm();\n                            this.onFormLoaded(this.form);\n                        },\n                        (error) => {\n                            this.handleError(error);\n                        }\n                    );\n                },\n                (error) => {\n                    this.handleError(error);\n                }\n            );\n    }\n\n    saveTaskForm() {\n        if (this.form && this.form.taskId) {\n            this.formService\n                .saveTaskForm(this.form.taskId, this.form.values)\n                .subscribe(\n                    () => {\n                        this.onTaskSaved(this.form);\n                        this.storeFormAsMetadata();\n                    },\n                    (error) => this.onTaskSavedError(this.form, error)\n                );\n        }\n    }\n\n    completeTaskForm(outcome?: string) {\n        if (this.form && this.form.taskId) {\n            this.formService\n                .completeTaskForm(this.form.taskId, this.form.values, outcome)\n                .subscribe(\n                    () => {\n                        this.onTaskCompleted(this.form);\n                        this.storeFormAsMetadata();\n                    },\n                    (error) => this.onTaskCompletedError(this.form, error)\n                );\n        }\n    }\n\n    handleError(err: any): any {\n        this.error.emit(err);\n    }\n\n    parseForm(formRepresentationJSON: any): FormModel {\n        if (formRepresentationJSON) {\n            const form = new FormModel(formRepresentationJSON, this.data, this.readOnly, this.formService);\n            if (!formRepresentationJSON.fields) {\n                form.outcomes = this.getFormDefinitionOutcomes(form);\n            }\n            if (this.fieldValidators && this.fieldValidators.length > 0) {\n                form.fieldValidators = this.fieldValidators;\n            }\n            return form;\n        }\n        return null;\n    }\n\n    /**\n     * Get custom set of outcomes for a Form Definition.\n     * @param form Form definition model.\n     */\n    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[] {\n        return [\n            new FormOutcomeModel(form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })\n        ];\n    }\n\n    checkVisibility(field: FormFieldModel) {\n        if (field && field.form) {\n            this.visibilityService.refreshVisibility(field.form);\n        }\n    }\n\n    private refreshFormData() {\n        this.form = this.parseForm(this.form.json);\n        this.onFormLoaded(this.form);\n        this.onFormDataRefreshed(this.form);\n    }\n\n    private loadFormForEcmNode(nodeId: string): void {\n        this.nodeService.getNodeMetadata(nodeId).subscribe((data) => {\n                this.data = data.metadata;\n                this.loadFormFromActiviti(data.nodeType);\n            },\n            this.handleError);\n    }\n\n    loadFormFromActiviti(nodeType: string): any {\n        this.formService.searchFrom(nodeType).subscribe(\n            (form) => {\n                if (!form) {\n                    this.formService.createFormFromANode(nodeType).subscribe((formMetadata) => {\n                        this.loadFormFromFormId(formMetadata.id);\n                    });\n                } else {\n                    this.loadFormFromFormId(form.id);\n                }\n            },\n            (error) => {\n                this.handleError(error);\n            }\n        );\n    }\n\n    private loadFormFromFormId(formId: number) {\n        this.formId = formId;\n        this.loadForm();\n    }\n\n    protected storeFormAsMetadata() {\n        if (this.saveMetadata) {\n            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe((type) => {\n                    this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, EcmModelService.MODEL_NAMESPACE, this.form.values, this.path, this.nameNode);\n                },\n                (error) => {\n                    this.handleError(error);\n                }\n            );\n        }\n    }\n\n    protected onFormLoaded(form: FormModel) {\n        this.formLoaded.emit(form);\n        this.formService.formLoaded.next(new FormEvent(form));\n    }\n\n    protected onFormDataRefreshed(form: FormModel) {\n        this.formDataRefreshed.emit(form);\n        this.formService.formDataRefreshed.next(new FormEvent(form));\n    }\n\n    protected onTaskSaved(form: FormModel) {\n        this.formSaved.emit(form);\n        this.formService.taskSaved.next(new FormEvent(form));\n    }\n\n    protected onTaskSavedError(form: FormModel, error: any) {\n        this.handleError(error);\n        this.formService.taskSavedError.next(new FormErrorEvent(form, error));\n    }\n\n    protected onTaskCompleted(form: FormModel) {\n        this.formCompleted.emit(form);\n        this.formService.taskCompleted.next(new FormEvent(form));\n    }\n\n    protected onTaskCompletedError(form: FormModel, error: any) {\n        this.handleError(error);\n        this.formService.taskCompletedError.next(new FormErrorEvent(form, error));\n    }\n\n    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean {\n        const args = new FormOutcomeEvent(outcome);\n\n        this.formService.executeOutcome.next(args);\n        if (args.defaultPrevented) {\n            return false;\n        }\n\n        this.executeOutcome.emit(args);\n        if (args.defaultPrevented) {\n            return false;\n        }\n\n        return true;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation,\n    OnDestroy\n} from '@angular/core';\nimport { FormComponent } from './form.component';\nimport { ContentLinkModel, FormService, WidgetVisibilityService, FormRenderingService, ValidateFormEvent, FormOutcomeModel } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-start-form',\n    templateUrl: './start-form.component.html',\n    styleUrls: ['./start-form.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartFormComponent extends FormComponent implements OnChanges, OnInit, OnDestroy {\n\n    /** Definition ID of the process to start. */\n    @Input()\n    processDefinitionId: string;\n\n    /** Process ID of the process to start. */\n    @Input()\n    processId: string;\n\n    /** Should form outcome buttons be shown? */\n    @Input()\n    showOutcomeButtons: boolean = true;\n\n    /** Should the refresh button be shown? */\n    @Input()\n    showRefreshButton: boolean = true;\n\n    /** Is the form read-only (ie, can't be edited)? */\n    @Input()\n    readOnlyForm: boolean = false;\n\n    /** Emitted when the user clicks one of the outcome buttons that completes the form. */\n    @Output()\n    outcomeClick: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when a field of the form is clicked. */\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    @ViewChild('outcomesContainer', {})\n    outcomesContainer: ElementRef = null;\n\n    constructor(formService: FormService,\n                visibilityService: WidgetVisibilityService,\n                formRenderingService: FormRenderingService) {\n        super(formService, visibilityService, null, null, formRenderingService);\n        this.showTitle = false;\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(\n            this.formService.formContentClicked.subscribe((content) => {\n                this.formContentClicked.emit(content);\n            }),\n            this.formService.validateForm.subscribe((validateFormEvent: ValidateFormEvent) => {\n                if (validateFormEvent.errorsField.length > 0) {\n                    this.formError.next(validateFormEvent.errorsField);\n                }\n            })\n        );\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const processDefinitionId = changes['processDefinitionId'];\n        if (processDefinitionId && processDefinitionId.currentValue) {\n            this.visibilityService.cleanProcessVariable();\n            this.getStartFormDefinition(processDefinitionId.currentValue);\n            return;\n        }\n\n        const processId = changes['processId'];\n        if (processId && processId.currentValue) {\n            this.visibilityService.cleanProcessVariable();\n            this.loadStartForm(processId.currentValue);\n            return;\n        }\n    }\n\n    loadStartForm(processId: string) {\n        this.formService.getProcessInstance(processId)\n            .subscribe((instance: any) => {\n                this.formService\n                    .getStartFormInstance(processId)\n                    .subscribe(\n                        (form) => {\n                            this.formName = form.name;\n                            if (instance.variables) {\n                                form.processVariables = instance.variables;\n                            }\n                            this.form = this.parseForm(form);\n                            this.visibilityService.refreshVisibility(this.form);\n                            this.form.validateForm();\n                            this.form.readOnly = this.readOnlyForm;\n                            this.onFormLoaded(this.form);\n                        },\n                        (error) => this.handleError(error)\n                    );\n            });\n    }\n\n    getStartFormDefinition(processId: string) {\n        this.formService\n            .getStartFormDefinition(processId)\n            .subscribe(\n                (form) => {\n                    this.formName = form.processDefinitionName;\n                    this.form = this.parseForm(form);\n                    this.visibilityService.refreshVisibility(this.form);\n                    this.form.validateForm();\n                    this.form.readOnly = this.readOnlyForm;\n                    this.onFormLoaded(this.form);\n                },\n                (error) => this.handleError(error)\n            );\n    }\n\n    /** @override */\n    isOutcomeButtonVisible(outcome: FormOutcomeModel, isFormReadOnly: boolean): boolean {\n        if (outcome && outcome.isSystem && (outcome.name === FormOutcomeModel.SAVE_ACTION ||\n            outcome.name === FormOutcomeModel.COMPLETE_ACTION)) {\n            return false;\n        } else if (outcome && outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {\n            return true;\n        }\n        return super.isOutcomeButtonVisible(outcome, isFormReadOnly);\n    }\n\n    /** @override */\n    saveTaskForm() {\n        // do nothing\n    }\n\n    /** @override */\n    onRefreshClicked() {\n        if (this.processDefinitionId) {\n            this.visibilityService.cleanProcessVariable();\n            this.getStartFormDefinition(this.processDefinitionId);\n        } else if (this.processId) {\n            this.visibilityService.cleanProcessVariable();\n            this.loadStartForm(this.processId);\n        }\n    }\n\n    completeTaskForm(outcome?: string) {\n        this.outcomeClick.emit(outcome);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FormComponent } from './form.component';\nimport { StartFormComponent } from './start-form.component';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        MaterialModule\n    ],\n    declarations: [\n        FormComponent,\n        StartFormComponent\n    ],\n    exports: [\n        FormComponent,\n        StartFormComponent\n    ]\n})\nexport class FormModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ProcessCommentsModule } from '../process-comments/process-comments.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../material.module';\nimport { PeopleModule } from '../people/people.module';\nimport { ContentWidgetModule } from '../content-widget/content-widget.module';\n\nimport { ChecklistComponent } from './components/checklist.component';\nimport { NoTaskDetailsTemplateDirective } from './components/no-task-detail-template.directive';\nimport { StartTaskComponent } from './components/start-task.component';\nimport { TaskAuditDirective } from './components/task-audit.directive';\nimport { TaskDetailsComponent } from './components/task-details.component';\nimport { TaskFiltersComponent } from './components/task-filters.component';\nimport { TaskHeaderComponent } from './components/task-header.component';\nimport { TaskListComponent } from './components/task-list.component';\nimport { TaskStandaloneComponent } from './components/task-standalone.component';\nimport { AttachFormComponent } from './components/attach-form.component';\nimport { FormModule } from '../form/form.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        FormModule,\n        ReactiveFormsModule,\n        CoreModule.forChild(),\n        PeopleModule,\n        ProcessCommentsModule,\n        ContentWidgetModule\n    ],\n    declarations: [\n        NoTaskDetailsTemplateDirective,\n        TaskFiltersComponent,\n        TaskListComponent,\n        TaskDetailsComponent,\n        TaskAuditDirective,\n        ChecklistComponent,\n        TaskHeaderComponent,\n        StartTaskComponent,\n        TaskStandaloneComponent,\n        AttachFormComponent\n    ],\n    exports: [\n        NoTaskDetailsTemplateDirective,\n        TaskFiltersComponent,\n        TaskListComponent,\n        TaskDetailsComponent,\n        TaskAuditDirective,\n        ChecklistComponent,\n        TaskHeaderComponent,\n        StartTaskComponent,\n        TaskStandaloneComponent,\n        AttachFormComponent\n    ]\n})\nexport class TaskListModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogService } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { Observable, Observer } from 'rxjs';\nimport { TaskDetailsEvent, TaskDetailsModel } from '../../task-list';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-process-instance-tasks',\n    templateUrl: './process-instance-tasks.component.html',\n    styleUrls: ['./process-instance-tasks.component.css']\n})\nexport class ProcessInstanceTasksComponent implements OnInit, OnChanges {\n\n    /** (**required**) The ID of the process instance to display tasks for. */\n    @Input()\n    processInstanceDetails: ProcessInstance;\n\n    /** Toggles whether to show a refresh button next to the list of tasks to allow\n     * it to be updated from the server.\n     */\n    @Input()\n    showRefreshButton: boolean = true;\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    activeTasks: TaskDetailsModel[] = [];\n    completedTasks: TaskDetailsModel[] = [];\n\n    private taskObserver: Observer<TaskDetailsModel>;\n    private completedTaskObserver: Observer<TaskDetailsModel>;\n\n    task$: Observable<TaskDetailsModel>;\n    completedTask$: Observable<TaskDetailsModel>;\n\n    message: string;\n    processId: string;\n\n    @ViewChild('startDialog')\n    startDialog: any;\n\n    @ViewChild('taskDetails')\n    taskDetails: any;\n\n    /** Emitted when a task is clicked. */\n    @Output()\n    taskClick: EventEmitter<TaskDetailsEvent> = new EventEmitter<TaskDetailsEvent>();\n\n    constructor(private activitiProcess: ProcessService,\n                private logService: LogService,\n                private dialog: MatDialog) {\n        this.task$ = new Observable<TaskDetailsModel>((observer) => this.taskObserver = observer)\n            .pipe(share());\n        this.completedTask$ = new Observable<TaskDetailsModel>((observer) => this.completedTaskObserver = observer)\n            .pipe(share());\n    }\n\n    ngOnInit() {\n        this.task$.subscribe((task: TaskDetailsModel) => {\n            this.activeTasks.push(task);\n        });\n        this.completedTask$.subscribe((task: TaskDetailsModel) => {\n            this.completedTasks.push(task);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const processInstanceDetails = changes['processInstanceDetails'];\n        if (processInstanceDetails && processInstanceDetails.currentValue) {\n            this.load(processInstanceDetails.currentValue.id);\n        }\n    }\n\n    load(processInstanceId: string) {\n        this.loadActive(processInstanceId);\n        this.loadCompleted(processInstanceId);\n    }\n\n    loadActive(processInstanceId: string) {\n        this.activeTasks = [];\n        if (processInstanceId) {\n            this.activitiProcess.getProcessTasks(processInstanceId, null).subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.taskObserver.next(task);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        } else {\n            this.activeTasks = [];\n        }\n    }\n\n    loadCompleted(processInstanceId: string) {\n        this.completedTasks = [];\n        if (processInstanceId) {\n            this.activitiProcess.getProcessTasks(processInstanceId, 'completed').subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.completedTaskObserver.next(task);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        } else {\n            this.completedTasks = [];\n        }\n    }\n\n    hasStartFormDefined(): boolean {\n        return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;\n    }\n\n    getUserFullName(user: any) {\n        if (user) {\n            return (user.firstName && user.firstName !== 'null'\n                    ? user.firstName + ' ' : '') +\n                user.lastName;\n        }\n        return 'Nobody';\n    }\n\n    getFormatDate(value, format: string) {\n        const datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch (err) {\n            this.logService.error(`ProcessListInstanceTask: error parsing date ${value} to format ${format}`);\n        }\n    }\n\n    clickTask($event: any, task: TaskDetailsModel) {\n        const args = new TaskDetailsEvent(task);\n        this.taskClick.emit(args);\n    }\n\n    clickStartTask() {\n        this.processId = this.processInstanceDetails.id;\n        this.showStartDialog();\n    }\n\n    showStartDialog() {\n        this.dialog.open(this.startDialog, { height: '500px', width: '700px' });\n    }\n\n    closeStartDialog() {\n        this.dialog.closeAll();\n    }\n\n    onRefreshClicked() {\n        this.load(this.processInstanceDetails.id);\n    }\n\n    onFormContentClick() {\n        this.closeStartDialog();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let processPresetsDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_PROCESS_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'created',\n            'type': 'text',\n            'title': 'ADF_PROCESS_LIST.PROPERTIES.CREATED',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    DataTableSchema,\n    DataRowEvent,\n    DataTableAdapter,\n    CustomEmptyContentTemplateDirective,\n    CustomLoadingContentTemplateDirective\n} from '@alfresco/adf-core';\nimport {\n    AppConfigService,\n    PaginatedComponent,\n    PaginationComponent,\n    PaginationModel,\n    UserPreferencesService\n} from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';\nimport { processPresetsDefaultModel } from '../models/process-preset.model';\nimport { ProcessService } from '../services/process.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { ProcessListModel } from '../models/process-list.model';\nimport moment from 'moment-es6';\n\n@Component({\n    selector: 'adf-process-instance-list',\n    styleUrls: ['./process-list.component.css'],\n    templateUrl: './process-list.component.html'\n})\nexport class ProcessInstanceListComponent extends DataTableSchema  implements OnChanges, AfterContentInit, PaginatedComponent {\n\n    static PRESET_KEY = 'adf-process-list.presets';\n    public FORMAT_DATE: string = 'll';\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    customEmptyContent: CustomEmptyContentTemplateDirective;\n\n    @ContentChild(CustomLoadingContentTemplateDirective)\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n\n    /** The id of the app. */\n    @Input()\n    appId: number;\n\n    /** The Definition Id of the process. */\n    @Input()\n    processDefinitionId: string;\n\n    /** The id of the process instance. */\n    @Input()\n    processInstanceId: number|string;\n\n    /** Defines the state of the processes. Possible values are `running`, `completed` and `all` */\n    @Input()\n    state: string;\n\n    /** Defines the sort ordering of the list. Possible values are `created-desc`, `created-asc`,\n     * `ended-desc`, `ended-asc`.\n     */\n    @Input()\n    sort: string;\n\n    /** The page number of the processes to fetch. */\n    @Input()\n    page: number = 0;\n\n    /** The number of processes to fetch in each page. */\n    @Input()\n    size: number = PaginationComponent.DEFAULT_PAGINATION.maxItems;\n\n    /** Data source to define the datatable. */\n    @Input()\n    data: DataTableAdapter;\n\n    /** Toggles multiple row selection, which renders checkboxes at the beginning of each row */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,\n     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for\n     * multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // none|single|multiple\n\n    /** Toggles default selection of the first row */\n    @Input()\n    selectFirstRow: boolean = true;\n\n    /** Emitted when a row in the process list is clicked. */\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when the list of process instances has been loaded successfully from the server. */\n    @Output()\n    success: EventEmitter<ProcessListModel> = new EventEmitter<ProcessListModel>();\n\n    /** Emitted when an error occurs while loading the list of process instances from the server. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    requestNode: ProcessFilterParamRepresentationModel;\n    currentInstanceId: string;\n    isLoading: boolean = true;\n    rows: any[] = [];\n    sorting: any[] = ['created', 'desc'];\n\n    pagination: BehaviorSubject<PaginationModel>;\n\n    constructor(private processService: ProcessService,\n                private userPreferences: UserPreferencesService,\n                appConfig: AppConfigService) {\n        super(appConfig, ProcessInstanceListComponent.PRESET_KEY, processPresetsDefaultModel);\n        this.size = this.userPreferences.paginationSize;\n\n        this.pagination = new BehaviorSubject<PaginationModel>(<PaginationModel> {\n            maxItems: this.size,\n            skipCount: 0,\n            totalItems: 0\n        });\n    }\n\n    ngAfterContentInit() {\n        this.createDatatableSchema();\n        if (this.data && this.data.getColumns().length === 0) {\n            this.data.setColumns(this.columns);\n        }\n\n        if (this.appId != null) {\n            this.reload();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isPropertyChanged(changes)) {\n            if (this.isSortChanged(changes)) {\n                this.sorting = this.sort ? this.sort.split('-') : this.sorting;\n            }\n            this.reload();\n        }\n    }\n\n    private isSortChanged(changes: SimpleChanges): boolean {\n        const actualSort = changes['sort'];\n        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;\n    }\n\n    private isPropertyChanged(changes: SimpleChanges): boolean {\n        let changed: boolean = false;\n\n        const appId = changes['appId'];\n        const processDefinitionId = changes['processDefinitionId'];\n        const processInstanceId = changes['processInstanceId'];\n        const state = changes['state'];\n        const sort = changes['sort'];\n        const page = changes['page'];\n        const size = changes['size'];\n\n        if (appId && appId.currentValue) {\n            changed = true;\n        } else if (processDefinitionId) {\n            changed = true;\n        } else if (processInstanceId) {\n            changed = true;\n        } else if (state && state.currentValue) {\n            changed = true;\n        } else if (sort && sort.currentValue) {\n            changed = true;\n        } else if (page && page.currentValue !== page.previousValue) {\n            changed = true;\n        } else if (size && size.currentValue !== size.previousValue) {\n            changed = true;\n        }\n        return changed;\n    }\n\n    public reload() {\n        this.requestNode = this.createRequestNode();\n        this.load(this.requestNode);\n    }\n\n    private load(requestNode: ProcessFilterParamRepresentationModel) {\n        this.isLoading = true;\n        this.processService.getProcesses(requestNode)\n            .subscribe(\n                (response) => {\n                    this.rows = this.optimizeProcessDetails(response.data);\n                    this.selectFirst();\n                    this.success.emit(response);\n                    this.isLoading = false;\n                    this.pagination.next({\n                        count: response.data.length,\n                        maxItems: this.size,\n                        skipCount: this.page * this.size,\n                        totalItems: response.total\n                    });\n                },\n                (error) => {\n                    this.error.emit(error);\n                    this.isLoading = false;\n                });\n    }\n\n    /**\n     * Select the first instance of a list if present\n     */\n    selectFirst() {\n        if (this.selectFirstRow) {\n            if (!this.isListEmpty()) {\n                const dataRow = this.rows[0];\n                dataRow.isSelected = true;\n                this.currentInstanceId = dataRow['id'];\n            } else {\n                this.currentInstanceId = null;\n            }\n        }\n    }\n\n    /**\n     * Return the current id\n     */\n    getCurrentId(): string {\n        return this.currentInstanceId;\n    }\n\n    /**\n     * Check if the list is empty\n     */\n    isListEmpty(): boolean {\n        return !this.rows || this.rows.length === 0;\n    }\n\n    /**\n     * Emit the event rowClick passing the current task id when the row is clicked\n     * @param event\n     */\n    onRowClick(event: DataRowEvent) {\n        const item = event;\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    /**\n     * Emit the event rowClick passing the current task id when pressed the Enter key on the selected row\n     * @param event\n     */\n    onRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n\n    /**\n     * Optimize name field\n     * @param instances\n     */\n    private optimizeProcessDetails(instances: any[]): any[] {\n        instances = instances.map((instance) => {\n            instance.name = this.getProcessNameOrDescription(instance, 'medium');\n            if (instance.started) {\n                instance.started = moment(instance.started).format(this.FORMAT_DATE);\n            }\n            return instance;\n        });\n        return instances;\n    }\n\n    getProcessNameOrDescription(processInstance, dateFormat): string {\n        let name = '';\n        if (processInstance) {\n            name = processInstance.name ||\n                processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);\n        }\n        return name;\n    }\n\n    getFormatDate(value, format: string) {\n        const datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch (err) {\n            return '';\n        }\n    }\n\n    private createRequestNode() {\n        const requestNode = {\n            appDefinitionId: this.appId,\n            processDefinitionId: this.processDefinitionId,\n            processInstanceId: this.processInstanceId,\n            state: this.state,\n            sort: this.sort,\n            page: this.page,\n            size: this.size,\n            start: 0\n        };\n        return new ProcessFilterParamRepresentationModel(requestNode);\n    }\n\n    updatePagination(params: PaginationModel) {\n        const needsReload = params.maxItems || params.skipCount;\n        this.size = params.maxItems;\n        this.page = this.currentPage(params.skipCount, params.maxItems);\n        if (needsReload) {\n            this.reload();\n        }\n    }\n\n    currentPage(skipCount: number, maxItems: number): number {\n        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component, EventEmitter, Input, OnChanges, OnInit,\n    Output, SimpleChanges, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport {\n    ActivitiContentService, AppConfigService, AppConfigValues,\n    FormValues\n} from '@alfresco/adf-core';\nimport { ProcessInstanceVariable } from '../models/process-instance-variable.model';\nimport { ProcessDefinitionRepresentation } from './../models/process-definition.model';\nimport { ProcessInstance } from './../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nimport { FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MatAutocompleteTrigger } from '@angular/material';\nimport { StartFormComponent } from '../../form';\n\n@Component({\n    selector: 'adf-start-process',\n    templateUrl: './start-process.component.html',\n    styleUrls: ['./start-process.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartProcessInstanceComponent implements OnChanges, OnInit {\n\n    MAX_LENGTH: number = 255;\n\n    /** (optional) Limit the list of processes that can be started to those\n     * contained in the specified app.\n     */\n    @Input()\n    appId: number;\n\n    /** (optional) Definition name of the process to start. */\n    @Input()\n    processDefinitionName: string;\n\n    /** Variables in the input to the process\n     * [RestVariable](https://github.com/Alfresco/alfresco-js-api/tree/master/src/alfresco-activiti-rest-api/docs/RestVariable.md).\n     */\n    @Input()\n    variables: ProcessInstanceVariable[];\n\n    /** Parameter to pass form field values in the start form if one is associated. */\n    @Input()\n    values: FormValues;\n\n    /** (optional) Name to assign to the current process. */\n    @Input()\n    name: string = '';\n\n    /** Hide or show the process selection dropdown. */\n    @Input()\n    showSelectProcessDropdown: boolean = true;\n\n    /** (optional) Parameter to enable selection of process when filtering. */\n    @Input()\n    processFilterSelector: boolean = true;\n\n    /** Emitted when the process starts. */\n    @Output()\n    start: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    /** Emitted when the process is canceled. */\n    @Output()\n    cancel: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    @ViewChild('startForm')\n    startForm: StartFormComponent;\n\n    @ViewChild(MatAutocompleteTrigger)\n    inputAutocomplete: MatAutocompleteTrigger;\n\n    processDefinitions: ProcessDefinitionRepresentation[] = [];\n    selectedProcessDef: ProcessDefinitionRepresentation = new ProcessDefinitionRepresentation();\n    errorMessageId: string = '';\n    processNameInput: FormControl;\n    processDefinitionInput: FormControl;\n    filteredProcesses: Observable<ProcessDefinitionRepresentation[]>;\n    maxProcessNameLength: number = this.MAX_LENGTH;\n\n    constructor(private activitiProcess: ProcessService,\n                private activitiContentService: ActivitiContentService,\n                private appConfig: AppConfigService) {\n        }\n\n    ngOnInit() {\n        this.processNameInput = new FormControl(this.name, [Validators.required, Validators.maxLength(this.maxProcessNameLength)]);\n        this.processDefinitionInput = new FormControl();\n\n        this.loadStartProcess();\n\n        this.processNameInput.valueChanges.subscribe((name) => this.name = name);\n        this.filteredProcesses = this.processDefinitionInput.valueChanges\n            .pipe(\n                map((value) => this._filter(value))\n            );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['values'] && changes['values'].currentValue) {\n            this.moveNodeFromCStoPS();\n        }\n\n        if (changes['appId'] && changes['appId'].currentValue) {\n            this.appId = changes['appId'].currentValue;\n        }\n\n        this.loadStartProcess();\n    }\n\n    private _filter(value: string): ProcessDefinitionRepresentation[] {\n        if (value !== null && value !== undefined) {\n            const filterValue = value.toLowerCase();\n            const filteredProcess = this.processDefinitions.filter((option) => option.name.toLowerCase().includes(filterValue));\n\n            if (this.processFilterSelector) {\n                this.selectedProcessDef = this.getSelectedProcess(filterValue);\n            }\n            return filteredProcess;\n        }\n    }\n\n    getSelectedProcess(selectedProcess) {\n        let processSelected = this.processDefinitions.find((process) => process.name.toLowerCase() === selectedProcess);\n\n        if (!processSelected) {\n            processSelected = new ProcessDefinitionRepresentation();\n        }\n        return processSelected;\n    }\n\n    public loadStartProcess() {\n        this.resetSelectedProcessDefinition();\n        this.resetErrorMessage();\n\n        this.activitiProcess.getProcessDefinitions(this.appId).subscribe(\n            (processDefinitionRepresentations: ProcessDefinitionRepresentation[]) => {\n                this.processDefinitions = processDefinitionRepresentations;\n\n                if (!this.isProcessDefinitionsEmpty()) {\n\n                    if (this.processDefinitions.length === 1) {\n                        this.selectedProcessDef = this.processDefinitions[0];\n                    }\n\n                    if (this.processDefinitionName) {\n                        const selectedProcess = this.processDefinitions.find((currentProcessDefinition) => {\n                            return currentProcessDefinition.name === this.processDefinitionName;\n                        });\n                        if (selectedProcess) {\n                            this.selectedProcessDef = selectedProcess;\n                        }\n                    }\n\n                    this.processDefinitionInput.setValue(this.selectedProcessDef.name);\n                }\n            },\n            () => {\n                this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.LOAD_PROCESS_DEFS';\n            });\n    }\n\n    isProcessDefinitionsEmpty(): boolean {\n        return this.processDefinitions.length === 0;\n    }\n\n    getAlfrescoRepositoryName(): string {\n        let alfrescoRepositoryName = this.appConfig.get<string>(AppConfigValues.ALFRESCO_REPOSITORY_NAME);\n        if (!alfrescoRepositoryName) {\n            alfrescoRepositoryName = 'alfresco-1';\n        }\n        return alfrescoRepositoryName + 'Alfresco';\n    }\n\n    moveNodeFromCStoPS() {\n        const accountIdentifier = this.getAlfrescoRepositoryName();\n\n        for (const key in this.values) {\n            if (this.values.hasOwnProperty(key)) {\n                const currentValue = this.values[key];\n\n                if (currentValue.isFile) {\n                    this.activitiContentService.applyAlfrescoNode(currentValue, null, accountIdentifier).subscribe((res) => {\n                        this.values[key] = [res];\n                    });\n                }\n            }\n        }\n    }\n\n    public startProcess(outcome?: string) {\n        if (this.selectedProcessDef && this.selectedProcessDef.id && this.name) {\n            this.resetErrorMessage();\n            const formValues = this.startForm ? this.startForm.form.values : undefined;\n            this.activitiProcess.startProcess(this.selectedProcessDef.id, this.name, outcome, formValues, this.variables).subscribe(\n                (res) => {\n                    this.name = '';\n                    this.start.emit(res);\n                },\n                (err) => {\n                    this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.START';\n                    this.error.error(err);\n                }\n            );\n        }\n    }\n\n    public cancelStartProcess() {\n        this.cancel.emit();\n    }\n\n    hasStartForm(): boolean {\n        return this.selectedProcessDef && this.selectedProcessDef.hasStartForm;\n    }\n\n    isProcessDefinitionEmpty() {\n        return this.processDefinitions ? (this.processDefinitions.length > 0 || this.errorMessageId) : this.errorMessageId;\n    }\n\n    isStartFormMissingOrValid(): boolean {\n        if (this.startForm) {\n            return this.startForm.form && this.startForm.form.isValid;\n        } else {\n            return true;\n        }\n    }\n\n    validateForm(): boolean {\n        return this.selectedProcessDef && this.selectedProcessDef.id && this.processNameInput.valid && this.isStartFormMissingOrValid();\n    }\n\n    private resetSelectedProcessDefinition() {\n        this.selectedProcessDef = new ProcessDefinitionRepresentation();\n    }\n\n    private resetErrorMessage(): void {\n        this.errorMessageId = '';\n    }\n\n    hasErrorMessage(): boolean {\n        return this.processDefinitions.length === 0 && !this.errorMessageId;\n    }\n\n    public onOutcomeClick(outcome: string) {\n        this.startProcess(outcome);\n    }\n\n    public reset() {\n        this.resetSelectedProcessDefinition();\n        this.name = '';\n        if (this.startForm) {\n            this.startForm.data = {};\n        }\n        this.resetErrorMessage();\n    }\n\n    hasProcessName(): boolean {\n        return this.name ? true : false;\n    }\n\n    displayFn(process: any) {\n        if (process) {\n            let processName = process;\n            if (typeof process !== 'string') {\n                processName = process.name;\n            }\n            return processName;\n        }\n    }\n\n    displayDropdown(event) {\n        event.stopPropagation();\n        if (!this.inputAutocomplete.panelOpen) {\n            this.processDefinitionInput.setValue('');\n            this.inputAutocomplete.openPanel();\n        } else {\n            this.inputAutocomplete.closePanel();\n        }\n    }\n\n    get nameController(): AbstractControl {\n        return this.processNameInput;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessFilterRequestRepresentation {\n    processDefinitionId: string;\n    appDefinitionId: string;\n    state: string;\n    sort: string;\n    page: number;\n    size: number;\n\n    constructor(obj?: any) {\n        this.processDefinitionId = obj && obj.processDefinitionId || null;\n        this.appDefinitionId = obj && obj.appDefinitionId || null;\n        this.state = obj && obj.state || null;\n        this.sort = obj && obj.sort || null;\n        this.page = obj && obj.page || 0;\n        this.size = obj && obj.size || 25;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from '../material.module';\nimport { ProcessCommentsModule } from '../process-comments/process-comments.module';\nimport { TaskListModule } from '../task-list/task-list.module';\nimport { PeopleModule } from '../people/people.module';\nimport { ContentWidgetModule } from '../content-widget/content-widget.module';\n\nimport { ProcessAuditDirective } from './components/process-audit.directive';\nimport { ProcessFiltersComponent } from './components/process-filters.component';\nimport { ProcessInstanceDetailsComponent } from './components/process-instance-details.component';\nimport { ProcessInstanceHeaderComponent } from './components/process-instance-header.component';\nimport { ProcessInstanceTasksComponent } from './components/process-instance-tasks.component';\nimport { ProcessInstanceListComponent } from './components/process-list.component';\nimport { StartProcessInstanceComponent } from './components/start-process.component';\nimport { FormModule } from '../form/form.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FlexLayoutModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild(),\n        TaskListModule,\n        PeopleModule,\n        ContentWidgetModule,\n        ProcessCommentsModule,\n        FormModule\n    ],\n    declarations: [\n        ProcessInstanceListComponent,\n        ProcessFiltersComponent,\n        ProcessInstanceDetailsComponent,\n        ProcessAuditDirective,\n        ProcessInstanceHeaderComponent,\n        ProcessInstanceTasksComponent,\n        StartProcessInstanceComponent\n    ],\n    exports: [\n        ProcessInstanceListComponent,\n        ProcessFiltersComponent,\n        ProcessInstanceDetailsComponent,\n        ProcessAuditDirective,\n        ProcessInstanceHeaderComponent,\n        ProcessInstanceTasksComponent,\n        StartProcessInstanceComponent\n    ]\n})\nexport class ProcessListModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppsProcessService, TranslationService, CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, EventEmitter, Input, OnInit, Output, ContentChild } from '@angular/core';\nimport { Observable, Observer, of } from 'rxjs';\nimport { AppDefinitionRepresentationModel } from '../task-list';\nimport { IconModel } from './icon.model';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-apps',\n    templateUrl: 'apps-list.component.html',\n    styleUrls: ['./apps-list.component.scss']\n})\nexport class AppsListComponent implements OnInit, AfterContentInit {\n\n    public static LAYOUT_LIST: string = 'LIST';\n    public static LAYOUT_GRID: string = 'GRID';\n    public static DEFAULT_TASKS_APP: string = 'tasks';\n    public static DEFAULT_TASKS_APP_NAME: string = 'ADF_TASK_LIST.APPS.TASK_APP_NAME';\n    public static DEFAULT_TASKS_APP_THEME: string = 'theme-2';\n    public static DEFAULT_TASKS_APP_ICON: string = 'glyphicon-asterisk';\n    public static DEFAULT_TASKS_APP_MATERIAL_ICON: string = 'favorite_border';\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    emptyCustomContent: CustomEmptyContentTemplateDirective;\n\n    /** (**required**) Defines the layout of the apps. There are two possible\n     * values, \"GRID\" and \"LIST\".\n     */\n    @Input()\n    layoutType: string = AppsListComponent.LAYOUT_GRID;\n\n    /** Provides a way to filter the apps to show. */\n    @Input()\n    filtersAppId: any[];\n\n    /** Emitted when an app entry is clicked. */\n    @Output()\n    appClick: EventEmitter<AppDefinitionRepresentationModel> = new EventEmitter<AppDefinitionRepresentationModel>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    private appsObserver: Observer<AppDefinitionRepresentationModel>;\n    apps$: Observable<AppDefinitionRepresentationModel>;\n\n    currentApp: AppDefinitionRepresentationModel;\n\n    appList: AppDefinitionRepresentationModel [] = [];\n\n    private iconsMDL: IconModel;\n\n    loading: boolean = false;\n\n    hasEmptyCustomContentTemplate: boolean = false;\n\n    constructor(\n        private appsProcessService: AppsProcessService,\n        private translationService: TranslationService) {\n            this.apps$ = new Observable<AppDefinitionRepresentationModel>((observer) => this.appsObserver = observer)\n                .pipe(share());\n    }\n\n    ngOnInit() {\n        if (!this.isValidType()) {\n            this.setDefaultLayoutType();\n        }\n\n        this.apps$.subscribe((app: any) => {\n            this.appList.push(app);\n        });\n        this.iconsMDL = new IconModel();\n        this.load();\n    }\n\n    ngAfterContentInit() {\n        if (this.emptyCustomContent) {\n            this.hasEmptyCustomContentTemplate = true;\n        }\n    }\n\n    private load() {\n        this.loading = true;\n        this.appsProcessService.getDeployedApplications()\n        .subscribe(\n            (res: AppDefinitionRepresentationModel[]) => {\n                this.filterApps(res).forEach((app: AppDefinitionRepresentationModel) => {\n                    if (this.isDefaultApp(app)) {\n                        app.theme = AppsListComponent.DEFAULT_TASKS_APP_THEME;\n                        app.icon = AppsListComponent.DEFAULT_TASKS_APP_ICON;\n                        this.appsObserver.next(app);\n                    } else if (app.deploymentId) {\n                        this.appsObserver.next(app);\n                    }\n                    this.loading = false;\n                });\n            },\n            (err) => {\n                this.error.emit(err);\n                this.loading = false;\n            }\n        );\n    }\n\n    isDefaultApp(app) {\n        return app.defaultAppId === AppsListComponent.DEFAULT_TASKS_APP;\n    }\n\n    getAppName(app) {\n        return this.isDefaultApp(app)\n            ? this.translationService.get(AppsListComponent.DEFAULT_TASKS_APP_NAME)\n            : of(app.name);\n    }\n\n    /**\n     * Pass the selected app as next\n     * @param app\n     */\n    public selectApp(app: AppDefinitionRepresentationModel) {\n        this.currentApp = app;\n        this.appClick.emit(app);\n    }\n\n    /**\n     * Return true if the appId is the current app\n     * @param appId\n     */\n    isSelected(appId: number): boolean {\n        return (this.currentApp !== undefined && appId === this.currentApp.id);\n    }\n\n    private filterApps(apps: AppDefinitionRepresentationModel []): AppDefinitionRepresentationModel[] {\n        const filteredApps: AppDefinitionRepresentationModel[] = [];\n        if (this.filtersAppId) {\n            apps.filter((app: AppDefinitionRepresentationModel) => {\n                this.filtersAppId.forEach((filter) => {\n                    if (app.defaultAppId === filter.defaultAppId ||\n                        app.deploymentId === filter.deploymentId ||\n                        app.name === filter.name ||\n                        app.id === filter.id ||\n                        app.modelId === filter.modelId ||\n                        app.tenantId === filter.tenantId) {\n                        filteredApps.push(app);\n                    }\n                });\n            });\n        } else {\n            return apps;\n        }\n        return filteredApps;\n    }\n\n    /**\n     * Check if the value of the layoutType property is an allowed value\n     */\n    isValidType(): boolean {\n        if (this.layoutType && (this.layoutType === AppsListComponent.LAYOUT_LIST || this.layoutType === AppsListComponent.LAYOUT_GRID)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Assign the default value to LayoutType\n     */\n    setDefaultLayoutType(): void {\n        this.layoutType = AppsListComponent.LAYOUT_GRID;\n    }\n\n    /**\n     * Return true if the layout type is LIST\n     */\n    isList(): boolean {\n        return this.layoutType === AppsListComponent.LAYOUT_LIST;\n    }\n\n    /**\n     * Return true if the layout type is GRID\n     */\n    isGrid(): boolean {\n        return this.layoutType === AppsListComponent.LAYOUT_GRID;\n    }\n\n    isEmpty(): boolean {\n        return this.appList.length === 0;\n    }\n\n    isLoading(): boolean {\n        return this.loading;\n    }\n\n    getTheme(app: AppDefinitionRepresentationModel): string {\n        return app.theme ? app.theme : '';\n    }\n\n    getBackgroundIcon(app: AppDefinitionRepresentationModel): string {\n        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(app.icon);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppsProcessService } from '@alfresco/adf-core';\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\n@Component({\n    selector: 'adf-select-apps-dialog',\n    templateUrl: 'select-apps-dialog-component.html'\n})\nexport class SelectAppsDialogComponent {\n\n    processApps: any;\n\n    selectedProcess: any;\n\n    constructor(private appsProcessService: AppsProcessService,\n                public dialogRef: MatDialogRef<SelectAppsDialogComponent>,\n                @Inject(MAT_DIALOG_DATA) public data: any) {\n\n        this.appsProcessService.getDeployedApplications().subscribe(\n            (apps: any[]) => {\n                this.processApps = apps.filter((currentApp) => {\n                    return currentApp.id;\n                });\n            }\n        );\n    }\n\n    onStart(): void {\n        this.dialogRef.close(this.selectedProcess);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { AppsListComponent } from './apps-list.component';\nimport { SelectAppsDialogComponent } from './select-apps-dialog-component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FlexLayoutModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        AppsListComponent,\n        SelectAppsDialogComponent\n    ],\n    exports: [\n        AppsListComponent,\n        SelectAppsDialogComponent\n    ],\n    entryComponents: [\n        SelectAppsDialogComponent\n    ]\n})\nexport class AppsListModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, ThumbnailService, EmptyListComponent } from '@alfresco/adf-core';\nimport {\n    AfterContentInit,\n    ContentChild,\n    Component,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-task-attachment-list',\n    styleUrls: ['./task-attachment-list.component.scss'],\n    templateUrl: './task-attachment-list.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskAttachmentListComponent implements OnChanges, AfterContentInit {\n\n    @ContentChild(EmptyListComponent)\n    emptyTemplate: EmptyListComponent;\n\n    /** (**required**) The ID of the task to display. */\n    @Input()\n    taskId: string;\n\n    /** Disable/Enable read only mode for attachment list. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Emitted when the attachment is double-clicked or a view\n     * option is selected from the context menu by the user from within the component.\n     * Returns a Blob representing the clicked object.\n     */\n    @Output()\n    attachmentClick = new EventEmitter();\n\n    /** Emitted when the attachment list has fetched all the attachments.\n     * Returns a list of attachments.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    /** Emitted when an error occurs while fetching the attachments. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    hasCustomTemplate: boolean = false;\n\n    attachments: any[] = [];\n    isLoading: boolean = false;\n\n    constructor(private activitiContentService: ProcessContentService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService,\n                private ngZone: NgZone) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['taskId'] && changes['taskId'].currentValue) {\n            this.loadAttachmentsByTaskId(changes['taskId'].currentValue);\n        }\n    }\n\n    ngAfterContentInit() {\n        if (this.emptyTemplate) {\n            this.hasCustomTemplate = true;\n        }\n    }\n\n    reset(): void {\n        this.attachments = [];\n    }\n\n    hasCustomEmptyTemplate() {\n        return !!this.emptyTemplate;\n    }\n\n    reload(): void {\n        this.ngZone.run(() => {\n            this.loadAttachmentsByTaskId(this.taskId);\n        });\n    }\n\n    add(content: any): void {\n        this.ngZone.run(() => {\n            this.attachments.push({\n                id: content.id,\n                name: content.name,\n                created: content.created,\n                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n            });\n        });\n    }\n\n    private loadAttachmentsByTaskId(taskId: string) {\n        if (taskId) {\n            this.isLoading = true;\n            this.reset();\n            const opts = 'true';\n            this.activitiContentService.getTaskRelatedContent(taskId, opts).subscribe(\n                (res: any) => {\n                    const attachList = [];\n                    res.data.forEach((content) => {\n                        attachList.push({\n                            id: content.id,\n                            name: content.name,\n                            created: content.created,\n                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n                        });\n                    });\n                    this.attachments = attachList;\n                    this.success.emit(this.attachments);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.isLoading = false;\n                });\n        }\n    }\n\n    deleteAttachmentById(contentId: number) {\n        if (contentId) {\n            this.activitiContentService.deleteRelatedContent(contentId).subscribe(\n                (res: any) => {\n                    this.attachments = this.attachments.filter((content) => {\n                        return content.id !== contentId;\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    isEmpty(): boolean {\n        return this.attachments && this.attachments.length === 0;\n    }\n\n    onShowRowActionsMenu(event: any) {\n        const viewAction = {\n            title: 'ADF_TASK_LIST.MENU_ACTIONS.VIEW_CONTENT',\n            name: 'view'\n        };\n\n        const removeAction = {\n            title: 'ADF_TASK_LIST.MENU_ACTIONS.REMOVE_CONTENT',\n            name: 'remove'\n        };\n\n        const downloadAction = {\n            title: 'ADF_TASK_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',\n            name: 'download'\n        };\n\n        event.value.actions = [\n            viewAction,\n            downloadAction\n        ];\n\n        if (!this.disabled) {\n            event.value.actions.splice(1, 0, removeAction);\n        }\n    }\n\n    onExecuteRowAction(event: any) {\n        const args = event.value;\n        const action = args.action;\n        if (action.name === 'view') {\n            this.emitDocumentContent(args.row.obj);\n        } else if (action.name === 'remove') {\n            this.deleteAttachmentById(args.row.obj.id);\n        } else if (action.name === 'download') {\n            this.downloadContent(args.row.obj);\n        }\n    }\n\n    openContent(event: any): void {\n        const content = event.value.obj;\n        this.emitDocumentContent(content);\n    }\n\n    emitDocumentContent(content: any) {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.attachmentClick.emit(content);\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    downloadContent(content: any): void {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    isDisabled(): boolean {\n        return this.disabled;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, EmptyListComponent , ThumbnailService } from '@alfresco/adf-core';\nimport { AfterContentInit, ContentChild, Component, EventEmitter, Input, NgZone, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-process-attachment-list',\n    styleUrls: ['./process-attachment-list.component.scss'],\n    templateUrl: './process-attachment-list.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ProcessAttachmentListComponent implements OnChanges, AfterContentInit {\n\n    @ContentChild(EmptyListComponent)\n    emptyTemplate: EmptyListComponent;\n\n    /** (**required**) The ID of the process instance to display. */\n    @Input()\n    processInstanceId: string;\n\n    /** Disable/Enable read-only mode for attachment list. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Emitted when the attachment is double-clicked or the\n     * view option is selected from the context menu by the user from\n     * within the component. Returns a Blob representing the object\n     * that was clicked.\n     */\n    @Output()\n    attachmentClick = new EventEmitter();\n\n    /** Emitted when the attachment list has fetched all the attachments.\n     * Returns a list of attachments.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    /** Emitted when the attachment list is not able to fetch the attachments\n     * (eg, following a network error).\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    hasCustomTemplate: boolean = false;\n\n    attachments: any[] = [];\n    isLoading: boolean = false;\n\n    constructor(private activitiContentService: ProcessContentService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService,\n                private ngZone: NgZone) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {\n            this.loadAttachmentsByProcessInstanceId(changes['processInstanceId'].currentValue);\n        }\n    }\n\n    ngAfterContentInit() {\n        if (this.emptyTemplate) {\n            this.hasCustomTemplate = true;\n        }\n    }\n\n    reset() {\n        this.attachments = [];\n    }\n\n    reload(): void {\n        this.ngZone.run(() => {\n            this.loadAttachmentsByProcessInstanceId(this.processInstanceId);\n        });\n    }\n\n    hasCustomEmptyTemplate() {\n        return !!this.emptyTemplate;\n    }\n\n    add(content: any): void {\n        this.ngZone.run(() => {\n            this.attachments.push({\n                id: content.id,\n                name: content.name,\n                created: content.created,\n                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n            });\n        });\n    }\n\n    private loadAttachmentsByProcessInstanceId(processInstanceId: string) {\n        if (processInstanceId) {\n            this.reset();\n            this.isLoading = true;\n            const opts: string =  'true';\n            this.activitiContentService.getProcessRelatedContent(processInstanceId, opts).subscribe(\n                (res: any) => {\n                    res.data.forEach((content) => {\n                        this.attachments.push({\n                            id: content.id,\n                            name: content.name,\n                            created: content.created,\n                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n                        });\n                    });\n                    this.success.emit(this.attachments);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.isLoading = false;\n                });\n        }\n    }\n\n    private deleteAttachmentById(contentId: number) {\n        if (contentId) {\n            this.activitiContentService.deleteRelatedContent(contentId).subscribe(\n                (res: any) => {\n                    this.attachments = this.attachments.filter((content) => {\n                        return content.id !== contentId;\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    isEmpty(): boolean {\n        return this.attachments && this.attachments.length === 0;\n    }\n\n    onShowRowActionsMenu(event: any) {\n        const viewAction = {\n            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.VIEW_CONTENT',\n            name: 'view'\n        };\n\n        const removeAction = {\n            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.REMOVE_CONTENT',\n            name: 'remove'\n        };\n\n        const downloadAction = {\n            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',\n            name: 'download'\n        };\n\n        event.value.actions = [\n            viewAction,\n            downloadAction\n        ];\n\n        if (!this.disabled) {\n            event.value.actions.splice(1, 0, removeAction);\n        }\n    }\n\n    onExecuteRowAction(event: any) {\n        const args = event.value;\n        const action = args.action;\n        if (action.name === 'view') {\n            this.emitDocumentContent(args.row.obj);\n        } else if (action.name === 'remove') {\n            this.deleteAttachmentById(args.row.obj.id);\n        } else if (action.name === 'download') {\n            this.downloadContent(args.row.obj);\n        }\n    }\n\n    openContent(event: any): void {\n        const content = event.value.obj;\n        this.emitDocumentContent(content);\n    }\n\n    emitDocumentContent(content: any) {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.attachmentClick.emit(content);\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    downloadContent(content: any): void {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    isDisabled(): boolean {\n        return this.disabled;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-create-process-attachment',\n    styleUrls: ['./create-process-attachment.component.css'],\n    templateUrl: './create-process-attachment.component.html'\n})\nexport class CreateProcessAttachmentComponent implements OnChanges {\n\n    /** (required) The ID of the process instance to display. */\n    @Input()\n    processInstanceId: string;\n\n    /** Emitted when an error occurs while creating or uploading an attachment\n     * from the user within the component.\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an attachment is successfully created or uploaded\n     * from within the component.\n     */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private activitiContentService: ProcessContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {\n            this.processInstanceId = changes['processInstanceId'].currentValue;\n        }\n    }\n\n    onFileUpload(event: any) {\n        const filesList: File[] = event.detail.files.map((obj) => obj.file);\n\n        for (const fileInfoObj of filesList) {\n            const file: File = fileInfoObj;\n            const opts = {\n                isRelatedContent: true\n            };\n            this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe(\n                (res) => {\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-create-task-attachment',\n    styleUrls: ['./create-task-attachment.component.scss'],\n    templateUrl: './create-task-attachment.component.html'\n})\nexport class AttachmentComponent implements OnChanges {\n\n    /** (required) The numeric ID of the task to display. */\n    @Input()\n    taskId: string;\n\n    /** Emitted when an error occurs while creating or uploading an\n     *  attachment from the user within the component.\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an attachment is created or uploaded successfully\n     * from within the component.\n     */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private activitiContentService: ProcessContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['taskId'] && changes['taskId'].currentValue) {\n            this.taskId = changes['taskId'].currentValue;\n        }\n    }\n\n    onFileUpload(event: any) {\n        const filesList: File[] = event.detail.files.map((obj) => obj.file);\n\n        for (const fileInfoObj of filesList) {\n            const file: File = fileInfoObj;\n            const opts = {\n                isRelatedContent: true\n            };\n            this.activitiContentService.createTaskRelatedContent(this.taskId, file, opts).subscribe(\n                (res) => {\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { TaskAttachmentListComponent } from './task-attachment-list.component';\nimport { ProcessAttachmentListComponent } from './process-attachment-list.component';\nimport { CreateProcessAttachmentComponent } from './create-process-attachment.component';\nimport { AttachmentComponent } from './create-task-attachment.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        MaterialModule\n    ],\n    declarations: [\n        TaskAttachmentListComponent,\n        ProcessAttachmentListComponent,\n        CreateProcessAttachmentComponent,\n        CreateProcessAttachmentComponent,\n        AttachmentComponent\n    ],\n    exports: [\n        TaskAttachmentListComponent,\n        ProcessAttachmentListComponent,\n        CreateProcessAttachmentComponent,\n        CreateProcessAttachmentComponent,\n        AttachmentComponent\n    ]\n})\nexport class AttachmentModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';\n\nimport { MaterialModule } from './material.module';\n\nimport { ProcessListModule } from './process-list/process-list.module';\nimport { TaskListModule } from './task-list/task-list.module';\nimport { AppsListModule } from './app-list/apps-list.module';\nimport { ProcessCommentsModule } from './process-comments/process-comments.module';\nimport { AttachmentModule } from './attachment/attachment.module';\nimport { PeopleModule } from './people/people.module';\nimport { FormModule } from './form/form.module';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        ProcessCommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule,\n        FormModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-process-services',\n                source: 'assets/adf-process-services'\n            }\n        }\n    ],\n    exports: [\n        CommonModule,\n        ProcessCommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule,\n        FormModule\n    ]\n})\nexport class ProcessModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ProcessModule,\n            providers: [\n                {\n                    provide: TRANSLATION_PROVIDER,\n                    multi: true,\n                    useValue: {\n                        name: 'adf-process-services',\n                        source: 'assets/adf-process-services'\n                    }\n                }\n            ]\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ProcessModuleLazy\n        };\n    }\n}\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        ProcessCommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule\n    ],\n    exports: [\n        CommonModule,\n        ProcessCommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule\n    ]\n})\nexport class ProcessModuleLazy {}\n"]}