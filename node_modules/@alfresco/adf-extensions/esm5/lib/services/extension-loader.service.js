/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ContentActionType } from '../config/action.extensions';
import { filterEnabled, getValue, mergeObjects, sortByOrder } from '../config/extension-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var ExtensionLoaderService = /** @class */ (function () {
    function ExtensionLoaderService(http) {
        this.http = http;
    }
    /**
     * @param {?} configPath
     * @param {?} pluginsPath
     * @param {?=} extensions
     * @return {?}
     */
    ExtensionLoaderService.prototype.load = /**
     * @param {?} configPath
     * @param {?} pluginsPath
     * @param {?=} extensions
     * @return {?}
     */
    function (configPath, pluginsPath, extensions) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            _this.loadConfig(configPath, 0).then((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result) {
                    /** @type {?} */
                    var config_1 = result.config;
                    /** @type {?} */
                    var override = sessionStorage.getItem('app.extension.config');
                    if (override) {
                        config_1 = JSON.parse(override);
                    }
                    if (config_1.$references && config_1.$references.length > 0) {
                        /** @type {?} */
                        var plugins = config_1.$references.map((/**
                         * @param {?} name
                         * @param {?} idx
                         * @return {?}
                         */
                        function (name, idx) {
                            return _this.loadConfig(pluginsPath + "/" + name, idx);
                        }));
                        Promise.all(plugins).then((/**
                         * @param {?} results
                         * @return {?}
                         */
                        function (results) {
                            /** @type {?} */
                            var configs = results
                                .filter((/**
                             * @param {?} entry
                             * @return {?}
                             */
                            function (entry) { return entry; }))
                                .sort(sortByOrder)
                                .map((/**
                             * @param {?} entry
                             * @return {?}
                             */
                            function (entry) { return entry.config; }));
                            if (extensions && extensions.length > 0) {
                                configs.push.apply(configs, tslib_1.__spread(extensions));
                            }
                            if (configs.length > 0) {
                                config_1 = mergeObjects.apply(void 0, tslib_1.__spread([config_1], configs));
                            }
                            config_1 = tslib_1.__assign({}, config_1, _this.getMetadata(result.config), { $references: configs.map((/**
                                 * @param {?} ext
                                 * @return {?}
                                 */
                                function (ext) { return _this.getMetadata(ext); })) });
                            resolve(config_1);
                        }));
                    }
                    else {
                        resolve(config_1);
                    }
                }
            }));
        }));
    };
    /**
     * @protected
     * @param {?} config
     * @return {?}
     */
    ExtensionLoaderService.prototype.getMetadata = /**
     * @protected
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var result = {};
        Object
            .keys(config)
            .filter((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return key.startsWith('$'); }))
            .forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            result[key] = config[key];
        }));
        return result;
    };
    /**
     * @protected
     * @param {?} url
     * @param {?} order
     * @return {?}
     */
    ExtensionLoaderService.prototype.loadConfig = /**
     * @protected
     * @param {?} url
     * @param {?} order
     * @return {?}
     */
    function (url, order) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            _this.http.get(url).subscribe((/**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                resolve({
                    order: order,
                    config: config
                });
            }), (/**
             * @return {?}
             */
            function () {
                resolve(null);
            }));
        }));
    };
    /**
     * Retrieves configuration elements.
     * Filters element by **enabled** and **order** attributes.
     * Example:
     *  `getElements<ViewerExtensionRef>(config, 'features.viewer.content')`
     */
    /**
     * Retrieves configuration elements.
     * Filters element by **enabled** and **order** attributes.
     * Example:
     *  `getElements<ViewerExtensionRef>(config, 'features.viewer.content')`
     * @template T
     * @param {?} config
     * @param {?} key
     * @param {?=} fallback
     * @return {?}
     */
    ExtensionLoaderService.prototype.getElements = /**
     * Retrieves configuration elements.
     * Filters element by **enabled** and **order** attributes.
     * Example:
     *  `getElements<ViewerExtensionRef>(config, 'features.viewer.content')`
     * @template T
     * @param {?} config
     * @param {?} key
     * @param {?=} fallback
     * @return {?}
     */
    function (config, key, fallback) {
        if (fallback === void 0) { fallback = []; }
        /** @type {?} */
        var values = getValue(config, key) || fallback || [];
        return values.filter(filterEnabled).sort(sortByOrder);
    };
    /**
     * @param {?} config
     * @param {?} key
     * @return {?}
     */
    ExtensionLoaderService.prototype.getContentActions = /**
     * @param {?} config
     * @param {?} key
     * @return {?}
     */
    function (config, key) {
        return this.getElements(config, key).map(this.setActionDefaults);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    ExtensionLoaderService.prototype.getRules = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (config && config.rules) {
            return config.rules;
        }
        return [];
    };
    /**
     * @param {?} config
     * @return {?}
     */
    ExtensionLoaderService.prototype.getRoutes = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (config) {
            return config.routes || [];
        }
        return [];
    };
    /**
     * @param {?} config
     * @return {?}
     */
    ExtensionLoaderService.prototype.getActions = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (config) {
            return config.actions || [];
        }
        return [];
    };
    /**
     * @param {?} config
     * @return {?}
     */
    ExtensionLoaderService.prototype.getFeatures = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (config) {
            return config.features || [];
        }
        return [];
    };
    /**
     * @protected
     * @param {?} action
     * @return {?}
     */
    ExtensionLoaderService.prototype.setActionDefaults = /**
     * @protected
     * @param {?} action
     * @return {?}
     */
    function (action) {
        if (action) {
            action.type = action.type || ContentActionType.default;
            action.icon = action.icon || 'extension';
        }
        return action;
    };
    ExtensionLoaderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ExtensionLoaderService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ ExtensionLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function ExtensionLoaderService_Factory() { return new ExtensionLoaderService(i0.inject(i1.HttpClient)); }, token: ExtensionLoaderService, providedIn: "root" });
    return ExtensionLoaderService;
}());
export { ExtensionLoaderService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExtensionLoaderService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,