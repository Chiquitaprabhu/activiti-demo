/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ContentActionType } from '../config/action.extensions';
import { filterEnabled, getValue, mergeObjects, sortByOrder } from '../config/extension-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ExtensionLoaderService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} configPath
     * @param {?} pluginsPath
     * @param {?=} extensions
     * @return {?}
     */
    load(configPath, pluginsPath, extensions) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            this.loadConfig(configPath, 0).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    /** @type {?} */
                    let config = result.config;
                    /** @type {?} */
                    const override = sessionStorage.getItem('app.extension.config');
                    if (override) {
                        config = JSON.parse(override);
                    }
                    if (config.$references && config.$references.length > 0) {
                        /** @type {?} */
                        const plugins = config.$references.map((/**
                         * @param {?} name
                         * @param {?} idx
                         * @return {?}
                         */
                        (name, idx) => this.loadConfig(`${pluginsPath}/${name}`, idx)));
                        Promise.all(plugins).then((/**
                         * @param {?} results
                         * @return {?}
                         */
                        (results) => {
                            /** @type {?} */
                            const configs = results
                                .filter((/**
                             * @param {?} entry
                             * @return {?}
                             */
                            (entry) => entry))
                                .sort(sortByOrder)
                                .map((/**
                             * @param {?} entry
                             * @return {?}
                             */
                            (entry) => entry.config));
                            if (extensions && extensions.length > 0) {
                                configs.push(...extensions);
                            }
                            if (configs.length > 0) {
                                config = mergeObjects(config, ...configs);
                            }
                            config = Object.assign({}, config, this.getMetadata(result.config), { $references: configs.map((/**
                                 * @param {?} ext
                                 * @return {?}
                                 */
                                (ext) => this.getMetadata(ext))) });
                            resolve(config);
                        }));
                    }
                    else {
                        resolve(config);
                    }
                }
            }));
        }));
    }
    /**
     * @protected
     * @param {?} config
     * @return {?}
     */
    getMetadata(config) {
        /** @type {?} */
        const result = {};
        Object
            .keys(config)
            .filter((/**
         * @param {?} key
         * @return {?}
         */
        (key) => key.startsWith('$')))
            .forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            result[key] = config[key];
        }));
        return result;
    }
    /**
     * @protected
     * @param {?} url
     * @param {?} order
     * @return {?}
     */
    loadConfig(url, order) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            this.http.get(url).subscribe((/**
             * @param {?} config
             * @return {?}
             */
            (config) => {
                resolve({
                    order,
                    config
                });
            }), (/**
             * @return {?}
             */
            () => {
                resolve(null);
            }));
        }));
    }
    /**
     * Retrieves configuration elements.
     * Filters element by **enabled** and **order** attributes.
     * Example:
     *  `getElements<ViewerExtensionRef>(config, 'features.viewer.content')`
     * @template T
     * @param {?} config
     * @param {?} key
     * @param {?=} fallback
     * @return {?}
     */
    getElements(config, key, fallback = []) {
        /** @type {?} */
        const values = getValue(config, key) || fallback || [];
        return values.filter(filterEnabled).sort(sortByOrder);
    }
    /**
     * @param {?} config
     * @param {?} key
     * @return {?}
     */
    getContentActions(config, key) {
        return this.getElements(config, key).map(this.setActionDefaults);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    getRules(config) {
        if (config && config.rules) {
            return config.rules;
        }
        return [];
    }
    /**
     * @param {?} config
     * @return {?}
     */
    getRoutes(config) {
        if (config) {
            return config.routes || [];
        }
        return [];
    }
    /**
     * @param {?} config
     * @return {?}
     */
    getActions(config) {
        if (config) {
            return config.actions || [];
        }
        return [];
    }
    /**
     * @param {?} config
     * @return {?}
     */
    getFeatures(config) {
        if (config) {
            return config.features || [];
        }
        return [];
    }
    /**
     * @protected
     * @param {?} action
     * @return {?}
     */
    setActionDefaults(action) {
        if (action) {
            action.type = action.type || ContentActionType.default;
            action.icon = action.icon || 'extension';
        }
        return action;
    }
}
ExtensionLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ExtensionLoaderService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ ExtensionLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function ExtensionLoaderService_Factory() { return new ExtensionLoaderService(i0.inject(i1.HttpClient)); }, token: ExtensionLoaderService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExtensionLoaderService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,