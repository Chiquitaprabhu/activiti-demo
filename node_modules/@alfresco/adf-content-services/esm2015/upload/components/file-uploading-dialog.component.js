/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileUploadStatus, UploadService, UserPreferencesService } from '@alfresco/adf-core';
import { ChangeDetectorRef, Component, Input, Output, EventEmitter, ViewChild, HostBinding } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { FileUploadingListComponent } from './file-uploading-list.component';
import { takeUntil } from 'rxjs/operators';
export class FileUploadingDialogComponent {
    /**
     * @param {?} uploadService
     * @param {?} changeDetector
     * @param {?} userPreferencesService
     */
    constructor(uploadService, changeDetector, userPreferencesService) {
        this.uploadService = uploadService;
        this.changeDetector = changeDetector;
        this.userPreferencesService = userPreferencesService;
        /**
         * Dialog direction. Can be 'ltr' or 'rtl.
         */
        this.direction = 'ltr';
        this.onDestroy$ = new Subject();
        /**
         * Dialog position. Can be 'left' or 'right'.
         */
        this.position = 'right';
        /**
         * Emitted when a file in the list has an error.
         */
        this.error = new EventEmitter();
        this.filesUploadingList = [];
        this.isDialogActive = false;
        this.totalCompleted = 0;
        this.totalErrors = 0;
        this.isDialogMinimized = false;
        this.isConfirmation = false;
    }
    /**
     * @return {?}
     */
    get isPositionRight() {
        return (this.direction === 'ltr' && this.position === 'right')
            || (this.direction === 'rtl' && this.position === 'left')
            || null;
    }
    /**
     * @return {?}
     */
    get isPositionLeft() {
        return (this.direction === 'ltr' && this.position === 'left')
            || (this.direction === 'rtl' && this.position === 'right')
            || null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.listSubscription = this.uploadService
            .queueChanged.subscribe((/**
         * @param {?} fileList
         * @return {?}
         */
        (fileList) => {
            this.filesUploadingList = fileList;
            if (this.filesUploadingList.length) {
                this.isDialogActive = true;
            }
        }));
        this.counterSubscription = merge(this.uploadService.fileUploadComplete, this.uploadService.fileUploadDeleted)
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.totalCompleted = event.totalComplete;
            this.changeDetector.detectChanges();
        }));
        this.errorSubscription = this.uploadService.fileUploadError
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.totalErrors = event.totalError;
            this.changeDetector.detectChanges();
        }));
        this.fileUploadSubscription = this.uploadService
            .fileUpload.subscribe((/**
         * @return {?}
         */
        () => {
            this.changeDetector.detectChanges();
        }));
        this.uploadService.fileDeleted.subscribe((/**
         * @param {?} objId
         * @return {?}
         */
        (objId) => {
            if (this.filesUploadingList) {
                /** @type {?} */
                const file = this.filesUploadingList.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => {
                    return item.data.entry.id === objId;
                }));
                if (file) {
                    file.status = FileUploadStatus.Cancelled;
                    this.changeDetector.detectChanges();
                }
            }
        }));
        this.userPreferencesService.select('textOrientation')
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} textOrientation
         * @return {?}
         */
        (textOrientation) => {
            this.direction = textOrientation;
        }));
    }
    /**
     * Toggle confirmation message.
     * @return {?}
     */
    toggleConfirmation() {
        this.isConfirmation = !this.isConfirmation;
        if (this.isDialogMinimized) {
            this.isDialogMinimized = false;
        }
    }
    /**
     * Cancel uploads and hide confirmation
     * @return {?}
     */
    cancelAllUploads() {
        this.toggleConfirmation();
        this.uploadList.cancelAllFiles();
    }
    /**
     * Toggle dialog minimized state.
     * @return {?}
     */
    toggleMinimized() {
        this.isDialogMinimized = !this.isDialogMinimized;
        this.changeDetector.detectChanges();
    }
    /**
     * Dismiss dialog
     * @return {?}
     */
    close() {
        this.isConfirmation = false;
        this.totalCompleted = 0;
        this.totalErrors = 0;
        this.filesUploadingList = [];
        this.isDialogActive = false;
        this.isDialogMinimized = false;
        this.uploadService.clearQueue();
        this.changeDetector.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uploadService.clearQueue();
        this.listSubscription.unsubscribe();
        this.counterSubscription.unsubscribe();
        this.fileUploadSubscription.unsubscribe();
        this.errorSubscription.unsubscribe();
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
FileUploadingDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-file-uploading-dialog',
                template: "<div *ngIf=\"isDialogActive\"\n     class=\"adf-upload-dialog\"\n     id=\"upload-dialog\"\n     [class.adf-upload-dialog--minimized]=\"isDialogMinimized\">\n    <header class=\"adf-upload-dialog__header\">\n        <button\n            mat-button\n            color=\"secondary\"\n            [disabled]=\"isConfirmation\"\n            (click)=\"toggleMinimized()\">\n            <mat-icon\n                mat-list-icon\n                title=\"{{ (isDialogMinimized ? 'ADF_FILE_UPLOAD.BUTTON.MAXIMIZE': 'ADF_FILE_UPLOAD.BUTTON.MINIMIZE') | translate }}\">\n                    {{ isDialogMinimized ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\n            </mat-icon>\n        </button>\n\n        <span\n            class=\"adf-upload-dialog__title\"\n            *ngIf=\"!uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS'\n                | translate: {\n                    completed: totalCompleted,\n                    total: filesUploadingList.length\n                }\n            }}\n        </span>\n\n        <span\n            class=\"adf-upload-dialog__title\"\n            *ngIf=\"uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED' | translate }}\n        </span>\n    </header>\n\n    <section class=\"adf-upload-dialog__info\"\n        *ngIf=\"totalErrors\">\n        {{\n            (totalErrors > 1\n                 ? 'FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS'\n                 : 'FILE_UPLOAD.MESSAGES.UPLOAD_ERROR')\n                 | translate: { total: totalErrors }\n        }}\n    </section>\n\n    <section class=\"adf-upload-dialog__content\"\n        [class.adf-upload-dialog--padding]=\"isConfirmation\">\n        <adf-file-uploading-list\n            [class.adf-upload-dialog--hide]=\"isConfirmation\"\n            #uploadList\n            [files]=\"filesUploadingList\">\n                <ng-template let-file=\"$implicit\">\n                     <adf-file-uploading-list-row\n                        [file]=\"file\"\n                        (remove)=\"uploadList.removeFile(file)\"\n                        (cancel)=\"uploadList.cancelFile(file)\">\n                    </adf-file-uploading-list-row>\n                </ng-template>\n        </adf-file-uploading-list>\n\n        <div\n            class=\"adf-upload-dialog__confirmation\"\n            [class.adf-upload-dialog--hide]=\"!isConfirmation\">\n                <p class=\"adf-upload-dialog__confirmation--title\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE' | translate }}\n                </p>\n\n                <p class=\"adf-upload-dialog__confirmation--text\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT' | translate }}\n                </p>\n        </div>\n    </section>\n\n    <footer class=\"adf-upload-dialog__actions\"\n            *ngIf=\"!isConfirmation\">\n        <button\n            id=\"adf-upload-dialog-cancel-all\"\n            color=\"primary\"\n            mat-button\n            *ngIf=\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\"\n            (click)=\"toggleConfirmation()\">\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL' | translate }}\n        </button>\n\n        <button\n            id=\"adf-upload-dialog-close\"\n            *ngIf=\"uploadList.isUploadCompleted() || uploadList.isUploadCancelled()\"\n            mat-button\n            color=\"primary\"\n            (click)=\"close()\">\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CLOSE' | translate }}\n        </button>\n    </footer>\n\n    <footer class=\"adf-upload-dialog__actions\"\n            *ngIf=\"isConfirmation\">\n        <button\n            id=\"adf-upload-dialog-cancel\"\n            color=\"secondary\"\n            mat-button\n            (click)=\"cancelAllUploads()\">\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL' | translate }}\n        </button>\n\n        <button\n            id=\"adf-upload-dialog-confirm\"\n            mat-button\n            color=\"primary\"\n            (click)=\"toggleConfirmation()\">\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE' | translate }}\n        </button>\n    </footer>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FileUploadingDialogComponent.ctorParameters = () => [
    { type: UploadService },
    { type: ChangeDetectorRef },
    { type: UserPreferencesService }
];
FileUploadingDialogComponent.propDecorators = {
    uploadList: [{ type: ViewChild, args: ['uploadList',] }],
    position: [{ type: Input }],
    error: [{ type: Output }],
    isPositionRight: [{ type: HostBinding, args: ['attr.adfUploadDialogRight',] }],
    isPositionLeft: [{ type: HostBinding, args: ['attr.adfUploadDialogLeft',] }]
};
if (false) {
    /**
     * Dialog direction. Can be 'ltr' or 'rtl.
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.direction;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.onDestroy$;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.uploadList;
    /**
     * Dialog position. Can be 'left' or 'right'.
     * @type {?}
     */
    FileUploadingDialogComponent.prototype.position;
    /**
     * Emitted when a file in the list has an error.
     * @type {?}
     */
    FileUploadingDialogComponent.prototype.error;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.filesUploadingList;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.isDialogActive;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.totalCompleted;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.totalErrors;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.isDialogMinimized;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.isConfirmation;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.listSubscription;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.counterSubscription;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.fileUploadSubscription;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.errorSubscription;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.uploadService;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.userPreferencesService;
}
//# sourceMappingURL=data:application/json;base64,