/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BasicPropertiesService } from './basic-properties.service';
import { of, iif, Subject } from 'rxjs';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';
import { PropertyDescriptorsService } from './property-descriptors.service';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./basic-properties.service";
import * as i2 from "./config/content-metadata-config.factory";
import * as i3 from "./property-groups-translator.service";
import * as i4 from "./property-descriptors.service";
export class ContentMetadataService {
    /**
     * @param {?} basicPropertiesService
     * @param {?} contentMetadataConfigFactory
     * @param {?} propertyGroupTranslatorService
     * @param {?} propertyDescriptorsService
     */
    constructor(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
        this.error = new Subject();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getBasicProperties(node) {
        return of(this.basicPropertiesService.getProperties(node));
    }
    /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    getGroupedProperties(node, presetName = 'default') {
        /** @type {?} */
        let groupedProperties = of([]);
        if (node.aspectNames) {
            /** @type {?} */
            const contentMetadataConfig = this.contentMetadataConfigFactory.get(presetName);
            /** @type {?} */
            const groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter((/**
             * @param {?} groupName
             * @return {?}
             */
            (groupName) => contentMetadataConfig.isGroupAllowed(groupName)));
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(switchMap((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => iif((/**
                 * @return {?}
                 */
                () => contentMetadataConfig.isIncludeAllEnabled()), of(contentMetadataConfig.appendAllPreset(groups).concat(contentMetadataConfig.reorganiseByConfig(groups))), of(contentMetadataConfig.reorganiseByConfig(groups))))), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => contentMetadataConfig.filterExcludedPreset(groups))), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => this.filterEmptyPreset(groups))), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => this.setTitleToNameIfNotSet(groups))), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties))));
            }
        }
        return groupedProperties;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    setTitleToNameIfNotSet(propertyGroups) {
        propertyGroups.map((/**
         * @param {?} propertyGroup
         * @return {?}
         */
        (propertyGroup) => {
            propertyGroup.title = propertyGroup.title || propertyGroup.name;
        }));
        return propertyGroups;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    filterEmptyPreset(propertyGroups) {
        return propertyGroups.filter((/**
         * @param {?} props
         * @return {?}
         */
        (props) => props.properties.length));
    }
}
ContentMetadataService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ContentMetadataService.ctorParameters = () => [
    { type: BasicPropertiesService },
    { type: ContentMetadataConfigFactory },
    { type: PropertyGroupTranslatorService },
    { type: PropertyDescriptorsService }
];
/** @nocollapse */ ContentMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function ContentMetadataService_Factory() { return new ContentMetadataService(i0.inject(i1.BasicPropertiesService), i0.inject(i2.ContentMetadataConfigFactory), i0.inject(i3.PropertyGroupTranslatorService), i0.inject(i4.PropertyDescriptorsService)); }, token: ContentMetadataService, providedIn: "root" });
if (false) {
    /** @type {?} */
    ContentMetadataService.prototype.error;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.basicPropertiesService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.contentMetadataConfigFactory;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyGroupTranslatorService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyDescriptorsService;
}
//# sourceMappingURL=data:application/json;base64,