/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { RatingService } from './services/rating.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class RatingComponent {
    /**
     * @param {?} ratingService
     */
    constructor(ratingService) {
        this.ratingService = ratingService;
        this.average = 0;
        this.ratingsCounter = 0;
        this.ratingType = 'fiveStar';
        /**
         * Emitted when the "vote" gets changed.
         */
        this.changeVote = new EventEmitter();
        this.stars = [];
        this.onDestroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.ratingService.getRating(this.nodeId, this.ratingType)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} ratingEntry
         * @return {?}
         */
        (ratingEntry) => {
            this.refreshRating(ratingEntry);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @return {?}
     */
    calculateStars() {
        this.stars = [];
        /** @type {?} */
        const roundedAverage = Math.round(this.average);
        for (let i = 0; i < 5; i++) {
            if (i < roundedAverage) {
                this.stars.push({ fill: true });
            }
            else {
                this.stars.push({ fill: false });
            }
        }
    }
    /**
     * @param {?} vote
     * @return {?}
     */
    updateVote(vote) {
        if (this.ratingValue === vote) {
            this.unRateItem();
        }
        else {
            this.rateItem(vote);
        }
    }
    /**
     * @param {?} vote
     * @return {?}
     */
    rateItem(vote) {
        this.ratingService.postRating(this.nodeId, this.ratingType, vote)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} ratingEntry
         * @return {?}
         */
        (ratingEntry) => {
            this.refreshRating(ratingEntry);
        }));
    }
    /**
     * @return {?}
     */
    unRateItem() {
        this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe((/**
         * @return {?}
         */
        () => {
            this.ratingService.getRating(this.nodeId, this.ratingType)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((/**
             * @param {?} ratingEntry
             * @return {?}
             */
            (ratingEntry) => {
                this.refreshRating(ratingEntry);
            }));
        }));
    }
    /**
     * @param {?} ratingEntry
     * @return {?}
     */
    refreshRating(ratingEntry) {
        this.ratingValue = Number.parseFloat(ratingEntry.entry.myRating);
        this.average = ratingEntry.entry.aggregate.average;
        this.ratingsCounter = ratingEntry.entry.aggregate.numberOfRatings;
        this.calculateStars();
        this.changeVote.emit(this.average);
    }
}
RatingComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-rating',
                template: "<mat-list id=\"adf-rating-container\" class=\"adf-rating-container\">\n    <mat-list-item class=\"adf-rating-star\" *ngFor=\"let currentRate of stars; let idx = index;\">\n            <span id=\"adf-rate-{{idx}}\">\n                <mat-icon id=\"adf-colored-star-{{idx}}\" *ngIf=\"currentRate.fill\" class=\"adf-colored-star\"\n                          [ngClass]=\"{'adf-average-star': !ratingValue}\"\n                          (click)=\"updateVote(idx + 1)\">star_rate\n                </mat-icon>\n                <mat-icon id=\"adf-grey-star-{{idx}}\" *ngIf=\"!currentRate.fill\" class=\"adf-grey-star\"\n                          (click)=\"updateVote(idx + 1)\">star_border\n                </mat-icon>\n            </span>\n    </mat-list-item>\n    <div class=\"adf-rating-counter-container\">\n    <div id=\"adf-rating-counter\" class=\"adf-rating-counter\">{{ratingsCounter}}</div>\n    <div class=\"adf-rating-left\" *ngIf=\"ratingsCounter<=1\">Rating</div>\n    <div class=\"adf-rating-left\" *ngIf=\"ratingsCounter>1\">Ratings</div>\n    </div>\n</mat-list>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-rating-container{display:flex;overflow:hidden;width:100%}.adf-rating-container .adf-rating-counter-container{display:flex;align-items:center;padding:0 6px}.adf-rating-container .adf-rating-left{padding:0 6px}.adf-rating-container .adf-rating-star{display:flex;justify-content:center;transition:.3s;cursor:pointer;width:25px}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0!important}.adf-rating-container .adf-rating-star:hover{-webkit-transform:rotate(13deg) scale(1.2);transform:rotate(13deg) scale(1.2)}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-average-star,.adf-rating-container .adf-grey-star{color:grey!important}[dir=rtl] .adf-rating-container .adf-rating-star{-webkit-transform:rotate(145deg);transform:rotate(145deg)}[dir=rtl] .adf-rating-container .adf-rating-star:hover{-webkit-transform:rotate(158deg) scale(1.2);transform:rotate(158deg) scale(1.2)}"]
            }] }
];
/** @nocollapse */
RatingComponent.ctorParameters = () => [
    { type: RatingService }
];
RatingComponent.propDecorators = {
    nodeId: [{ type: Input }],
    changeVote: [{ type: Output }]
};
if (false) {
    /**
     * Identifier of the node to apply the rating to.
     * @type {?}
     */
    RatingComponent.prototype.nodeId;
    /** @type {?} */
    RatingComponent.prototype.average;
    /** @type {?} */
    RatingComponent.prototype.ratingsCounter;
    /** @type {?} */
    RatingComponent.prototype.ratingType;
    /** @type {?} */
    RatingComponent.prototype.ratingValue;
    /**
     * Emitted when the "vote" gets changed.
     * @type {?}
     */
    RatingComponent.prototype.changeVote;
    /** @type {?} */
    RatingComponent.prototype.stars;
    /** @type {?} */
    RatingComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    RatingComponent.prototype.ratingService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNvY2lhbC9yYXRpbmcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTFELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBUS9CLE1BQU0sT0FBTyxlQUFlOzs7O0lBc0J4QixZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQWhCaEQsWUFBTyxHQUFXLENBQUMsQ0FBQztRQUVwQixtQkFBYyxHQUFHLENBQUMsQ0FBQztRQUVuQixlQUFVLEdBQVcsVUFBVSxDQUFDOzs7O1FBTWhDLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWhDLFVBQUssR0FBZSxFQUFFLENBQUM7UUFFdkIsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7SUFHcEMsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUM7YUFDckQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDaEMsU0FBUzs7OztRQUNWLENBQUMsV0FBd0IsRUFBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxFQUNKLENBQUM7SUFDTixDQUFD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ZTs7SUFFZixrQ0FBb0I7O0lBRXBCLHlDQUFtQjs7SUFFbkIscUNBQWdDOztJQUVoQyxzQ0FBb0I7Ozs7O0lBR3BCLHFDQUNnQzs7SUFFaEMsZ0NBQXVCOztJQUV2QixxQ0FBb0M7Ozs7O0lBRXhCLHdDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSYXRpbmdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9yYXRpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBSYXRpbmdFbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1yYXRpbmcnLFxuICAgIHN0eWxlVXJsczogWycuL3JhdGluZy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9yYXRpbmcuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgUmF0aW5nQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiBJZGVudGlmaWVyIG9mIHRoZSBub2RlIHRvIGFwcGx5IHRoZSByYXRpbmcgdG8uICovXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIGF2ZXJhZ2U6IG51bWJlciA9IDA7XG5cbiAgICByYXRpbmdzQ291bnRlciA9IDA7XG5cbiAgICByYXRpbmdUeXBlOiBzdHJpbmcgPSAnZml2ZVN0YXInO1xuXG4gICAgcmF0aW5nVmFsdWU6IG51bWJlcjtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIFwidm90ZVwiIGdldHMgY2hhbmdlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBjaGFuZ2VWb3RlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgc3RhcnM6IEFycmF5PGFueT4gPSBbXTtcblxuICAgIG9uRGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByYXRpbmdTZXJ2aWNlOiBSYXRpbmdTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoKSB7XG4gICAgICAgIHRoaXMucmF0aW5nU2VydmljZS5nZXRSYXRpbmcodGhpcy5ub2RlSWQsIHRoaXMucmF0aW5nVHlwZSlcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgIChyYXRpbmdFbnRyeTogUmF0aW5nRW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hSYXRpbmcocmF0aW5nRW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgY2FsY3VsYXRlU3RhcnMoKSB7XG4gICAgICAgIHRoaXMuc3RhcnMgPSBbXTtcbiAgICAgICAgY29uc3Qgcm91bmRlZEF2ZXJhZ2UgPSBNYXRoLnJvdW5kKHRoaXMuYXZlcmFnZSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIDwgcm91bmRlZEF2ZXJhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJzLnB1c2goe2ZpbGw6IHRydWV9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFycy5wdXNoKHtmaWxsOiBmYWxzZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlVm90ZSh2b3RlOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMucmF0aW5nVmFsdWUgPT09IHZvdGUpIHtcbiAgICAgICAgICAgIHRoaXMudW5SYXRlSXRlbSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yYXRlSXRlbSh2b3RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJhdGVJdGVtKHZvdGU6IG51bWJlcikge1xuICAgICAgICB0aGlzLnJhdGluZ1NlcnZpY2UucG9zdFJhdGluZyh0aGlzLm5vZGVJZCwgdGhpcy5yYXRpbmdUeXBlLCB2b3RlKVxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKHJhdGluZ0VudHJ5OiBSYXRpbmdFbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFJhdGluZyhyYXRpbmdFbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdW5SYXRlSXRlbSgpIHtcbiAgICAgICAgdGhpcy5yYXRpbmdTZXJ2aWNlLmRlbGV0ZVJhdGluZyh0aGlzLm5vZGVJZCwgdGhpcy5yYXRpbmdUeXBlKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbmdTZXJ2aWNlLmdldFJhdGluZyh0aGlzLm5vZGVJZCwgdGhpcy5yYXRpbmdUeXBlKVxuICAgICAgICAgICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSlcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAgICAgKHJhdGluZ0VudHJ5OiBSYXRpbmdFbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoUmF0aW5nKHJhdGluZ0VudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZWZyZXNoUmF0aW5nKHJhdGluZ0VudHJ5OiBSYXRpbmdFbnRyeSkge1xuICAgICAgICB0aGlzLnJhdGluZ1ZhbHVlID0gTnVtYmVyLnBhcnNlRmxvYXQocmF0aW5nRW50cnkuZW50cnkubXlSYXRpbmcpO1xuICAgICAgICB0aGlzLmF2ZXJhZ2UgPSByYXRpbmdFbnRyeS5lbnRyeS5hZ2dyZWdhdGUuYXZlcmFnZTtcbiAgICAgICAgdGhpcy5yYXRpbmdzQ291bnRlciA9IHJhdGluZ0VudHJ5LmVudHJ5LmFnZ3JlZ2F0ZS5udW1iZXJPZlJhdGluZ3M7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlU3RhcnMoKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VWb3RlLmVtaXQodGhpcy5hdmVyYWdlKTtcbiAgICB9XG59XG4iXX0=