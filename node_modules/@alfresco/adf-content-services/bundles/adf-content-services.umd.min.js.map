{"version":3,"sources":["ng://@alfresco/adf-content-services/material.module.ts","node_modules/tslib/tslib.es6.js","ng://@alfresco/adf-content-services/document-list/models/document-folder.model.ts","ng://@alfresco/adf-content-services/document-list/services/custom-resources.service.ts","ng://@alfresco/adf-content-services/document-list/services/document-list.service.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.component.ts","ng://@alfresco/adf-content-services/dialogs/node-lock.dialog.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-dialog.service.ts","ng://@alfresco/adf-content-services/directives/node-lock.directive.ts","ng://@alfresco/adf-content-services/directives/content-directive.module.ts","ng://@alfresco/adf-content-services/social/services/rating.service.ts","ng://@alfresco/adf-content-services/social/rating.component.ts","ng://@alfresco/adf-content-services/social/like.component.ts","ng://@alfresco/adf-content-services/social/social.module.ts","ng://@alfresco/adf-content-services/tag/services/tag.service.ts","ng://@alfresco/adf-content-services/tag/tag-actions.component.ts","ng://@alfresco/adf-content-services/tag/tag-list.component.ts","ng://@alfresco/adf-content-services/tag/tag-node-list.component.ts","ng://@alfresco/adf-content-services/tag/tag.module.ts","ng://@alfresco/adf-content-services/webscript/webscript.component.ts","ng://@alfresco/adf-content-services/webscript/webscript.module.ts","ng://@alfresco/adf-content-services/document-list/data/share-data-row.model.ts","ng://@alfresco/adf-content-services/document-list/data/share-datatable-adapter.ts","ng://@alfresco/adf-content-services/document-list/models/preset.model.ts","ng://@alfresco/adf-content-services/document-list/models/content-action.model.ts","ng://@alfresco/adf-content-services/document-list/components/node.event.ts","ng://@alfresco/adf-content-services/document-list/components/document-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-column/content-column-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-column/content-column.component.ts","ng://@alfresco/adf-content-services/document-list/models/permissions.model.ts","ng://@alfresco/adf-content-services/document-list/services/node-actions.service.ts","ng://@alfresco/adf-content-services/document-list/services/document-actions.service.ts","ng://@alfresco/adf-content-services/document-list/services/folder-actions.service.ts","ng://@alfresco/adf-content-services/document-list/components/content-action/content-action-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-action/content-action.component.ts","ng://@alfresco/adf-content-services/document-list/components/library-name-column/library-name-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/library-role-column/library-role-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/library-status-column/library-status-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/name-column/name-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/trashcan-name-column/trashcan-name-column.component.ts","ng://@alfresco/adf-content-services/document-list/models/document-library.model.ts","ng://@alfresco/adf-content-services/document-list/models/permissions-style.model.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-dialog.component.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-list-row.component.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-list.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-files.event.ts","ng://@alfresco/adf-content-services/upload/components/base-upload/upload-base.ts","ng://@alfresco/adf-content-services/upload/components/upload-button.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-version-button.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-drag-area.component.ts","ng://@alfresco/adf-content-services/upload/pipes/file-upload-error.pipe.ts","ng://@alfresco/adf-content-services/upload/directives/file-draggable.directive.ts","ng://@alfresco/adf-content-services/upload/upload.module.ts","ng://@alfresco/adf-content-services/document-list/document-list.module.ts","ng://@alfresco/adf-content-services/search/search-query-builder.service.ts","ng://@alfresco/adf-content-services/search/components/search.component.ts","ng://@alfresco/adf-content-services/search/components/animations.ts","ng://@alfresco/adf-content-services/search/components/empty-search-result.component.ts","ng://@alfresco/adf-content-services/search/components/search-control.component.ts","ng://@alfresco/adf-content-services/search/components/search-trigger.directive.ts","ng://@alfresco/adf-content-services/search/components/search-filter/models/search-filter-list.model.ts","ng://@alfresco/adf-content-services/search/components/search-filter/search-filter.component.ts","ng://@alfresco/adf-content-services/search/components/search-text/search-text.component.ts","ng://@alfresco/adf-content-services/search/components/search-radio/search-radio.component.ts","ng://@alfresco/adf-content-services/search/components/search-slider/search-slider.component.ts","ng://@alfresco/adf-content-services/search/forms/live-error-state-matcher.ts","ng://@alfresco/adf-content-services/search/components/search-number-range/search-number-range.component.ts","ng://@alfresco/adf-content-services/search/components/search-check-list/search-check-list.component.ts","ng://@alfresco/adf-content-services/search/components/search-date-range/search-date-range.component.ts","ng://@alfresco/adf-content-services/search/components/search-filter/search-filter.service.ts","ng://@alfresco/adf-content-services/search/components/search-chip-list/search-chip-list.component.ts","ng://@alfresco/adf-content-services/search/components/search-sorting-picker/search-sorting-picker.component.ts","ng://@alfresco/adf-content-services/search/components/search-widget-container/search-widget-container.component.ts","ng://@alfresco/adf-content-services/search/search.module.ts","ng://@alfresco/adf-content-services/site-dropdown/sites-dropdown.component.ts","ng://@alfresco/adf-content-services/site-dropdown/sites-dropdown.module.ts","ng://@alfresco/adf-content-services/breadcrumb/breadcrumb.component.ts","ng://@alfresco/adf-content-services/breadcrumb/dropdown-breadcrumb.component.ts","ng://@alfresco/adf-content-services/breadcrumb/breadcrumb.module.ts","ng://@alfresco/adf-content-services/dialogs/confirm.dialog.ts","ng://@alfresco/adf-content-services/version-manager/version-list.component.ts","ng://@alfresco/adf-content-services/version-manager/version-manager.component.ts","ng://@alfresco/adf-content-services/version-manager/version-upload.component.ts","ng://@alfresco/adf-content-services/version-manager/version-manager.module.ts","ng://@alfresco/adf-content-services/content-node-selector/name-location-cell/name-location-cell.component.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.service.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector-panel.component.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.module.ts","ng://@alfresco/adf-content-services/dialogs/folder-name.validators.ts","ng://@alfresco/adf-content-services/dialogs/folder.dialog.ts","ng://@alfresco/adf-content-services/dialogs/library/library.dialog.ts","ng://@alfresco/adf-content-services/dialogs/dialog.module.ts","ng://@alfresco/adf-content-services/folder-directive/folder-create.directive.ts","ng://@alfresco/adf-content-services/folder-directive/folder-edit.directive.ts","ng://@alfresco/adf-content-services/folder-directive/folder-directive.module.ts","ng://@alfresco/adf-content-services/content-metadata/components/content-metadata-card/content-metadata-card.component.ts","ng://@alfresco/adf-content-services/content-metadata/services/basic-properties.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/property-groups-translator.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/property-group-reader.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/aspect-oriented-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/indifferent-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/layout-oriented-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/content-metadata-config.factory.ts","ng://@alfresco/adf-content-services/content-metadata/services/property-descriptors.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/content-metadata.service.ts","ng://@alfresco/adf-content-services/content-metadata/components/content-metadata/content-metadata.component.ts","ng://@alfresco/adf-content-services/content-metadata/content-metadata.module.ts","ng://@alfresco/adf-content-services/permission-manager/models/permission.model.ts","ng://@alfresco/adf-content-services/permission-manager/services/node-permission.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/permission-list/permission-list.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/permission-list/no-permission.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/inherited-button.directive.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission-dialog.component.ts","ng://@alfresco/adf-content-services/permission-manager/services/node-permission-dialog.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/search-config-permission.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission-panel.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission.component.ts","ng://@alfresco/adf-content-services/permission-manager/permission-manager.module.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.dialog.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.directive.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.module.ts","ng://@alfresco/adf-content-services/tree-view/models/tree-view.model.ts","ng://@alfresco/adf-content-services/tree-view/services/tree-view.service.ts","ng://@alfresco/adf-content-services/tree-view/data/tree-view-datasource.ts","ng://@alfresco/adf-content-services/tree-view/components/tree-view.component.ts","ng://@alfresco/adf-content-services/tree-view/tree-view.module.ts","ng://@alfresco/adf-content-services/content.module.ts"],"names":["modules","MatButtonModule","MatChipsModule","MatDialogModule","MatIconModule","MatCardModule","MatInputModule","MatListModule","MatProgressSpinnerModule","MatProgressBarModule","MatRippleModule","MatMenuModule","MatOptionModule","MatExpansionModule","MatSelectModule","MatCheckboxModule","MatDatepickerModule","MatSlideToggleModule","MatRadioModule","MatSliderModule","MatTreeModule","MaterialModule","NgModule","args","imports","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","__spread","concat","DocumentLoaderNode","currentNode","children","CustomResourcesService","apiService","logService","CREATE_PERMISSION","getRecentFiles","personId","pagination","filters","_this","defaultFilter","Observable","observer","peopleApi","getPerson","person","username","entry","id","filterQueries","query","join","SearchRequest","language","include","sort","type","field","ascending","paging","maxItems","skipCount","searchApi","search","searchResult","complete","err","pipe","catchError","handleError","loadFavorites","includeFields","includeFieldsRequest","getIncludesFields","options","where","favoritesApi","getFavorites","page","list","entries","map","_a","target","file","folder","properties","cm:title","title","cm:description","description","loadMemberSites","listSiteMembershipsForPerson","SiteMemberPaging","site","allowableOperations","name","loadSites","sitesApi","getSites","loadTrashcan","from","nodesApi","getDeletedNodes","loadSharedLinks","sharedLinksApi","findSharedLinks","isCustomSource","folderId","isCustomSources","indexOf","isSupportedSource","isSupportedSources","loadFolderByNodeId","nodeId","getCorrespondingNodeIds","node","getIdFromEntry","getNode","of","guid","targetGuid","hasCorrespondingNodeIds","tslib_1.__spread","filter","element","index","array","throwError","Injectable","providedIn","AlfrescoApiService","LogService","DocumentListService","contentService","customResourcesService","deleteNode","getInstance","nodes","copyNode","targetParentId","moveNode","getFolder","opts","rootNodeId","ROOT_ID","rootFolderId","params","includeSource","relativePath","getNodeChildren","getFolderNode","isCustomSourceService","retrieveDocumentNode","forkJoin","results","ContentService","ContentNodeSelectorComponent","data","buttonActionName","actionName","toUpperCase","close","select","onSelect","nodeList","chosenNode","onClick","Component","selector","template","encapsulation","ViewEncapsulation","None","Inject","MAT_DIALOG_DATA","NodeLockDialogComponent","formBuilder","dialog","alfrescoApi","ngOnInit","nodeName","form","group","isLocked","allowOwner","isTimeLock","time","moment","defineProperty","duration","diff","asSeconds","NodeBodyLock","timeToExpire","lockTimeInSeconds","lifetime","toggleLock","lockNode","nodeBodyLock","unlockNode","submit","catch","onError","FormBuilder","MatDialogRef","Optional","ContentNodeDialogService","documentListService","siteService","translation","thumbnailService","EventEmitter","openFileBrowseDialogByFolderId","folderNodeId","switchMap","nodeEntry","openUploadFileDialog","openLockNodeDialog","contentEntry","observable","Subject","hasAllowableOperations","AllowableOperationsEnum","LOCK","open","emit","width","openFileBrowseDialogBySite","response","openFolderBrowseDialogBySite","openFolderBrowseDialogByFolderId","openUploadFolderDialog","openCopyMoveDialog","action","permission","excludeSiteContent","subscribe","bind","getTitleTranslation","currentFolderId","parentId","imageResolver","isSelectionValid","isCopyMoveSelectionValid","nonDocumentSiteContent","openContentNodeDialog","errors","Error","JSON","stringify","statusCode","instant","hasAllowableOperationsOnNodeFolder","isNodeFile","currentPanelClass","chosenWidth","panelClass","row","col","getMimeTypeIcon","isFile","isNodeFolder","isFolder","hasEntityCreatePermission","isSite","nodeType","closeAll","MatDialog","SitesService","TranslationService","ThumbnailService","Output","NodeLockDirective","renderer","contentNodeDialogService","event","preventDefault","ngAfterViewInit","setProperty","nativeElement","Directive","ElementRef","Renderer2","Input","HostListener","ContentDirectiveModule","CommonModule","declarations","RatingService","getRating","ratingType","core","ratingsApi","postRating","vote","ratingBody","RatingBody","myRating","rate","deleteRating","removeRating","console","RatingComponent","ratingService","average","ratingsCounter","changeVote","stars","onDestroy$","ngOnChanges","takeUntil","ratingEntry","refreshRating","ngOnDestroy","calculateStars","roundedAverage","Math","round","fill","updateVote","ratingValue","unRateItem","rateItem","Number","parseFloat","aggregate","numberOfRatings","LikeComponent","likesCounter","isLike","clean","ratedAt","likeClick","SocialModule","TagService","refresh","getTagsByNodeId","tagsApi","getNodeTags","getAllTheTags","getTags","addTag","tagName","tagBody","TagBody","tag","observableAdd","tagEntry","removeTag","observableRemove","TagActionsComponent","tagService","translateService","successAdd","disableAddTag","subscriptions","refreshTag","forEach","subscription","unsubscribe","tagPaging","tagsEntries","searchTag","newTagName","get","errorMsg","searchTagName","find","currentTag","cleanErrorMsg","TagListComponent","size","isLoading","isSizeMinimum","defaultPagination","hasMoreItems","tags","loadMoreTags","count","loadLessTags","slice","TagNodeListComponent","showDelete","TagModule","FormsModule","ReactiveFormsModule","CoreModule","forChild","WebscriptComponent","showData","contextRoot","servicePath","contentType","success","undefined","showError","changes","webScript","executeWebScript","scriptPath","scriptArgs","webScriptData","showDataAsDataTable","log","schema","ObjectDataTableAdapter","generateSchema","isDataTableContent","WebScriptModule","ShareDataRow","obj","permissionsStyle","cache","isSelected","cssClass","ERR_OBJECT_NOT_FOUND","isDropTarget","isFolderAndHasPermissionToUpload","getPermissionClass","nodeEntity","permissionsClasses","currentPermissionsStyle","applyPermissionStyleToFolder","applyPermissionStyleToFile","css","cacheValue","key","getValue","ObjectUtils","imageErrorResolver","content","mimeType","hasValue","ShareDataTableAdapter","sorting","sortingMode","ERR_ROW_NOT_FOUND","ERR_COL_NOT_FOUND","thumbnails","rows","columns","_sortingMode","newValue","toLowerCase","getRows","setRows","getColumns","setColumns","dataRow","resolved","getFolderIcon","getDocumentThumbnailUrl","getDefaultMimeTypeIcon","getSorting","setSorting","sortRows","direction","DataSorting","setFilter","setImageResolver","resolver","isSmartFolder","isRuleFolder","isALinkFolder","nodeAspects","getNodeAspectNames","aspectNames","includes","numeric","a","left","Date","valueOf","toString","right","localeCompare","loadPage","nodePaging","merge","shareDataRows","nodeEntries","item","sortable","c","listPrunedDuplicate","elementToFilter","currentRow","presetsDefaultModel","-trashcan-","srTitle","format","-sites-","-mysites-","-favorites-","-recent-","-sharedlinks-","default","ContentActionModel","disableWithNoPermission","disabled","visible","icon","handler","execute","Document","Folder","All","DocumentActionModel","json","_super","tslib_1.__extends","FolderActionModel","NodeEntityEvent","BaseEvent","NodeEntryEvent","DocumentListComponent","ngZone","elementRef","appConfig","userPreferencesService","alfrescoApiService","lockService","DEFAULT_PAGINATION","Pagination","totalItems","display","DisplayMode","List","locationFormat","navigate","showHeader","navigationMode","DOUBLE_CLICK_NAVIGATION","selectionMode","multiselect","contentActions","contentActionsPosition","contextMenuActions","emptyFolderImageUrl","allowDropFiles","loading","_rowFilter","stickyHeader","_currentFolderId","nodeClick","nodeDblClick","folderChange","preview","ready","actions","contextActionHandler","noPermission","selection","$folderNode","_pagination","BehaviorSubject","layoutPresets","rowMenuCache","UserPreferenceValues","PaginationSize","pagSize","rowFilter","reload","resetNewFolderPagination","loadFolder","getContextActions","getNodeActions","currentAction","model","subject","columnList","getDefaultSorting","defaultSorting","getLayoutPreset","ObjectDataColumn","isMobile","test","navigator","userAgent","isEmpty","loadLayoutPresets","val","contextActionCallback","enforceSingleClickNavigationForMobile","ngAfterContentInit","setTableSchema","hasCustomLayout","setupDefaultColumns","resetSelection","firstChange","currentValue","onDataReady","run","executeContentAction","target_1","refreshAction","actionsByTarget","isActionDisabled","isActionVisible","onShowContextMenu","navigateTo","canNavigateFolder","getNodeFolderDestinationId","isLinkFolder","updateCustomSourceData","handlerSub","setLoadingState","clearTimeout","loadingTimeout","setTimeout","documentNode","folderNode","onPageLoaded","dataTable","preset","onPreviewFile","onNodeClick","domEvent","CustomEvent","detail","sender","bubbles","dispatchEvent","defaultPrevented","SINGLE_CLICK_NAVIGATION","executeActionClick","onNodeDblClick","onNodeSelect","onNodeUnselect","onShowRowContextMenu","onShowRowActionsMenu","onExecuteRowAction","externalSettings","updatePagination","requestPaginationModel","message","parse","host","class","NgZone","AppConfigService","UserPreferencesService","LockService","ContentChild","DataColumnListComponent","CustomLoadingContentTemplateDirective","CustomNoPermissionTemplateDirective","CustomEmptyContentTemplateDirective","ViewChild","ContentColumnListComponent","documentList","registerColumn","column","ContentColumnComponent","register","TemplateRef","PermissionModel","NodeActionsService","contentDialogService","dialogRef","downloadNode","NodeDownloadDirective","copyContent","doFileOperation","copyFolder","moveContent","moveFolder","selections","DocumentActionsService","nodeActionsService","permissionEvent","handlers","setupActionHandlers","getHandler","lKey","setHandler","canExecuteAction","actionObservable","prepareHandlers","fileOperationMessage","handlerObservable","FolderActionsService","ContentActionListComponent","registerAction","unregisterAction","idx","splice","ContentActionComponent","documentActions","folderActions","ContentActionTarget","folderActionModel","generateAction","documentActionModel","unregister","getSystemHandler","providers","LibraryNameColumnComponent","displayTooltip$","displayText$","updateValue","sub","nodeUpdated","context","makeLibraryTitle","makeLibraryTooltip","library","isDuplicate","some","changeDetection","ChangeDetectionStrategy","OnPush","LibraryRoleColumnComponent","api","role","Site","RoleEnum","SiteManager","SiteCollaborator","SiteContributor","SiteConsumer","LibraryStatusColumnComponent","visibility","VisibilityEnum","PUBLIC","PRIVATE","MODERATED","NameColumnComponent","TrashcanNameColumnComponent","isLibrary","displayText","displayTooltip","NodePaging","NodePagingList","NodeMinimalEntry","NodeMinimal","UserInfo","ContentInfo","PathInfoEntity","PathElementEntity","PermissionStyleModel","FileUploadingDialogComponent","uploadService","changeDetector","position","filesUploadingList","isDialogActive","totalCompleted","totalErrors","isDialogMinimized","isConfirmation","listSubscription","queueChanged","fileList","counterSubscription","fileUploadComplete","fileUploadDeleted","totalComplete","detectChanges","errorSubscription","fileUploadError","totalError","fileUploadSubscription","fileUpload","fileDeleted","objId","status","FileUploadStatus","Cancelled","textOrientation","toggleConfirmation","cancelAllUploads","uploadList","cancelAllFiles","toggleMinimized","clearQueue","UploadService","ChangeDetectorRef","HostBinding","FileUploadingListRowComponent","cancel","remove","onCancel","onRemove","showCancelledStatus","Aborted","Deleted","isUploadVersion","newVersion","FileUploadingListComponent","files","cancelFile","cancelUpload","removeFile","notifyError","cancelNodeVersionInstances","getUploadingFiles","deletedFiles","Complete","isUploadCompleted","isUploadCancelled","Boolean","Starting","Progress","Pending","every","permanent","_i","messageError","fileName","total","NodesApiService","UploadFilesEvent","callback","isDefaultPrevented","pauseUpload","resumeUpload","addToQueue","uploadFilesInTheQueue","UploadBase","translationService","acceptedFilesType","versioning","majorVersion","beginUpload","uploadFiles","filteredFiles","createFileModel","webkitRelativePath","replace","uploadQueue","uploadFilesInfo","fileInfo","relativeFolder","isFileAcceptable","isFileSizeAcceptable","split","ext","trim","extension","path","FileModel","comment","isFileSizeAllowed","isMaxFileSizeDefined","isFileSizeCorrect","maxFilesSize","acceptableSize","UploadButtonComponent","uploadFolders","multipleFiles","tooltip","permissionValue","checkPermission","isButtonDisabled","onFilesAdded","$event","FileUtils","toFileArray","currentTarget","onDirectoryAdded","res","nodeHasPermission","CREATE","viewProviders","provide","EXTENDIBLE_COMPONENT","useExisting","forwardRef","UploadVersionButtonComponent","fileModel","UPDATE","UploadDragAreaComponent","notificationService","onFilesDropped","onFolderEntityDropped","isDirectory","flatten","filesInfo","showUndoNotificationBar","latestFilesAdded","messageTranslate","actionTranslate","openSnackMessageAction","onAction","isDroppable","onUploadFiles","stopPropagation","isTargetNodeFolder","destinationFolderName_1","NotificationService","FileUploadErrorPipe","transform","errorCode","Pipe","pure","FileDraggableDirective","el","enabled","filesDropped","folderEntityDropped","cssClassName","runOutsideAngular","addEventListener","onDragEnter","onDragOver","onDragLeave","onDropFiles","removeEventListener","items","dataTransfer","webkitGetAsEntry","getAsFile","classList","add","UploadModule","DocumentListModule","FlexLayoutModule","entryComponents","SearchQueryBuilderService","_userQuery","updated","executed","categories","queryFragments","userFacetBuckets","config","ranges","resetToDefaults","category","defaults","addUserFacetBucket","bucket","buckets","facetBucket","getUserFacetBuckets","removeUserFacetBucket","addFilterQuery","filterQuery","removeFilterQuery","getFacetQuery","hasFacetQueries","facetQueries","queries","getFacetField","facetFields","fields","getSupportedLabel","update","buildQuery","resultSetPaging","error_1","getFinalQuery","facetIntervals","highlight","facetFormat","getPrimarySorting","getSortingOptions","getQueryGroup","intervals","def","RequestSortDefinitionInner","hasFacetIntervals","interval","sets","set","start","end","startInclusive","endInclusive","hasFacetHighlight","facet","customQuery","userQuery","keys","subQuery","facets","mincount","limit","offset","prefix","configLabel","SearchComponent","searchService","_elementRef","displayWith","maxResults","skipResults","searchTerm","resultLoaded","showPanel","_isOpen","keyPressedStream","_classList","asObservable","debounceTime","searchedWord","loadSearchResults","dataLoaded","onSearchDataLoaded","onSearchDataError","className","setVisibility","resetResults","cleanResults","isOpen","hidePanel","preserveWhitespaces","exportAs","SearchService","searchAnimation","trigger","state","style","margin-left","margin-right","transition","animate","EmptySearchResultComponent","SearchControlComponent","authService","expandable","inputType","autocomplete","liveSearchEnabled","liveSearchMaxResults","searchChange","optionClicked","noSearchResultTemplate","toggleSearch","focusSubject","dir","subscriptAnimationState","toggleAnimation","searchAutocomplete","document","activeElement","searchInput","blur","applySearchFocus","animationDoneEvent","toState","focus","getAnimationState","setupFocusEventHandlers","isNoSearchTemplatePresent","emptySearchTemplate","isLoggedIn","isEcmLoggedIn","searchSubmit","toggleSearchBar","inputChange","getAutoComplete","getMimeType","isSearchBarActive","elementClicked","onFocus","onBlur","activateToolbar","selectFirstResult","listResultElement","_getHostElement","onRowArrowDown","nextElement","getNextElementSibling","onRowArrowUp","previousElement","getPreviousElementSibling","FocusEvent","nextElementSibling","previousElementSibling","animations","AuthenticationService","ViewChildren","MatListItem","SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","SearchTriggerDirective","multi","changeDetectorRef","_panelOpen","escapeEventStream","onChange","onTouched","closingActionsSubscription","searchPanel","openPanel","subscribeToClosingActions","closePanel","outsideClickStream","fromEvent","clickTarget","writeValue","setTriggerValue","registerOnChange","fn","registerOnTouched","handleKeydown","keyCode","ESCAPE","panelOpen","ENTER","handleInput","inputValue","isPanelOptionClicked","isPanelOption","isNoResultOption","panel","contains","firstStable","onStable","optionChanges","panelClosingActions","setValueAndClose","toDisplay","textContent","[attr.autocomplete]","aria-autocomplete","[attr.aria-expanded]","(blur)","(input)","(keydown)","DOCUMENT","SearchFilterList","pageSize","filteredItems","_filterText","currentPageSize","_filter","applyFilter","showMoreItems","canShowMoreItems","showLessItems","canShowLessItems","clear","filterText","addItem","deleteItem","removeIndex","pointer","visibleItems","SearchFilterComponent","queryBuilder","DEFAULT_PAGE_SIZE","isAlive","responseFacets","facetQueriesPageSize","facetQueriesLabel","facetExpanded","selectedBuckets","expanded","displayResetButton","resetButton","takeWhile","onDataLoaded","updateSelectedBuckets","this_1","checked","_b","tslib_1.__values","_c","onToggleBucket","selectFacetBucket","unselectFacetBucket","canResetSelectedBuckets","resetSelectedBuckets","resetAllSelectedBuckets","resetAll","shouldExpand","parseFacets","parseFacetFields","parseFacetIntervals","parseFacetQueries","parseFacetItems","configFacetFields","itemType","responseField","findFacet","responseBuckets","getResponseBuckets","getFilterByMinCount","alreadyExistingField","findResponseFacet","alreadyExistingBuckets","updateExistingBuckets","bucketList","getBucketFilterFunction","configFacetIntervals","configGroups","reduce","acc","mincountFilter","getResponseQueryBuckets","configField","respBucket","getCountValue","getCorrespondingFilterQuery","configGroup","metrics","getBucketCountDisplay","mincountInput","configFacetItem","bucketLabel","configSet","buildIntervalQuery","fieldName","fieldLabel","bucketsToDelete","responseBucket","selBuckets","oldBucket","pattern","filterWithContains","startsWith","SearchTextComponent","settings","match","RegExp","exec","reset","updateQuery","onChangedHandler","SearchRadioComponent","initialValue","getSelectedValue","setValue","selected","opt","changeHandler","SearchSliderComponent","thumbLabel","min","max","LiveErrorStateMatcher","isErrorState","control","isSubmitted","submitted","invalid","dirty","touched","pristine","SearchNumberRangeComponent","matcher","validators","Validators","compose","required","FormControl","to","FormGroup","formValidator","formGroup","parseInt","mismatch","isValid","Map","formatString","str","expr","SearchCheckListComponent","operator","option","flush","DEFAULT_FORMAT_DATE","MOMENT_DATE_FORMATS","SearchDateRangeComponent","dateAdapter","datePickerDateFormat","getFromValidationMessage","hasError","hasParseError","getToValidationMessage","dateFormat","overrideDisplayFormat","Locale","locale","setLocale","maxDate","today","startOf","endOf","formControl","srcElement","formatDate","setErrors","invalidOnChange","getError","text","forcePlaceholder","click","DateAdapter","useClass","MomentDateAdapter","deps","MAT_DATE_LOCALE","MAT_DATE_FORMATS","useValue","ɵ0","SearchFilterService","widgets","radio","slider","number-range","check-list","date-range","SearchChipListComponent","clearAll","SearchSortingPickerComponent","primary","onValueChanged","getSortingOrder","applySorting","onSortingChanged","findOptionByKey","SearchWidgetContainerComponent","searchFilterService","componentFactoryResolver","componentType","factory","resolveComponentFactory","componentRef","createComponent","setupWidget","ref","instance","destroy","ComponentFactoryResolver","read","ViewContainerRef","ALFRESCO_SEARCH_DIRECTIVES","SearchModule","Members","Containers","DropdownSitesComponent","sitesService","hideMyFiles","siteList","placeholder","change","MAX_ITEMS","ITEM_HEIGHT","ITEM_HEIGHT_TO_WAIT_BEFORE_LOAD_NEXT","MY_FILES_VALUE","siteSelect","openedChange","loadAllOnScroll","loadSiteList","isInfiniteScrollingEnabled","isScrollInNextFetchArea","scrollTop","scrollHeight","offsetHeight","selectedSite","extendedOptions","relations","sitePaging","Relations","filteredResultsByMember","siteEntry","SiteEntry","unshift","showLoading","sites","loggedUserName","getEcmCurrentLoggedUserName","isCurrentUserMember","members","member","SitesDropdownModule","BreadcrumbComponent","root","rootId","route","recalculateNodes","parseRoute","lastNodes","previousNodes","reverse","dropdown","hasPreviousNodes","elements","rootPos","getElementPosition","findIndex","onRoutePathClick","DropdownBreadcrumbComponent","BreadcrumbModule","ConfirmDialogComponent","sanitizer","yesLabel","thirdOptionLabel","noLabel","htmlContent","sanitizedHtmlContent","sanitize","SecurityContext","HTML","DomSanitizer","VersionListComponent","versions","showComments","allowDownload","showActions","restored","deleted","versionsApi","loadVersionHistory","canUpdate","canDelete","restore","versionId","revertVersion","getNodeInfo","onVersionRestored","listVersionHistory","versionPaging","downloadVersion","versionDownloadUrl","getVersionContentUrl","downloadContent","deleteVersion","minWidth","afterClosed","onVersionDeleted","attachment","contentApi","getContentUrl","url","link","createElement","href","appendChild","removeChild","VersionManagerComponent","uploadSuccess","uploadError","uploadState","versionListComponent","onUploadSuccess","onUploadError","onUploadCancel","toggleNewVersion","height","opacity","VersionUploadComponent","semanticVersion","uploadVersion","canUpload","isMajorVersion","VersionManagerModule","NameLocationCellComponent","fullPath","ContentNodeSelectorService","extraNodeIds","extraParentFiltering","extraId","defaultSearchNode","scope","locations","searchByQueryBody","defaultValidation","ContentNodeSelectorPanelComponent","contentNodeSelectorService","dropdownHideMyFiles","dropdownSiteList","_excludeSiteContent","showingSearchResults","loadingSearchResults","inDialog","_chosenNode","folderIdToShow","breadcrumbFolderTitle","infiniteScroll","debounceSearch","valueChanges","searchValue","createRowFilter","valuesArray","breadcrumbTransform","isExcludedSiteContent","siteChanged","chosenSite","siteId","setTitleIfCustomSite","updateResults","clearSearch","startNewSearch","infinitePaginationComponent","querySearch","nodeIds","showSearchResults","onFolderChange","onFolderLoaded","attemptNodeSelection","showBreadcrumbs","getNextPageOfSearch","resetChosenNode","HighlightDirective","InfinitePaginationComponent","ContentNodeSelectorModule","I18N_ERRORS_PATH","forbidSpecialCharacters","forbidEndingDot","forbidOnlySpaces","FolderDialogComponent","editTitle","createTitle","parentNodeId","createFolder","edit","updateNode","editing","valid","errorMessage","LibraryDialogComponent","libraryTitleExists","visibilityOptions","maxLength","minLength","createSiteIdValidator","visibilityOption","controls","mergeMap","checkLibraryNameExists","canGenerateId","patchValue","markAsTouched","visibilityChangeHandler","siteBody","createSite","input","libraryTitle","findLibraryByTitle","queriesApi","findSites","timer","getSite","DialogModule","MatMomentDatetimeModule","MatDatetimepickerModule","FolderCreateDirective","openDialog","DIALOG_WIDTH","dialogConfig","dialogInstance","componentInstance","folderCreate","FolderEditDirective","folderEdit","FolderDirectiveModule","ContentMetadataCardComponent","displayEmpty","displayAspect","readOnly","_displayDefaultProperties","editable","onDisplayDefaultPropertiesChange","toggleEdit","toggleExpanded","BasicPropertiesService","fileSizePipe","getProperties","sizeInBytes","mimeTypeName","author","CardViewTextItemModel","createdByUser","displayName","CardViewDateItemModel","createdAt","pipes","modifiedByUser","modifiedAt","multiline","FileSizePipe","D_MLTEXT","D_DATETIME","D_FLOAT","D_DOUBLE","D_BOOLEAN","PropertyGroupTranslatorService","multiValuePipe","valueSeparator","translateToCardViewGroups","propertyGroups","propertyValues","propertyGroup","translatedPropertyGroup","translateArray","property","translate","propertyValue","checkECMTypeValidity","dataType","cardViewItemProperty","propertyDefinition","defaultValue","CardViewIntItemModel","CardViewFloatItemModel","CardViewDatetimeItemModel","CardViewBoolItemModel","multivalued","multiValued","ecmPropertyType","RECOGNISED_ECM_TYPES","MultiValuePipe","emptyGroup","getGroup","groupName","getProperty","propertyName","groupDefinition","convertObjectToArray","object","AspectOrientedConfigService","isGroupAllowed","isIncludeAllEnabled","reorganiseByConfig","aspects","groupAccumulator","aspectName","newGroup","getOrganisedPropertyGroup","organisedPropertyGroup","appendAllPreset","filterExcludedPreset","exclude","includeAll","aspectProperties","props","IndifferentConfigService","LayoutOrientedConfigService","getMatchingGroups","itemsGroup","layoutBlock","flattenItems","explodedItem","excludedConfig","includeAllProperty","accumulator","flattenedProperties","isArray","aspect","ContentMetadataConfigFactory","appConfigService","presetName","presetConfig","presets","DEFAULT_PRESET_NAME","INDIFFERENT_PRESET","createConfig","isLayoutOrientedPreset","isAspectOrientedPreset","freeze","isObject","x","PropertyDescriptorsService","load","groupNames","groupFetchStreams","defer","classesApi","getClass","convertToObject","propertyGroupsArray","ContentMetadataService","basicPropertiesService","contentMetadataConfigFactory","propertyGroupTranslatorService","propertyDescriptorsService","getBasicProperties","getGroupedProperties","groupedProperties","contentMetadataConfig_1","groups","iif","filterEmptyPreset","setTitleToNameIfNotSet","ContentMetadataComponent","contentMetadataService","cardViewUpdateService","nodesApiService","displayDefaultProperties","itemUpdated$","saveNode","handleUpdateError","updatedNode","loadProperties","basicProperties$","groupedProperties$","nodeBody","changed","showGroup","displayValue","canExpandTheCard","canExpandProperties","CardViewUpdateService","ContentMetadataModule","PermissionDisplayModel","isInherited","authorityId","accessStatus","NodePermissionService","searchApiService","nodeService","getNodeRoles","retrieveSiteQueryBody","buildRetrieveSiteQueryBody","siteNodeList","siteName","getGroupMembersBySiteName","permissions","settable","updatePermissionRole","updatedPermissionRole","permissionBody","locallySet","updateNodePermissions","permissionList","nodeRoles","updateLocallySetPermissions","nodeRole","transformNodeToPermissionElement","duplicatedPermissions","getDuplicatedPermissions","duplicatePermissionMessage","nodeLocallySet","permissionListAdded","duplicatePermissions","duplicate","localPermission","isEqualPermission","oldPermission","newPermission","removePermission","permissionToRemove","getGroupMemberByGroupName","groupMemberPaging","displayResult","formattedRoleName","groupsApi","getGroupMembers","nodePath","PermissionListComponent","nodePermissionService","fetchNodePermissions","actualNode","getPermissionList","settableList","settableRoles","allPermissions","permissionElement","inherited","permissionInherited","saveNewRole","permissionRow","buildUpdatedPermission","newRole","permissionRole","NoPermissionTemplateComponent","InheritPermissionDirective","onInheritPermissionClicked","UPDATEPERMISSIONS","isInheritanceEnabled","(click)","AddPermissionDialogComponent","currentSelection","onAddClicked","confirm","NodePermissionDialogService","openAddPermissionDialog","confirm_1","updateNodePermissionByDialog","SearchPermissionConfigurationService","generateQueryBody","AddPermissionPanelComponent","selectedItems","EVERYONE","NodeEntry","cm:authorityName","isAlreadySelected","SearchConfigurationService","AddPermissionComponent","nodeApiService","isAddEnabled","applySelection","PermissionManagerModule","ShareDialogComponent","sharedLinksApiService","renditionService","minDate","isFileShared","isDisabled","sharedUrl","disable","skip","distinctUntilChanged","updates","formUpdates","updateEntryExpiryDate","baseShareUrl","sharedId","updateForm","createSharedLinks","removeShare","deleteSharedLink","onSlideShareChange","openConfirmationDialog","onToggleExpirationDate","slideToggle","matDatetimepickerToggle","datetimepicker","onDatetimepickerClosed","dateTimePickerInput","slideToggleExpirationDate","closeOnNavigation","beforeClose","sharedLink","qshare:sharedId","generateRenditionForNode","expiryDate","local","date","qshare:expiryDate","utc","SharedLinksApiService","RenditionsService","NodeSharedDirective","zone","isShared","shareNode","openShareLinkDialog","ContentNodeShareModule","forRoot","ngModule","TreeBaseNode","level","TreeViewService","nodeApi","getTreeNodes","nodePage","TreeViewDataSource","treeControl","treeViewService","dataChange","childrenSubscription","changeSubscription","treeNodes","dataNodes","connect","collectionViewer","expansionModel","added","expandTreeNodes","removed","reduceTreeNodes","viewChange","disconnect","expandNode","toggleNode","FlatTreeControl","TreeViewComponent","nodeClicked","getLevel","isExpandable","hasChild","nodeData","dataSource","previousValue","loadTreeNode","onNodeClicked","treeNode","TreeViewModule","TranslateModule","ContentModuleLazy","source","ContentModule","TRANSLATION_PROVIDER","ɵ0$2"],"mappings":"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,CAAC,CACNC,QAAS,CACL4U,EAAAA,aACA/U,EACAm4D,EAAAA,gBAAgB/8C,YAEpBpG,aAAc,CACVuiD,IAEJn3D,QAAS,CACLm3D,QAIRW,mBCKA,SAAAE,KA6CgC,2BA7C/Bn4D,EAAAA,SAAQC,KAAA,CAAC,CACNC,QAAS,CACLgb,EAAAA,WAAWC,WACXtD,EACAkD,EACAjG,EAAAA,aACA0H,EACAxB,EAAAA,YACAC,EAAAA,oBACAioC,GACA/M,GACA/Z,GACAD,GACAp8B,EACA04C,GACAkB,GACAiH,GACA6U,GACAvI,GACApJ,GACAjvC,EACA89C,GACAjV,GACAua,IAEJ93D,QAAS,CACL0X,EACAkD,EACAyB,EACA4f,GACAD,GACAga,GACAsC,GACAkB,GACAiH,GACA6U,GACAvI,GACAhK,GACAY,GACAjvC,EACA89C,GACAjV,GACAua,QAGwBE,QA+BV,CACNpvD,KAAM,uBACNqvD,OAAQ,+BA/BxBC,GAAA,WAAA,SAAAA,KA6EA,OArBWA,EAAA3C,QAAP,WACI,MAAO,CACHC,SAAU0C,EACV7pC,UAAW,CACP,CACIyK,QAASq/B,EAAAA,qBACThyB,OAAO,EACP2N,SAAU,CACNlrC,KAAM,uBACNqvD,OAAQ,mCAOrBC,EAAAl9C,SAAP,WACI,MAAO,CACHw6C,SAAUwC,yBA1ErBn4D,EAAAA,SAAQC,KAAA,CAAC,CACNC,QAAS,CACLgb,EAAAA,WAAWC,WACXtD,EACAkD,EACAjG,EAAAA,aACA0H,EACAxB,EAAAA,YACAC,EAAAA,oBACAioC,GACA/M,GACA/Z,GACAD,GACAp8B,EACA04C,GACAkB,GACAiH,GACA6U,GACAvI,GACApJ,GACAjvC,EACA89C,GACAjV,GACAua,IAEJzpC,UAAW,CACP,CACIyK,QAASq/B,EAAAA,qBACThyB,OAAO,EACP2N,SAAQskB,KAMhBp4D,QAAS,CACL0X,EACAkD,EACAyB,EACA4f,GACAD,GACAga,GACAsC,GACAkB,GACAiH,GACA6U,GACAvI,GACAhK,GACAY,GACAjvC,EACA89C,GACAjV,GACAua,QAyBRI,EA7EA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MatButtonModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatExpansionModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatSlideToggleModule,\n    MatRadioModule,\n    MatSliderModule,\n    MatTreeModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatButtonModule,\n        MatChipsModule,\n        MatDialogModule,\n        MatIconModule,\n        MatCardModule,\n        MatInputModule,\n        MatListModule,\n        MatProgressSpinnerModule,\n        MatProgressBarModule,\n        MatRippleModule,\n        MatMenuModule,\n        MatOptionModule,\n        MatExpansionModule,\n        MatSelectModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatSlideToggleModule,\n        MatRadioModule,\n        MatSliderModule,\n        MatTreeModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodeEntry, NodePaging } from '@alfresco/js-api';\n\nexport class DocumentLoaderNode {\n    currentNode: NodeEntry;\n    children: NodePaging;\n\n    constructor(currentNode: NodeEntry, children: NodePaging) {\n        this.currentNode = currentNode;\n        this.children = children;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService,\n    LogService,\n    PaginationModel\n} from '@alfresco/adf-core';\n\nimport {\n    NodePaging,\n    PersonEntry,\n    SitePaging,\n    DeletedNodesPaging,\n    SearchRequest,\n    SharedLinkPaging,\n    FavoritePaging,\n    SiteMemberPaging,\n    SiteRolePaging\n} from '@alfresco/js-api';\nimport { Injectable } from '@angular/core';\nimport { Observable, from, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CustomResourcesService {\n\n    private CREATE_PERMISSION = 'create';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets files recently accessed by a user.\n     * @param personId ID of the user\n     * @param pagination Specifies how to paginate the results\n     * @param filters Specifies additional filters to apply (joined with **AND**)\n     * @returns List of nodes for the recently used files\n     */\n    getRecentFiles(personId: string, pagination: PaginationModel, filters?: string[]): Observable<NodePaging> {\n        const defaultFilter = [\n            'TYPE:\"content\"',\n            '-PNAME:\"0/wiki\"',\n            '-TYPE:\"app:filelink\"',\n            '-TYPE:\"cm:thumbnail\"',\n            '-TYPE:\"cm:failedThumbnail\"',\n            '-TYPE:\"cm:rating\"',\n            '-TYPE:\"dl:dataList\"',\n            '-TYPE:\"dl:todoList\"',\n            '-TYPE:\"dl:issue\"',\n            '-TYPE:\"dl:contact\"',\n            '-TYPE:\"dl:eventAgenda\"',\n            '-TYPE:\"dl:event\"',\n            '-TYPE:\"dl:task\"',\n            '-TYPE:\"dl:simpletask\"',\n            '-TYPE:\"dl:meetingAgenda\"',\n            '-TYPE:\"dl:location\"',\n            '-TYPE:\"fm:topic\"',\n            '-TYPE:\"fm:post\"',\n            '-TYPE:\"ia:calendarEvent\"',\n            '-TYPE:\"lnk:link\"'\n        ];\n\n        return new Observable((observer) => {\n            this.apiService.peopleApi.getPerson(personId)\n                .then((person: PersonEntry) => {\n                        const username = person.entry.id;\n                        const filterQueries = [\n                            { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },\n                            { query: `cm:modifier:${username} OR cm:creator:${username}` },\n                            { query: defaultFilter.join(' AND ') }\n                        ];\n\n                        if (filters && filters.length > 0) {\n                            filterQueries.push({\n                                query: filters.join()\n                            });\n                        }\n\n                        const query: SearchRequest = new SearchRequest({\n                            query: {\n                                query: '*',\n                                language: 'afts'\n                            },\n                            filterQueries,\n                            include: ['path', 'properties', 'allowableOperations'],\n                            sort: [{\n                                type: 'FIELD',\n                                field: 'cm:modified',\n                                ascending: false\n                            }],\n                            paging: {\n                                maxItems: pagination.maxItems,\n                                skipCount: pagination.skipCount\n                            }\n                        });\n                        return this.apiService.searchApi.search(query)\n                            .then((searchResult) => {\n                                    observer.next(searchResult);\n                                    observer.complete();\n                                },\n                                (err) => {\n                                    observer.error(err);\n                                    observer.complete();\n                                });\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets favorite files for the current user.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of favorite files\n     */\n    loadFavorites(pagination: PaginationModel, includeFields: string[] = []): Observable<NodePaging> {\n        const includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount,\n            where: '(EXISTS(target/file) OR EXISTS(target/folder))',\n            include: includeFieldsRequest\n        };\n\n        return new Observable((observer) => {\n            this.apiService.favoritesApi.getFavorites('-me-', options)\n                .then((result: FavoritePaging) => {\n                        const page: FavoritePaging = {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { target } }: any) => ({\n                                        entry: target.file || target.folder\n                                    }))\n                                    .map(({ entry }: any) => {\n                                        entry.properties = {\n                                            'cm:title': entry.title,\n                                            'cm:description': entry.description\n                                        };\n                                        return { entry };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        };\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets sites that the current user is a member of.\n     * @param pagination Specifies how to paginate the results\n     * @returns List of sites\n     */\n    loadMemberSites(pagination: PaginationModel): Observable<SiteMemberPaging> {\n        const options = {\n            include: ['properties'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable((observer) => {\n            this.apiService.peopleApi.listSiteMembershipsForPerson('-me-', options)\n                .then((result: SiteRolePaging) => {\n                        const page: SiteMemberPaging = new SiteMemberPaging( {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { site } }: any) => {\n                                        site.allowableOperations = site.allowableOperations ? site.allowableOperations : [this.CREATE_PERMISSION];\n                                        site.name = site.name || site.title;\n                                        return {\n                                            entry: site\n                                        };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        });\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets all sites in the repository.\n     * @param pagination Specifies how to paginate the results\n     * @returns List of sites\n     */\n    loadSites(pagination: PaginationModel): Observable<NodePaging> {\n        const options = {\n            include: ['properties', 'aspectNames'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable((observer) => {\n            this.apiService.sitesApi.getSites(options)\n                .then((page: SitePaging) => {\n                        page.list.entries.map(\n                            ({ entry }: any) => {\n                                entry.name = entry.name || entry.title;\n                                return { entry };\n                            }\n                        );\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets all items currently in the trash.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of deleted items\n     */\n    loadTrashcan(pagination: PaginationModel, includeFields: string[] = []): Observable<DeletedNodesPaging> {\n        const includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return from(this.apiService.nodesApi.getDeletedNodes(options))\n            .pipe(catchError((err) => this.handleError(err)));\n\n    }\n\n    /**\n     * Gets shared links for the current user.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of shared links\n     */\n    loadSharedLinks(pagination: PaginationModel, includeFields: string[] = []): Observable<SharedLinkPaging> {\n        const includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return from(this.apiService.sharedLinksApi.findSharedLinks(options))\n            .pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Is the folder ID one of the well-known aliases?\n     * @param folderId Folder ID name to check\n     * @returns True if the ID is a well-known name, false otherwise\n     */\n    isCustomSource(folderId: string): boolean {\n        let isCustomSources = false;\n        const sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            isCustomSources = true;\n        }\n\n        return isCustomSources;\n    }\n\n    /**\n     * Is the folder ID a \"-my\", \"-root-\", or \"-shared-\" alias?\n     * @param folderId Folder ID name to check\n     * @returns True if the ID is one of the supported sources, false otherwise\n     */\n    isSupportedSource(folderId: string): boolean {\n        let isSupportedSources = false;\n        const sources = ['-my-', '-root-', '-shared-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            isSupportedSources = true;\n        }\n\n        return isSupportedSources;\n    }\n\n    /**\n     * Gets a folder's contents.\n     * @param nodeId ID of the target folder node\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of items contained in the folder\n     */\n    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields: string[] = []): any {\n        if (nodeId === '-trashcan-') {\n            return this.loadTrashcan(pagination, includeFields);\n        } else if (nodeId === '-sharedlinks-') {\n            return this.loadSharedLinks(pagination, includeFields);\n        } else if (nodeId === '-sites-') {\n            return this.loadSites(pagination);\n        } else if (nodeId === '-mysites-') {\n            return this.loadMemberSites(pagination);\n        } else if (nodeId === '-favorites-') {\n            return this.loadFavorites(pagination, includeFields);\n        } else if (nodeId === '-recent-') {\n            return this.getRecentFiles('-me-', pagination);\n        }\n    }\n\n    // TODO: remove it from here\n\n    /**\n     * Gets the contents of one of the well-known aliases in the form of node ID strings.\n     * @param nodeId ID of the target folder node\n     * @param pagination Specifies how to paginate the results\n     * @returns List of node IDs\n     */\n    getCorrespondingNodeIds(nodeId: string, pagination: PaginationModel = {}): Observable<string[]> {\n        if (this.isCustomSource(nodeId)) {\n\n            return this.loadFolderByNodeId(nodeId, pagination)\n                .pipe(map((result: any): string[] => {\n                    return result.list.entries.map((node: any): string => this.getIdFromEntry(node, nodeId));\n                }));\n\n        } else if (nodeId) {\n            // cases when nodeId is '-my-', '-root-' or '-shared-'\n            return from(this.apiService.nodesApi.getNode(nodeId)\n                .then((node) => [node.entry.id]));\n        }\n\n        return of([]);\n    }\n\n    /**\n     * Chooses the correct ID for a node entry.\n     * @param node Node object\n     * @param nodeId ID of the node object\n     * @returns ID value\n     */\n    getIdFromEntry(node: any, nodeId: string): string {\n        if (nodeId === '-sharedlinks-') {\n            return node.entry.nodeId;\n        } else if (nodeId === '-sites-' || nodeId === '-mysites-') {\n            return node.entry.guid;\n        } else if (nodeId === '-favorites-') {\n            return node.entry.targetGuid;\n        } else {\n            return node.entry.id;\n        }\n    }\n\n    /**\n     * Does the well-known alias have a corresponding node ID?\n     * @param nodeId Node to check\n     * @returns True if the alias has a corresponding node ID, false otherwise\n     */\n    hasCorrespondingNodeIds(nodeId: string): boolean {\n        return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);\n    }\n\n    private getIncludesFields(includeFields: string[]): string[] {\n        return ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n    }\n\n    private handleError(error: Response) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService, ContentService, LogService, PaginationModel\n} from '@alfresco/adf-core';\n\nimport { Injectable } from '@angular/core';\nimport { NodeEntry, NodePaging } from '@alfresco/js-api';\nimport { DocumentLoaderNode } from '../models/document-folder.model';\nimport { Observable, from, throwError, forkJoin } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { DocumentListLoader } from '../interfaces/document-list-loader.interface';\nimport { CustomResourcesService } from './custom-resources.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentListService implements DocumentListLoader {\n\n    static ROOT_ID = '-root-';\n\n    constructor(private contentService: ContentService,\n                private apiService: AlfrescoApiService,\n                private logService: LogService,\n                private customResourcesService: CustomResourcesService) {\n    }\n\n    /**\n     * Deletes a node.\n     * @param nodeId ID of the node to delete\n     * @returns Empty response when the operation is complete\n     */\n    deleteNode(nodeId: string): Observable<any> {\n        return from(this.apiService.getInstance().nodes.deleteNode(nodeId));\n    }\n\n    /**\n     * Copy a node to destination node\n     *\n     * @param nodeId The id of the node to be copied\n     * @param targetParentId The id of the folder where the node will be copied\n     * @returns NodeEntry for the copied node\n     */\n    copyNode(nodeId: string, targetParentId: string) {\n        return from(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId })).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Moves a node to destination node.\n     *\n     * @param nodeId The id of the node to be moved\n     * @param targetParentId The id of the folder where the node will be moved\n     * @returns NodeEntry for the moved node\n     */\n    moveNode(nodeId: string, targetParentId: string) {\n        return from(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId })).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets the folder node with the specified relative name path below the root node.\n     * @param folder Path to folder.\n     * @param opts Options.\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolder(folder: string, opts?: any, includeFields: string[] = []): Observable<NodePaging> {\n        let rootNodeId = DocumentListService.ROOT_ID;\n        if (opts && opts.rootFolderId) {\n            rootNodeId = opts.rootFolderId;\n        }\n\n        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        const params: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        if (folder) {\n            params.relativePath = folder;\n        }\n\n        if (opts) {\n            if (opts.maxItems) {\n                params.maxItems = opts.maxItems;\n            }\n            if (opts.skipCount) {\n                params.skipCount = opts.skipCount;\n            }\n            if (opts.where) {\n                params.where = opts.where;\n            }\n        }\n\n        return from(this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params)).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets a node via its node ID.\n     * @param nodeId ID of the target node\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getNode(nodeId: string, includeFields: string[] = []): Observable<NodeEntry> {\n\n        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        const opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return this.contentService.getNode(nodeId, opts);\n    }\n\n    /**\n     * Gets a folder node via its node ID.\n     * @param nodeId ID of the folder node\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolderNode(nodeId: string, includeFields: string[] = []): Observable<NodeEntry> {\n\n        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        const opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return from(this.apiService.getInstance().nodes.getNode(nodeId, opts)).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    isCustomSourceService(nodeId): boolean {\n        return this.customResourcesService.isCustomSource(nodeId);\n    }\n\n    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields: string[], where?: string): Observable<DocumentLoaderNode> {\n        if (this.customResourcesService.isCustomSource(nodeId)) {\n            return this.customResourcesService.loadFolderByNodeId(nodeId, pagination, includeFields).pipe(\n                map((result: any) => new DocumentLoaderNode(null, result))\n            );\n        } else {\n            return this.retrieveDocumentNode(nodeId, pagination, includeFields, where);\n        }\n    }\n\n    private retrieveDocumentNode(nodeId: string, pagination: PaginationModel, includeFields: string[], where?: string): Observable<DocumentLoaderNode> {\n        return forkJoin(\n            this.getFolderNode(nodeId, includeFields),\n            this.getFolder(null, {\n                maxItems: pagination.maxItems,\n                skipCount: pagination.skipCount,\n                rootFolderId: nodeId,\n                where: where\n            }, includeFields)).pipe(\n                map((results) => new DocumentLoaderNode(results[0], results[1]))\n            );\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { Node } from '@alfresco/js-api';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\n\n@Component({\n    selector: 'adf-content-node-selector',\n    templateUrl: './content-node-selector.component.html',\n    styleUrls: ['./content-node-selector.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentNodeSelectorComponent {\n\n    buttonActionName: string;\n    chosenNode: Node[];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: ContentNodeSelectorComponentData) {\n        this.buttonActionName = data.actionName ? `NODE_SELECTOR.${data.actionName.toUpperCase()}` : 'NODE_SELECTOR.CHOOSE';\n    }\n\n    close() {\n        this.data.select.complete();\n    }\n\n    onSelect(nodeList: Node[]) {\n        this.chosenNode = nodeList;\n    }\n\n    onClick(): void {\n        this.data.select.next(this.chosenNode);\n        this.data.select.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport moment from 'moment-es6';\n\nimport { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { NodeBodyLock, Node, NodeEntry } from '@alfresco/js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-node-lock',\n    styleUrls: ['./folder.dialog.scss'],\n    templateUrl: './node-lock.dialog.html'\n})\nexport class NodeLockDialogComponent implements OnInit {\n\n    form: FormGroup;\n    node: Node = null;\n    nodeName: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        public dialog: MatDialogRef<NodeLockDialogComponent>,\n        private alfrescoApi: AlfrescoApiService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {\n    }\n\n    ngOnInit() {\n        const { node } = this.data;\n        this.nodeName = node.name;\n\n        this.form = this.formBuilder.group({\n            isLocked: node.isLocked || false,\n            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',\n            isTimeLock: !!node.properties['cm:expiryDate'],\n            time: !!node.properties['cm:expiryDate'] ? moment(node.properties['cm:expiryDate']) : moment()\n        });\n    }\n\n    private get lockTimeInSeconds(): number {\n        if (this.form.value.isTimeLock) {\n            const duration = moment.duration(moment(this.form.value.time).diff(moment()));\n            return duration.asSeconds();\n        }\n\n        return 0;\n    }\n\n    private get nodeBodyLock(): NodeBodyLock {\n        return new NodeBodyLock({\n            'timeToExpire': this.lockTimeInSeconds,\n            'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',\n            'lifetime': 'PERSISTENT'\n        });\n    }\n\n    private toggleLock(): Promise<NodeEntry> {\n        const { alfrescoApi: { nodesApi }, data: { node } } = this;\n\n        if (this.form.value.isLocked) {\n            return nodesApi.lockNode(node.id, this.nodeBodyLock);\n        }\n\n        return nodesApi.unlockNode(node.id);\n    }\n\n    submit(): void {\n        this.toggleLock()\n            .then((node: NodeEntry) => {\n                this.data.node.isLocked = this.form.value.isLocked;\n                this.dialog.close(node.entry);\n            })\n            .catch((error: any) => this.data.onError(error));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ContentService, ThumbnailService } from '@alfresco/adf-core';\nimport { Subject, Observable, throwError } from 'rxjs';\nimport { ShareDataRow } from '../document-list/data/share-data-row.model';\nimport { Node, NodeEntry, SitePaging } from '@alfresco/js-api';\nimport { DataColumn, SitesService, TranslationService, AllowableOperationsEnum } from '@alfresco/adf-core';\nimport { DocumentListService } from '../document-list/services/document-list.service';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\nimport { NodeLockDialogComponent } from '../dialogs/node-lock.dialog';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentNodeDialogService {\n    static nonDocumentSiteContent = [\n        'blog',\n        'calendar',\n        'dataLists',\n        'discussions',\n        'links',\n        'wiki'\n    ];\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private dialog: MatDialog,\n                private contentService: ContentService,\n                private documentListService: DocumentListService,\n                private siteService: SitesService,\n                private translation: TranslationService,\n                private thumbnailService: ThumbnailService) {\n    }\n\n    /**\n     * Opens a file browser at a chosen folder location.\n     * @param folderNodeId ID of the folder to use\n     * @returns Information about the selected file(s)\n     */\n    openFileBrowseDialogByFolderId(folderNodeId: string): Observable<Node[]> {\n        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((nodeEntry: NodeEntry) => {\n            return this.openUploadFileDialog('Choose', nodeEntry.entry);\n        }));\n    }\n\n    /**\n     * Opens a lock node dialog.\n     * @param contentEntry Node to lock\n     * @returns Error/status message (if any)\n     */\n    public openLockNodeDialog(contentEntry: Node): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        if (this.contentService.hasAllowableOperations(contentEntry, AllowableOperationsEnum.LOCK)) {\n            this.dialog.open(NodeLockDialogComponent, {\n                data: {\n                    node: contentEntry,\n                    onError: (error) => {\n                        this.error.emit(error);\n                        observable.error(error);\n                    }\n                },\n                width: '400px'\n            });\n        } else {\n            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');\n        }\n\n        return observable;\n    }\n\n    /**\n     * Opens a file browser at a chosen site location.\n     * @returns Information about the selected file(s)\n     */\n    openFileBrowseDialogBySite(): Observable<Node[]> {\n        return this.siteService.getSites().pipe(switchMap((response: SitePaging) => {\n            return this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);\n        }));\n    }\n\n    /**\n     * Opens a folder browser at a chosen site location.\n     * @returns Information about the selected folder(s)\n     */\n    openFolderBrowseDialogBySite(): Observable<Node[]> {\n        return this.openFolderBrowseDialogByFolderId('-my-');\n    }\n\n    /**\n     * Opens a folder browser at a chosen folder location.\n     * @param folderNodeId ID of the folder to use\n     * @returns Information about the selected folder(s)\n     */\n    openFolderBrowseDialogByFolderId(folderNodeId: string): Observable<Node[]> {\n        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((node: NodeEntry) => {\n            return this.openUploadFolderDialog('Choose', node.entry);\n        }));\n    }\n\n    /**\n     * Opens a dialog to copy or move an item to a new location.\n     * @param action Name of the action (eg, \"Copy\" or \"Move\") to show in the title\n     * @param contentEntry Item to be copied or moved\n     * @param permission Permission for the operation\n     * @param excludeSiteContent The site content that should be filtered out\n     * @returns Information about files that were copied/moved\n     */\n    openCopyMoveDialog(action: string, contentEntry: Node, permission?: string, excludeSiteContent?: string[]): Observable<Node[]> {\n        if (this.contentService.hasAllowableOperations(contentEntry, permission)) {\n\n            const select = new Subject<Node[]>();\n            select.subscribe({\n                complete: this.close.bind(this)\n            });\n\n            const title = this.getTitleTranslation(action, contentEntry.name);\n\n            const data: ContentNodeSelectorComponentData = {\n                title: title,\n                actionName: action,\n                currentFolderId: contentEntry.parentId,\n                imageResolver: this.imageResolver.bind(this),\n                where: '(isFolder=true)',\n                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),\n                excludeSiteContent: excludeSiteContent || ContentNodeDialogService.nonDocumentSiteContent,\n                select: select\n            };\n\n            this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n\n            return select;\n        } else {\n            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));\n            return throwError(errors);\n        }\n    }\n\n    /**\n     * Gets the translation of the dialog title.\n     * @param action Name of the action to display in the dialog title\n     * @param name Name of the item on which the action is being performed\n     * @returns Translated version of the title\n     */\n    getTitleTranslation(action: string, name: string): string {\n        return this.translation.instant(`NODE_SELECTOR.${action.toUpperCase()}_ITEM`, { name });\n    }\n\n    /**\n     * Opens a dialog to choose folders to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry  Item to upload\n     * @returns Information about the chosen folder(s)\n     */\n    openUploadFolderDialog(action: string, contentEntry: Node): Observable<Node[]> {\n        const select = new Subject<Node[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.hasAllowableOperationsOnNodeFolder.bind(this),\n            where: '(isFolder=true)',\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    /**\n     * Opens a dialog to choose a file to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry Item to upload\n     * @returns Information about the chosen file(s)\n     */\n    openUploadFileDialog(action: string, contentEntry: Node): Observable<Node[]> {\n        const select = new Subject<Node[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.isNodeFile.bind(this),\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    private openContentNodeDialog(data: ContentNodeSelectorComponentData, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    private imageResolver(row: ShareDataRow, col: DataColumn): string | null {\n        const entry: Node = row.node.entry;\n        if (!this.contentService.hasAllowableOperations(entry, 'create')) {\n            return this.thumbnailService.getMimeTypeIcon('disable/folder');\n        }\n\n        return null;\n    }\n\n    private isNodeFile(entry: Node): boolean {\n        return entry.isFile;\n    }\n\n    private hasAllowableOperationsOnNodeFolder(entry: Node): boolean {\n        return this.isNodeFolder(entry) && this.contentService.hasAllowableOperations(entry, 'create');\n    }\n\n    private isNodeFolder(entry: Node): boolean {\n        return entry.isFolder;\n    }\n\n    private isCopyMoveSelectionValid(entry: Node): boolean {\n        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);\n    }\n\n    private hasEntityCreatePermission(entry: Node): boolean {\n        return this.contentService.hasAllowableOperations(entry, 'create');\n    }\n\n    private isSite(entry) {\n        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';\n    }\n\n    /** Closes the currently open dialog. */\n    close() {\n        this.dialog.closeAll();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { AllowableOperationsEnum, ContentService } from '@alfresco/adf-core';\nimport { ContentNodeDialogService } from '../content-node-selector/content-node-dialog.service';\n\n@Directive({\n    selector: '[adf-node-lock]'\n})\nexport class NodeLockDirective implements AfterViewInit {\n\n    /** Node to lock/unlock. */\n    @Input('adf-node-lock')\n    node: Node;\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.contentNodeDialogService.openLockNodeDialog(this.node);\n    }\n\n    constructor(\n        public element: ElementRef,\n        private renderer: Renderer2,\n        private contentService: ContentService,\n        private contentNodeDialogService: ContentNodeDialogService\n    ) {}\n\n    ngAfterViewInit() {\n        const hasAllowableOperations = this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.LOCK);\n        this.renderer.setProperty(this.element.nativeElement, 'disabled', !hasAllowableOperations);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { NodeLockDirective } from './node-lock.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        NodeLockDirective\n    ],\n    exports: [\n        NodeLockDirective\n    ]\n})\nexport class ContentDirectiveModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { RatingEntry, RatingBody } from '@alfresco/js-api';\nimport { from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/internal/Observable';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RatingService {\n\n    constructor(private apiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Gets the current user's rating for a node.\n     * @param nodeId Node to get the rating from\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     * @returns The rating value\n     */\n    getRating(nodeId: string, ratingType: any): Observable<RatingEntry | {}> {\n        return from(this.apiService.getInstance().core.ratingsApi.getRating(nodeId, ratingType))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    /**\n     * Adds the current user's rating for a node.\n     * @param nodeId Target node for the rating\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     * @param vote Rating value (boolean for \"likes\", numeric 0..5 for \"fiveStar\")\n     * @returns Details about the rating, including the new value\n     */\n    postRating(nodeId: string, ratingType: string, vote: any): Observable<RatingEntry | {}> {\n        const ratingBody: RatingBody = new RatingBody({\n            'id': ratingType,\n            'myRating': vote\n        });\n        return from(this.apiService.getInstance().core.ratingsApi.rate(nodeId, ratingBody))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    /**\n     * Removes the current user's rating for a node.\n     * @param nodeId Target node\n     * @param ratingType Type of rating to remove (can be \"likes\" or \"fiveStar\")\n     * @returns Null response indicating that the operation is complete\n     */\n    deleteRating(nodeId: string, ratingType: any): Observable<any> {\n        return from(this.apiService.getInstance().core.ratingsApi.removeRating(nodeId, ratingType))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    private handleError(error: any): any {\n        console.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\nimport { RatingEntry } from '@alfresco/js-api';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'adf-rating',\n    styleUrls: ['./rating.component.scss'],\n    templateUrl: './rating.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class RatingComponent implements OnChanges {\n\n    /** Identifier of the node to apply the rating to. */\n    @Input()\n    nodeId: string;\n\n    average: number = 0;\n\n    ratingsCounter = 0;\n\n    ratingType: string = 'fiveStar';\n\n    ratingValue: number;\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    stars: Array<any> = [];\n\n    onDestroy$ = new Subject<boolean>();\n\n    constructor(private ratingService: RatingService) {\n    }\n\n    ngOnChanges() {\n        this.ratingService.getRating(this.nodeId, this.ratingType)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(\n            (ratingEntry: RatingEntry) => {\n                this.refreshRating(ratingEntry);\n            }\n        );\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    calculateStars() {\n        this.stars = [];\n        const roundedAverage = Math.round(this.average);\n\n        for (let i = 0; i < 5; i++) {\n            if (i < roundedAverage) {\n                this.stars.push({fill: true});\n            } else {\n                this.stars.push({fill: false});\n            }\n        }\n    }\n\n    updateVote(vote: number) {\n        if (this.ratingValue === vote) {\n            this.unRateItem();\n        } else {\n            this.rateItem(vote);\n        }\n    }\n\n    rateItem(vote: number) {\n        this.ratingService.postRating(this.nodeId, this.ratingType, vote)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(\n            (ratingEntry: RatingEntry) => {\n                this.refreshRating(ratingEntry);\n            }\n        );\n    }\n\n    unRateItem() {\n        this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(\n            () => {\n                this.ratingService.getRating(this.nodeId, this.ratingType)\n                    .pipe(takeUntil(this.onDestroy$))\n                    .subscribe(\n                    (ratingEntry: RatingEntry) => {\n                        this.refreshRating(ratingEntry);\n                    }\n                );\n            });\n    }\n\n    refreshRating(ratingEntry: RatingEntry) {\n        this.ratingValue = Number.parseFloat(ratingEntry.entry.myRating);\n        this.average = ratingEntry.entry.aggregate.average;\n        this.ratingsCounter = ratingEntry.entry.aggregate.numberOfRatings;\n        this.calculateStars();\n        this.changeVote.emit(this.average);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\nimport { RatingEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-like',\n    styleUrls: ['./like.component.scss'],\n    templateUrl: './like.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class LikeComponent implements OnChanges {\n    /** Identifier of a node to apply likes to. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    likesCounter: number = 0;\n    ratingType: string = 'likes';\n    isLike: boolean = false;\n\n    constructor(private ratingService: RatingService) {\n    }\n\n    ngOnChanges() {\n        this.clean();\n\n        this.ratingService.getRating(this.nodeId, this.ratingType).subscribe(\n            (ratingEntry: RatingEntry) => {\n                if (ratingEntry.entry.aggregate) {\n                    this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;\n                    if (ratingEntry.entry.ratedAt) {\n                        this.isLike = true;\n                    }\n                }\n            }\n        );\n    }\n\n    likeClick() {\n        if (this.isLike) {\n            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(\n                () => {\n                    this.likesCounter -= 1;\n                    this.isLike = false;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        } else {\n            this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe(\n                (ratingEntry: RatingEntry) => {\n                    this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;\n                    this.isLike = true;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        }\n    }\n\n    clean() {\n        this.isLike = false;\n        this.likesCounter = 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { LikeComponent } from './like.component';\nimport { RatingComponent } from './rating.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    exports: [\n        RatingComponent,\n        LikeComponent\n    ],\n    declarations: [\n        RatingComponent,\n        LikeComponent\n    ]\n})\nexport class SocialModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Observable, from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { TagBody,  TagPaging, TagEntry } from '@alfresco/js-api';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TagService {\n\n    /** Emitted when tag information is updated. */\n    @Output()\n    refresh = new EventEmitter();\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets a list of tags added to a node.\n     * @param nodeId ID of the target node\n     * @returns TagPaging object (defined in JS-API) containing the tags\n     */\n    getTagsByNodeId(nodeId: string): Observable<TagPaging> {\n        return from(this.apiService.getInstance().core.tagsApi.getNodeTags(nodeId)).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets a list of all the tags already defined in the repository.\n     * @param opts Options supported by JS-API\n     * @returns TagPaging object (defined in JS-API) containing the tags\n     */\n    getAllTheTags(opts?: any): Observable<TagPaging> {\n        return from(this.apiService.getInstance().core.tagsApi.getTags(opts))\n            .pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Adds a tag to a node.\n     * @param nodeId ID of the target node\n     * @param tagName Name of the tag to add\n     * @returns TagEntry object (defined in JS-API) with details of the new tag\n     */\n    addTag(nodeId: string, tagName: string): Observable<TagEntry> {\n        const tagBody = new TagBody();\n        tagBody.tag = tagName;\n\n        const observableAdd = from(this.apiService.getInstance().core.tagsApi.addTag(nodeId, tagBody));\n\n        observableAdd.subscribe((tagEntry: TagEntry) => {\n            this.refresh.emit(tagEntry);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return observableAdd;\n    }\n\n    /**\n     * Removes a tag from a node.\n     * @param nodeId ID of the target node\n     * @param tag Name of the tag to remove\n     * @returns Null object when the operation completes\n     */\n    removeTag(nodeId: string, tag: string): Observable<any> {\n        const observableRemove = from(this.apiService.getInstance().core.tagsApi.removeTag(nodeId, tag));\n\n        observableRemove.subscribe((data) => {\n            this.refresh.emit(data);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return observableRemove;\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TranslationService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation, OnDestroy, OnInit } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { Subscription } from 'rxjs';\nimport { TagPaging } from '@alfresco/js-api';\n\n/**\n *\n * This component, provide a list of the tags relative a node with actions button to add or remove new tag\n */\n\n@Component({\n    selector: 'adf-tag-node-actions-list',\n    templateUrl: './tag-actions.component.html',\n    styleUrls: ['./tag-actions.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagActionsComponent implements OnChanges, OnInit, OnDestroy {\n\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when a tag is added successfully. */\n    @Output()\n    successAdd: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an action is chosen. */\n    @Output()\n    result = new EventEmitter();\n\n    newTagName: string;\n    tagsEntries: any;\n    errorMsg: string;\n    disableAddTag: boolean = true;\n\n    private subscriptions: Subscription[] = [];\n\n    constructor(private tagService: TagService, private translateService: TranslationService) {\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(\n            this.tagService.refresh.subscribe(() => {\n                this.refreshTag();\n            })\n        );\n    }\n\n    ngOnChanges() {\n        return this.refreshTag();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((tagPaging: TagPaging) => {\n                this.tagsEntries = tagPaging.list.entries;\n                this.disableAddTag = false;\n                this.result.emit(this.tagsEntries);\n            }, () => {\n                this.tagsEntries = null;\n                this.disableAddTag = true;\n                this.result.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    addTag() {\n        if (this.searchTag(this.newTagName)) {\n            this.translateService.get('TAG.MESSAGES.EXIST').subscribe((error) => {\n                this.errorMsg = error;\n            });\n            this.error.emit(this.errorMsg);\n        } else {\n            this.tagService.addTag(this.nodeId, this.newTagName).subscribe(() => {\n                this.newTagName = '';\n                this.successAdd.emit(this.nodeId);\n            });\n        }\n    }\n\n    searchTag(searchTagName: string) {\n        if (this.tagsEntries) {\n            return this.tagsEntries.find((currentTag) => {\n                return (searchTagName === currentTag.entry.tag);\n            });\n        }\n    }\n\n    cleanErrorMsg() {\n        this.errorMsg = '';\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { PaginationModel } from '@alfresco/adf-core';\n\n/**\n * This component provide a list of all the tag inside the ECM\n */\n@Component({\n    selector: 'adf-tag-list',\n    templateUrl: './tag-list.component.html',\n    styleUrls: ['./tag-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagListComponent implements OnInit {\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    result = new EventEmitter();\n\n    /**\n     * Array of tags that are displayed\n     */\n    tagsEntries: any = [];\n\n    /**\n     * Number of items per iteration\n     */\n    size: number = 10;\n\n    defaultPagination: PaginationModel;\n    pagination: PaginationModel;\n\n    isLoading = false;\n    isSizeMinimum = true;\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n\n        this.defaultPagination = {\n            skipCount: 0,\n            maxItems: this.size,\n            hasMoreItems: false\n        };\n\n        this.pagination = this.defaultPagination;\n\n        this.tagService.refresh.subscribe(() => {\n            this.tagsEntries = [];\n            this.refreshTag(this.defaultPagination);\n        });\n    }\n\n    ngOnInit() {\n        return this.refreshTag(this.defaultPagination);\n    }\n\n    refreshTag(opts?: any) {\n        this.tagService.getAllTheTags(opts).subscribe((tags: any) => {\n            this.tagsEntries = this.tagsEntries.concat(tags.list.entries);\n            this.pagination = tags.list.pagination;\n            this.result.emit(this.tagsEntries);\n            this.isLoading = false;\n        });\n    }\n\n    loadMoreTags() {\n        if (this.pagination.hasMoreItems) {\n            this.isLoading = true;\n            this.isSizeMinimum = false;\n\n            this.refreshTag({\n                skipCount: this.pagination.skipCount + this.pagination.count,\n                maxItems: this.size\n            });\n        }\n    }\n\n    loadLessTags() {\n        this.isSizeMinimum = false;\n        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);\n        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;\n        this.pagination.hasMoreItems = true;\n\n        if (this.tagsEntries.length <= this.size) {\n            this.isSizeMinimum = true;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { TagPaging } from '@alfresco/js-api';\n\n/**\n *\n * This component, ShowNodeTag a list of the tag on relative a node\n */\n\n@Component({\n    selector: 'adf-tag-node-list',\n    templateUrl: './tag-node-list.component.html',\n    styleUrls: ['./tag-node-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagNodeListComponent implements OnChanges {\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    /** Show delete button */\n    @Input()\n    showDelete = true;\n\n    tagsEntries: any;\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    results = new EventEmitter();\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n        this.tagService.refresh.subscribe(() => {\n            this.refreshTag();\n        });\n    }\n\n    ngOnChanges() {\n        return this.refreshTag();\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((tagPaging: TagPaging) => {\n                this.tagsEntries = tagPaging.list.entries;\n                this.results.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag).subscribe(() => {\n            this.refreshTag();\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../material.module';\nimport { TagActionsComponent } from './tag-actions.component';\nimport { TagListComponent } from './tag-list.component';\nimport { TagNodeListComponent } from './tag-node-list.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ],\n    declarations: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ]\n})\nexport class TagModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ObjectDataTableAdapter } from '@alfresco/adf-core';\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n\n/**\n * <adf-webscript-get [scriptPath]=\"string\"\n *                         [scriptArgs]=\"Object\"\n *                         [contextRoot]=\"string\"\n *                         [servicePath]=\"string\"\n *                         [contentType]=\"JSON|HTML|DATATABLE\"\n *                         (success)=\"customMethod($event)>\n * </adf-webscript-get>\n *\n * This component, provide a get webscript viewer\n *\n * @InputParam {string} scriptPath path to Web Script (as defined by Web Script)\n * @InputParam {Object} scriptArgs arguments to pass to Web Script\n * @InputParam {string} contextRoot path where application is deployed default value 'alfresco'\n * @InputParam {string} servicePath path where Web Script service is mapped default value 'service'\n * @InputParam {string} contentType JSON | HTML | DATATABLE | TEXT\n *\n * @Output - success - The event is emitted when the data are received\n *\n */\n@Component({\n    selector: 'adf-webscript-get',\n    templateUrl: 'webscript.component.html'\n})\nexport class WebscriptComponent implements OnChanges {\n\n    /** (required) Path to the webscript (as defined by webscript). */\n    @Input()\n    scriptPath: string;\n\n    /** Arguments to pass to the webscript. */\n    @Input()\n    scriptArgs: any;\n\n    /** Toggles whether to show or hide the data. */\n    @Input()\n    showData: boolean = true;\n\n    /** Path where the application is deployed */\n    @Input()\n    contextRoot: string = 'alfresco';\n\n    /** Path that the webscript service is mapped to. */\n    @Input()\n    servicePath: string = 'service';\n\n    /** Content type to interpret the data received from the webscript.\n     * Can be \"JSON\" , \"HTML\" , \"DATATABLE\" or \"TEXT\"\n     */\n    @Input()\n    contentType: string = 'TEXT';\n\n    /** Emitted when the operation succeeds. You can get the plain data from\n     * the webscript through the **success** event parameter and use it as you\n     * need in your application.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    data: any = undefined;\n    showError: boolean = false;\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    ngOnChanges(changes) {\n        if (this.showData) {\n            this.clean();\n        }\n\n        return new Promise((resolve, reject) => {\n            this.apiService.getInstance().webScript.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptData) => {\n\n                this.data = webScriptData;\n\n                if (this.showData) {\n                    if (this.contentType === 'DATATABLE') {\n                        this.data = this.showDataAsDataTable(webScriptData);\n                    }\n                }\n\n                this.success.emit(this.data);\n\n                resolve();\n            }, (error) => {\n                this.logService.log('Error' + error);\n                reject();\n            });\n        });\n    }\n\n    /**\n     * show the data in a ng2-alfresco-datatable\n     *\n     * @param data\n     *\n     * @returns the data as datatable\n     */\n    showDataAsDataTable(data: any) {\n        const datatableData: any = null;\n        try {\n\n            if (!data.schema) {\n                data.schema = ObjectDataTableAdapter.generateSchema(data.data);\n            }\n\n            if (data.schema && data.schema.length > 0) {\n                this.data = new ObjectDataTableAdapter(data.data, data.schema);\n            }\n\n        } catch (error) {\n            this.logService.error('error during the cast as datatable');\n        }\n\n        return datatableData;\n    }\n\n    clean() {\n        this.data = undefined;\n    }\n\n    isDataTableContent() {\n        return this.contentType === 'DATATABLE';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { MaterialModule } from '../material.module';\nimport { WebscriptComponent } from './webscript.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        WebscriptComponent\n    ],\n    declarations: [\n        WebscriptComponent\n    ]\n})\nexport class WebScriptModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataRow, ObjectUtils, ThumbnailService, ContentService } from '@alfresco/adf-core';\nimport { MinimalNode, NodeEntry } from '@alfresco/js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\n\nexport class ShareDataRow implements DataRow {\n\n    static ERR_OBJECT_NOT_FOUND: string = 'Object source not found';\n\n    cache: { [key: string]: any } = {};\n    isSelected: boolean = false;\n    isDropTarget: boolean;\n    cssClass: string = '';\n\n    get node(): NodeEntry {\n        return this.obj;\n    }\n\n    set node(value: NodeEntry) {\n        this.obj = value;\n        this.cache = {};\n    }\n\n    constructor(private obj: NodeEntry,\n                private contentService: ContentService,\n                private permissionsStyle: PermissionStyleModel[],\n                private thumbnailService?: ThumbnailService) {\n        if (!obj) {\n            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);\n        }\n\n        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);\n\n        if (permissionsStyle) {\n            this.cssClass = this.getPermissionClass(obj);\n        }\n    }\n\n    getPermissionClass(nodeEntity: NodeEntry): string {\n        let permissionsClasses = '';\n\n        this.permissionsStyle.forEach((currentPermissionsStyle: PermissionStyleModel) => {\n\n            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {\n\n                if (this.contentService.hasAllowableOperations(nodeEntity.entry, currentPermissionsStyle.permission)) {\n                    permissionsClasses += ` ${currentPermissionsStyle.css}`;\n                }\n            }\n\n        });\n\n        return permissionsClasses;\n    }\n\n    private applyPermissionStyleToFile(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFile && node.isFile);\n    }\n\n    private applyPermissionStyleToFolder(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFolder && node.isFolder);\n    }\n\n    isFolderAndHasPermissionToUpload(nodeEntry: NodeEntry): boolean {\n        return this.isFolder(nodeEntry) && this.contentService.hasAllowableOperations(nodeEntry.entry, 'create');\n    }\n\n    isFolder(nodeEntry: NodeEntry): boolean {\n        return nodeEntry.entry && nodeEntry.entry.isFolder;\n    }\n\n    cacheValue(key: string, value: any): any {\n        this.cache[key] = value;\n        return value;\n    }\n\n    getValue(key: string): any {\n        if (this.cache[key] !== undefined) {\n            return this.cache[key];\n        }\n        return ObjectUtils.getValue(this.obj.entry, key);\n    }\n\n    imageErrorResolver(event: Event): any {\n        if (this.obj.entry.content) {\n            return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);\n        }\n    }\n\n    hasValue(key: string): boolean {\n        return this.getValue(key) !== undefined;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    DataColumn,\n    DataRow,\n    DataSorting,\n    DataTableAdapter,\n    ThumbnailService,\n    ContentService\n} from '@alfresco/adf-core';\nimport { NodePaging } from '@alfresco/js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { ShareDataRow } from './share-data-row.model';\nimport { NodeEntry } from '@alfresco/js-api/src/api/content-rest-api/model/nodeEntry';\nimport { RowFilter } from './row-filter.model';\n\nexport class ShareDataTableAdapter implements DataTableAdapter {\n\n    ERR_ROW_NOT_FOUND: string = 'Row not found';\n    ERR_COL_NOT_FOUND: string = 'Column not found';\n\n    private _sortingMode: string;\n    private sorting: DataSorting;\n    private rows: DataRow[];\n    private columns: DataColumn[];\n\n    private filter: RowFilter;\n    private imageResolver: any;\n\n    thumbnails: boolean = false;\n    permissionsStyle: PermissionStyleModel[];\n    selectedRow: DataRow;\n\n    set sortingMode(value: string) {\n        let newValue = (value || 'client').toLowerCase();\n        if (newValue !== 'client' && newValue !== 'server') {\n            newValue = 'client';\n        }\n        this._sortingMode = newValue;\n    }\n\n    get sortingMode(): string {\n        return this._sortingMode;\n    }\n\n    constructor(private thumbnailService: ThumbnailService,\n                private contentService: ContentService,\n                schema: DataColumn[] = [],\n                sorting?: DataSorting,\n                sortingMode: string = 'client') {\n        this.rows = [];\n        this.columns = schema || [];\n        this.sorting = sorting;\n        this.sortingMode = sortingMode;\n    }\n\n    getRows(): Array<DataRow> {\n        return this.rows;\n    }\n\n    // TODO: disable this api\n    setRows(rows: Array<DataRow>) {\n        this.rows = rows || [];\n        this.sort();\n    }\n\n    getColumns(): Array<DataColumn> {\n        return this.columns;\n    }\n\n    setColumns(columns: Array<DataColumn>) {\n        this.columns = columns || [];\n    }\n\n    getValue(row: DataRow, col: DataColumn): any {\n        if (!row) {\n            throw new Error(this.ERR_ROW_NOT_FOUND);\n        }\n        if (!col) {\n            throw new Error(this.ERR_COL_NOT_FOUND);\n        }\n        const dataRow: ShareDataRow = <ShareDataRow> row;\n        const value: any = row.getValue(col.key);\n        if (dataRow.cache[col.key] !== undefined) {\n            return dataRow.cache[col.key];\n        }\n\n        if (col.key === '$thumbnail') {\n\n            if (this.imageResolver) {\n                const resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n\n            const node = (<ShareDataRow> row).node;\n\n            if (node.entry.isFolder) {\n                return this.getFolderIcon(node);\n            }\n\n            if (node.entry.isFile) {\n                if (this.thumbnails) {\n                    return this.thumbnailService.getDocumentThumbnailUrl(node);\n                }\n            }\n\n            if (node.entry.content) {\n                const mimeType = node.entry.content.mimeType;\n                if (mimeType) {\n                    return this.thumbnailService.getMimeTypeIcon(mimeType);\n                }\n            }\n\n            return this.thumbnailService.getDefaultMimeTypeIcon();\n        }\n\n        if (col.type === 'image') {\n\n            if (this.imageResolver) {\n                const resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n        }\n\n        return dataRow.cacheValue(col.key, value);\n    }\n\n    getSorting(): DataSorting {\n        return this.sorting;\n    }\n\n    setSorting(sorting: DataSorting): void {\n        this.sorting = sorting;\n\n        this.sortRows(this.rows, this.sorting);\n    }\n\n    sort(key?: string, direction?: string): void {\n        const sorting = this.sorting || new DataSorting();\n        if (key) {\n            sorting.key = key;\n            sorting.direction = direction || 'asc';\n        }\n        this.setSorting(sorting);\n    }\n\n    setFilter(filter: RowFilter) {\n        this.filter = filter;\n    }\n\n    setImageResolver(resolver: any) {\n        this.imageResolver = resolver;\n    }\n\n    private getFolderIcon(node: any) {\n        if (this.isSmartFolder(node)) {\n            return this.thumbnailService.getMimeTypeIcon('smartFolder');\n        } else if (this.isRuleFolder(node)) {\n            return this.thumbnailService.getMimeTypeIcon('ruleFolder');\n        } else if (this.isALinkFolder(node)) {\n            return this.thumbnailService.getMimeTypeIcon('linkFolder');\n        } else {\n            return this.thumbnailService.getMimeTypeIcon('folder');\n        }\n    }\n\n    isSmartFolder(node: any) {\n        const nodeAspects = this.getNodeAspectNames(node);\n        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||\n            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);\n    }\n\n    isRuleFolder(node: any) {\n        const nodeAspects = this.getNodeAspectNames(node);\n        return nodeAspects.indexOf('rule:rules') > -1 ||\n            (nodeAspects.indexOf('rule:rules') > -1);\n    }\n\n    isALinkFolder(node: any) {\n        const nodeType = node.entry ? node.entry.nodeType : node.nodeType;\n        return nodeType === 'app:folderlink';\n    }\n\n    private getNodeAspectNames(node: any): any[] {\n        return node.entry && node.entry.aspectNames ? node.entry.aspectNames : node.aspectNames ? node.aspectNames : [];\n    }\n\n    private sortRows(rows: DataRow[], sorting: DataSorting) {\n        if (this.sortingMode === 'server') {\n            return;\n        }\n\n        const options: Intl.CollatorOptions = {};\n\n        if (sorting && sorting.key && rows && rows.length > 0) {\n\n            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {\n                options.numeric = true;\n            }\n\n            rows.sort((a: ShareDataRow, b: ShareDataRow) => {\n                if (a.node.entry.isFolder !== b.node.entry.isFolder) {\n                    return a.node.entry.isFolder ? -1 : 1;\n                }\n\n                let left = a.getValue(sorting.key);\n                if (left) {\n                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();\n                } else {\n                    left = '';\n                }\n\n                let right = b.getValue(sorting.key);\n                if (right) {\n                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();\n                } else {\n                    right = '';\n                }\n\n                return sorting.direction === 'asc'\n                    ? left.localeCompare(right, undefined, options)\n                    : right.localeCompare(left, undefined, options);\n            });\n        }\n    }\n\n    public loadPage(nodePaging: NodePaging, merge: boolean = false) {\n        let shareDataRows: ShareDataRow[] = [];\n\n        if (nodePaging && nodePaging.list) {\n            const nodeEntries: NodeEntry[] = nodePaging.list.entries;\n            if (nodeEntries && nodeEntries.length > 0) {\n                shareDataRows = nodeEntries.map((item) => new ShareDataRow(item, this.contentService, this.permissionsStyle, this.thumbnailService));\n\n                if (this.filter) {\n                    shareDataRows = shareDataRows.filter(this.filter);\n                }\n\n                if (this.sortingMode !== 'server') {\n                    // Sort by first sortable or just first column\n                    if (this.columns && this.columns.length > 0) {\n                        const sorting = this.getSorting();\n                        if (sorting) {\n                            this.sortRows(shareDataRows, sorting);\n                        } else {\n                            const sortable = this.columns.filter((c) => c.sortable);\n                            if (sortable.length > 0) {\n                                this.sort(sortable[0].key, 'asc');\n                            } else {\n                                this.sort(this.columns[0].key, 'asc');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (merge) {\n            const listPrunedDuplicate = shareDataRows.filter((elementToFilter: any) => {\n                const isPresent = this.rows.find((currentRow: any) => {\n                    return currentRow.obj.entry.id === elementToFilter.obj.entry.id;\n                });\n\n                return !isPresent;\n            });\n\n            this.rows = this.rows.concat(listPrunedDuplicate);\n        } else {\n            this.rows = shareDataRows;\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let presetsDefaultModel = {\n    '-trashcan-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'archivedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'archivedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',\n            sortable: true\n        }\n    ],\n    '-sites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-mysites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-favorites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ],\n    '-recent-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        }\n    ],\n    '-sharedlinks-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        },\n        {\n            key: 'sharedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',\n            sortable: true\n        }\n    ],\n    'default': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ContentActionModel {\n    icon: string;\n    title: string;\n    handler: ContentActionHandler;\n    execute: Function;\n    target: string;\n    permission: string;\n    disableWithNoPermission: boolean = false;\n    disabled: boolean | Function = false;\n    visible: boolean | Function = true;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.icon = obj.icon;\n            this.title = obj.title;\n            this.handler = obj.handler;\n            this.execute = obj.execute;\n            this.target = obj.target;\n            this.permission = obj.permission;\n            this.disableWithNoPermission = obj.disableWithNoPermission;\n\n            if (obj.hasOwnProperty('disabled')) {\n                this.disabled = obj.disabled;\n            }\n\n            if (obj.hasOwnProperty('visible')) {\n                this.visible = obj.visible;\n            }\n        }\n    }\n}\n\nexport enum ContentActionTarget {\n    Document = 'document',\n    Folder = 'folder',\n    All = 'all'\n}\n\nexport type ContentActionHandler = (obj: any, target?: any, permission?: string) => any;\n\nexport class DocumentActionModel extends ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'document';\n    }\n}\n\nexport class FolderActionModel extends  ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'folder';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseEvent } from '@alfresco/adf-core';\nimport { NodeEntry, Node } from '@alfresco/js-api';\n\nexport class NodeEntityEvent extends BaseEvent<NodeEntry> {\n\n    value: NodeEntry;\n\n    defaultPrevented: boolean;\n\n    constructor(nodeEntry: NodeEntry) {\n        super();\n        this.value = nodeEntry;\n    }\n}\n\nexport class NodeEntryEvent extends BaseEvent<Node> {\n\n    value: Node;\n\n    defaultPrevented: boolean;\n\n    constructor(node: Node) {\n        super();\n        this.value = node;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:rxjs-no-subject-value */\n\nimport {\n    AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone,\n    OnChanges, OnDestroy, OnInit, Output, SimpleChanges, ViewChild, ViewEncapsulation\n} from '@angular/core';\n\nimport {\n    ContentService,\n    DataCellEvent,\n    DataColumn,\n    DataRowActionEvent,\n    DataSorting,\n    DataTableComponent,\n    DisplayMode,\n    ObjectDataColumn,\n    PaginatedComponent,\n    AppConfigService,\n    DataColumnListComponent,\n    UserPreferencesService,\n    PaginationModel,\n    ThumbnailService,\n    CustomLoadingContentTemplateDirective,\n    CustomNoPermissionTemplateDirective,\n    CustomEmptyContentTemplateDirective,\n    RequestPaginationModel,\n    AlfrescoApiService,\n    UserPreferenceValues,\n    LockService\n} from '@alfresco/adf-core';\n\nimport { Node, NodeEntry, NodePaging, Pagination } from '@alfresco/js-api';\nimport { Subject, BehaviorSubject, Subscription, of } from 'rxjs';\nimport { ShareDataRow } from './../data/share-data-row.model';\nimport { ShareDataTableAdapter } from './../data/share-datatable-adapter';\nimport { presetsDefaultModel } from '../models/preset.model';\nimport { ContentActionModel } from './../models/content-action.model';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { NodeEntityEvent, NodeEntryEvent } from './node.event';\nimport { NavigableComponentInterface } from '../../breadcrumb/navigable-component.interface';\nimport { RowFilter } from '../data/row-filter.model';\nimport { DocumentListService } from '../services/document-list.service';\nimport { DocumentLoaderNode } from '../models/document-folder.model';\n\n@Component({\n    selector: 'adf-document-list',\n    styleUrls: ['./document-list.component.scss'],\n    templateUrl: './document-list.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: '.adf-document-list' }\n})\nexport class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent, NavigableComponentInterface {\n\n    static SINGLE_CLICK_NAVIGATION: string = 'click';\n    static DOUBLE_CLICK_NAVIGATION: string = 'dblclick';\n\n    DEFAULT_PAGINATION: Pagination = new Pagination({\n        hasMoreItems: false,\n        skipCount: 0,\n        maxItems: 25,\n        totalItems: 0\n    });\n\n    @ContentChild(DataColumnListComponent)\n    columnList: DataColumnListComponent;\n\n    @ContentChild(CustomLoadingContentTemplateDirective)\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n\n    @ContentChild(CustomNoPermissionTemplateDirective)\n    customNoPermissionsTemplate: CustomNoPermissionTemplateDirective;\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    customNoContentTemplate: CustomEmptyContentTemplateDirective;\n\n    /** Include additional information about the node in the server request. For example: association, isLink, isLocked and others. */\n    @Input()\n    includeFields: string[];\n\n    /**\n     * Filters the Node list using the *where* condition of the REST API\n     * (for example, isFolder=true). See the REST API documentation for more information.\n     */\n    @Input()\n    where: string;\n\n    /** Change the display mode of the table. Can be \"list\" or \"gallery\". */\n    @Input()\n    display: string = DisplayMode.List;\n\n    /** Define a set of CSS styles to apply depending on the permission\n     * of the user on that node. See the Permission Style model\n     * page for further details and examples.\n     */\n    @Input()\n    permissionsStyle: PermissionStyleModel[] = [];\n\n    /** The default route for all the location-based columns (if declared). */\n    @Input()\n    locationFormat: string = '/';\n\n    /** Toggles navigation to folder content or file preview */\n    @Input()\n    navigate: boolean = true;\n\n    /** Toggles the header */\n    @Input()\n    showHeader: boolean = true;\n\n    /** User interaction for folder navigation or file preview.\n     * Valid values are \"click\" and \"dblclick\". Default value: \"dblclick\"\n     */\n    @Input()\n    navigationMode: string = DocumentListComponent.DOUBLE_CLICK_NAVIGATION; // click|dblclick\n\n    /** Show document thumbnails rather than icons */\n    @Input()\n    thumbnails: boolean = false;\n\n    /** Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,\n     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // null|single|multiple\n\n    /** Toggles multiselect mode */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Toggles content actions for each row */\n    @Input()\n    contentActions: boolean = false;\n\n    /** Position of the content actions dropdown menu. Can be set to \"left\" or \"right\". */\n    @Input()\n    contentActionsPosition: string = 'right'; // left|right\n\n    /** Toggles context menus for each row */\n    @Input()\n    contextMenuActions: boolean = false;\n\n    /** Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg' */\n    @Input()\n    emptyFolderImageUrl: string = './assets/images/empty_doc_lib.svg';\n\n    /**\n     * When true, this enables you to drop files directly into subfolders shown\n     * as items in the list. When false, the dropped file will be added to the\n     * current folder (ie, the one containing all the items shown in the list).\n     * See the Upload directive for further details about how the file drop is\n     * handled.\n     */\n    @Input()\n    allowDropFiles: boolean = false;\n\n    /** Defines default sorting. The format is an array of 2 strings `[key, direction]`\n     * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to\n     * override the default sorting detected by the component based on columns.\n     */\n    @Input()\n    sorting = ['name', 'asc'];\n\n    /** Defines sorting mode. Can be either `client` (items in the list\n     * are sorted client-side) or `server` (the ordering supplied by the\n     * server is used without further client-side sorting).\n     * Note that the `server` option *does not* request the server to sort the data\n     * before delivering it.\n     */\n    @Input()\n    sortingMode = 'client';\n\n    /** The inline style to apply to every row. See\n     * the Angular NgStyle\n     * docs for more details and usage examples.\n     */\n    @Input()\n    rowStyle: string;\n\n    /** The CSS class to apply to every row */\n    @Input()\n    rowStyleClass: string;\n\n    /** Toggles the loading state and animated spinners for the component. Used in\n     * combination with `navigate=false` to perform custom navigation and loading\n     * state indication.\n     */\n    @Input()\n    loading: boolean = false;\n\n    /** @hidden */\n    @Input()\n    _rowFilter: RowFilter | null = null;\n\n    /**\n     * Custom function to choose whether to show or hide rows.\n     * See the [Row Filter Model](row-filter.model.md) page for\n     * more information.\n     */\n    @Input()\n    set rowFilter(rowFilter: RowFilter) {\n        this._rowFilter = rowFilter;\n        if (this.data) {\n            this.data.setFilter(this._rowFilter);\n            if (this._currentFolderId) {\n                this.reload();\n            }\n        }\n    }\n\n    get rowFilter(): RowFilter {\n        return this._rowFilter;\n    }\n\n    /**\n     * Custom function to choose image file paths to show. See the\n     * [Image Resolver Model](image-resolver.model.md) page for\n     * more information.\n     */\n    @Input()\n    imageResolver: any | null = null;\n\n    /** Toggles the sticky header mode. */\n    @Input()\n    stickyHeader: boolean = false;\n\n    _currentFolderId: string = null;\n\n    /** The ID of the folder node to display or a reserved string alias for special sources */\n    @Input()\n    set currentFolderId(currentFolderId: string) {\n        if (this._currentFolderId !== currentFolderId) {\n            this._currentFolderId = currentFolderId;\n            if (this.data) {\n                this.data.loadPage(null, false);\n                this.resetNewFolderPagination();\n            }\n\n            if (this._currentFolderId) {\n                this.loadFolder();\n            }\n        }\n    }\n\n    get currentFolderId(): string {\n        return this._currentFolderId;\n    }\n\n    /** The Document list will show all the nodes contained in the NodePaging entity */\n    @Input()\n    node: NodePaging = null;\n\n    /** Default value is stored in the user preference settings. Use this only if you are not using pagination. */\n    @Input()\n    maxItems: number = this.DEFAULT_PAGINATION.maxItems;\n\n    /** Emitted when the user clicks a list node */\n    @Output()\n    nodeClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the user double-clicks a list node */\n    @Output()\n    nodeDblClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the current display folder changes */\n    @Output()\n    folderChange: EventEmitter<NodeEntryEvent> = new EventEmitter<NodeEntryEvent>();\n\n    /** Emitted when the user acts upon files with either single or double click\n     * (depends on `navigation-mode`). Useful for integration with the\n     * Viewer component.\n     */\n    @Output()\n    preview: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the Document List has loaded all items and is ready for use */\n    @Output()\n    ready: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when the API fails to get the Document List data */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('dataTable')\n    dataTable: DataTableComponent;\n\n    actions: ContentActionModel[] = [];\n    contextActionHandler: Subject<any> = new Subject();\n    data: ShareDataTableAdapter;\n    noPermission: boolean = false;\n    selection = new Array<NodeEntry>();\n    $folderNode: Subject<Node> = new Subject<Node>();\n\n    // @deprecated 3.0.0\n    folderNode: Node;\n\n    private _pagination: PaginationModel = this.DEFAULT_PAGINATION;\n    pagination: BehaviorSubject<PaginationModel> = new BehaviorSubject<PaginationModel>(this.DEFAULT_PAGINATION);\n\n    private layoutPresets = {};\n    private subscriptions: Subscription[] = [];\n    private rowMenuCache: { [key: string]: ContentActionModel[] } = {};\n    private loadingTimeout;\n\n    constructor(private documentListService: DocumentListService,\n                private ngZone: NgZone,\n                private elementRef: ElementRef,\n                private appConfig: AppConfigService,\n                private userPreferencesService: UserPreferencesService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService,\n                private alfrescoApiService: AlfrescoApiService,\n                private lockService: LockService) {\n\n        this.userPreferencesService.select(UserPreferenceValues.PaginationSize).subscribe((pagSize) => {\n            this.maxItems = this._pagination.maxItems = pagSize;\n        });\n    }\n\n    getContextActions(node: NodeEntry) {\n        if (node && node.entry) {\n            const actions = this.getNodeActions(node);\n            if (actions && actions.length > 0) {\n                return actions.map((currentAction: ContentActionModel) => {\n                    return {\n                        model: currentAction,\n                        node: node,\n                        subject: this.contextActionHandler\n                    };\n                });\n            }\n        }\n        return null;\n    }\n\n    get hasCustomLayout(): boolean {\n        return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;\n    }\n\n    private getDefaultSorting(): DataSorting {\n        let defaultSorting: DataSorting;\n        if (this.sorting) {\n            const [key, direction] = this.sorting;\n            defaultSorting = new DataSorting(key, direction);\n        }\n        return defaultSorting;\n    }\n\n    private getLayoutPreset(name: string = 'default'): DataColumn[] {\n        return (this.layoutPresets[name] || this.layoutPresets['default']).map((col) => new ObjectDataColumn(col));\n    }\n\n    isMobile(): boolean {\n        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    }\n\n    isEmpty() {\n        return !this.data || this.data.getRows().length === 0;\n    }\n\n    ngOnInit() {\n        this.rowMenuCache = {};\n        this.loadLayoutPresets();\n        this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, null, this.getDefaultSorting(), this.sortingMode);\n        this.data.thumbnails = this.thumbnails;\n        this.data.permissionsStyle = this.permissionsStyle;\n\n        if (this._rowFilter) {\n            this.data.setFilter(this._rowFilter);\n        }\n\n        if (this.imageResolver) {\n            this.data.setImageResolver(this.imageResolver);\n        }\n\n        this.subscriptions.push(\n            this.contextActionHandler.subscribe((val) => this.contextActionCallback(val))\n        );\n\n        this.enforceSingleClickNavigationForMobile();\n    }\n\n    ngAfterContentInit() {\n        if (this.columnList) {\n            this.subscriptions.push(\n                this.columnList.columns.changes.subscribe(() => {\n                    this.setTableSchema();\n                })\n            );\n        }\n        this.setTableSchema();\n    }\n\n    private setTableSchema() {\n        let schema: DataColumn[] = [];\n\n        if (this.hasCustomLayout) {\n            schema = this.columnList.columns.map((c) => <DataColumn> c);\n        }\n\n        if (!this.data) {\n            this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, schema, this.getDefaultSorting(), this.sortingMode);\n        } else if (schema && schema.length > 0) {\n            this.data.setColumns(schema);\n        }\n\n        const columns = this.data.getColumns();\n        if (!columns || columns.length === 0) {\n            this.setupDefaultColumns(this._currentFolderId);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.resetSelection();\n        if (this.data) {\n            this.data.thumbnails = this.thumbnails;\n\n        }\n        if (changes.sortingMode && !changes.sortingMode.firstChange && this.data) {\n            this.data.sortingMode = changes.sortingMode.currentValue;\n        }\n\n        if (changes.sorting && !changes.sorting.firstChange && this.data) {\n            const newValue = changes.sorting.currentValue;\n            if (newValue && newValue.length > 0) {\n                const [key, direction] = newValue;\n                this.data.setSorting(new DataSorting(key, direction));\n            }\n        }\n\n        if (this.data) {\n            if (changes.node && changes.node.currentValue) {\n                const merge = this._pagination ? this._pagination.merge : false;\n\n                this.data.loadPage(changes.node.currentValue, merge);\n                this.onDataReady(changes.node.currentValue);\n            } else if (changes.imageResolver) {\n                this.data.setImageResolver(changes.imageResolver.currentValue);\n            }\n        }\n    }\n\n    reload() {\n        this.ngZone.run(() => {\n            this.resetSelection();\n            if (this.node) {\n                this.data.loadPage(this.node, this._pagination.merge);\n                this.onDataReady(this.node);\n            } else {\n                this.loadFolder();\n            }\n        });\n    }\n\n    contextActionCallback(action) {\n        if (action) {\n            this.executeContentAction(action.node, action.model);\n        }\n    }\n\n    getNodeActions(node: NodeEntry | any): ContentActionModel[] {\n        if (node && node.entry) {\n            let target = null;\n\n            if (node.entry.isFile) {\n                target = 'document';\n            } else if (node.entry.isFolder) {\n                target = 'folder';\n            }\n\n            if (target) {\n                const actions = this.rowMenuCache[node.entry.id];\n                if (actions) {\n                    actions.forEach((action) => {\n                        this.refreshAction(action, node);\n                    });\n                    return actions;\n                }\n\n                const actionsByTarget = this.actions\n                    .filter((entry) => {\n                        const isVisible = (typeof entry.visible === 'function')\n                            ? entry.visible(node)\n                            : entry.visible;\n\n                        return isVisible && entry.target.toLowerCase() === target;\n                    })\n                    .map((action) => new ContentActionModel(action));\n\n                actionsByTarget.forEach((action) => {\n                    this.refreshAction(action, node);\n                });\n\n                this.rowMenuCache[node.entry.id] = actionsByTarget;\n                return actionsByTarget;\n            }\n        }\n\n        return [];\n    }\n\n    private refreshAction(action: ContentActionModel, node: NodeEntry) {\n        action.disabled = this.isActionDisabled(action, node);\n        action.visible = this.isActionVisible(action, node);\n    }\n\n    private isActionVisible(action: ContentActionModel, node: NodeEntry): boolean {\n        if (typeof action.visible === 'function') {\n            return action.visible(node);\n        }\n\n        return action.visible;\n    }\n\n    private isActionDisabled(action: ContentActionModel, node: NodeEntry): boolean {\n        if (typeof action.disabled === 'function') {\n            return action.disabled(node);\n        }\n\n        if ((action.permission &&\n            action.disableWithNoPermission &&\n            !this.contentService.hasAllowableOperations(node.entry, action.permission)) ||\n            this.lockService.isLocked(node.entry)) {\n            return true;\n        } else {\n            return action.disabled;\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onShowContextMenu(e?: Event) {\n        if (e && this.contextMenuActions) {\n            e.preventDefault();\n        }\n    }\n\n    navigateTo(node: Node | string): boolean {\n        if (typeof node === 'string') {\n            this.resetNewFolderPagination();\n            this._currentFolderId = node;\n            this.folderChange.emit(new NodeEntryEvent(<Node> { id: node }));\n            this.reload();\n            return true;\n        } else {\n            if (this.canNavigateFolder(node)) {\n                this.resetNewFolderPagination();\n                this._currentFolderId = this.getNodeFolderDestinationId(node);\n                this.folderChange.emit(new NodeEntryEvent(<Node> { id: this._currentFolderId }));\n                this.reload();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private getNodeFolderDestinationId(node: Node) {\n        return this.isLinkFolder(node) ? node.properties['cm:destination'] : node.id;\n    }\n\n    private isLinkFolder(node: Node) {\n        return node.nodeType === 'app:folderlink' && node.properties &&\n            node.properties['cm:destination'];\n    }\n\n    updateCustomSourceData(nodeId: string): void {\n        this._currentFolderId = nodeId;\n    }\n\n    /**\n     * Invoked when executing content action for a document or folder.\n     * @param node Node to be the context of the execution.\n     * @param action Action to be executed against the context.\n     */\n    executeContentAction(node: NodeEntry, action: ContentActionModel) {\n        if (node && node.entry && action) {\n            let handlerSub;\n\n            if (typeof action.handler === 'function') {\n                handlerSub = action.handler(node, this, action.permission);\n            } else {\n                handlerSub = of(true);\n            }\n\n            if (typeof action.execute === 'function' && handlerSub) {\n                handlerSub.subscribe(() => {\n                    action.execute(node);\n                });\n            }\n        }\n    }\n\n    private setLoadingState(value: boolean) {\n        if (value) {\n            clearTimeout(this.loadingTimeout);\n            this.loadingTimeout = setTimeout(() => {\n                this.loading = true;\n            }, 1000);\n        } else {\n            clearTimeout(this.loadingTimeout);\n            this.loading = false;\n        }\n    }\n\n    loadFolder() {\n        if (!this._pagination.merge) {\n            this.setLoadingState(true);\n        }\n\n        if (!this.hasCustomLayout) {\n            this.setupDefaultColumns(this._currentFolderId);\n        }\n\n        if (this.documentListService.isCustomSourceService(this._currentFolderId)) {\n            this.updateCustomSourceData(this._currentFolderId);\n        }\n\n        this.documentListService.loadFolderByNodeId(this._currentFolderId, this._pagination, this.includeFields, this.where)\n            .subscribe((documentNode: DocumentLoaderNode) => {\n                if (documentNode.currentNode) {\n                    this.folderNode = documentNode.currentNode.entry;\n                    this.$folderNode.next(documentNode.currentNode.entry);\n                }\n                this.onPageLoaded(documentNode.children);\n            }, (err) => {\n                this.handleError(err);\n            });\n    }\n\n    resetSelection() {\n        this.dataTable.resetSelection();\n        this.selection = [];\n        this.noPermission = false;\n    }\n\n    onPageLoaded(nodePaging: NodePaging) {\n        if (nodePaging) {\n            this.data.loadPage(nodePaging, this._pagination.merge);\n            this.setLoadingState(false);\n            this.onDataReady(nodePaging);\n        }\n    }\n\n    /**\n     * Creates a set of predefined columns.\n     */\n    setupDefaultColumns(preset: string = 'default'): void {\n        if (this.data) {\n            const columns = this.getLayoutPreset(preset);\n            this.data.setColumns(columns);\n        }\n    }\n\n    onPreviewFile(node: NodeEntry) {\n        if (node) {\n            this.preview.emit(new NodeEntityEvent(node));\n        }\n    }\n\n    onNodeClick(nodeEntry: NodeEntry) {\n        const domEvent = new CustomEvent('node-click', {\n            detail: {\n                sender: this,\n                node: nodeEntry\n            },\n            bubbles: true\n        });\n\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(nodeEntry);\n        this.nodeClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {\n                this.executeActionClick(nodeEntry);\n            }\n        }\n\n    }\n\n    onNodeDblClick(nodeEntry: NodeEntry) {\n        const domEvent = new CustomEvent('node-dblclick', {\n            detail: {\n                sender: this,\n                node: nodeEntry\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(nodeEntry);\n        this.nodeDblClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {\n                this.executeActionClick(nodeEntry);\n            }\n        }\n    }\n\n    executeActionClick(nodeEntry: NodeEntry) {\n        if (nodeEntry && nodeEntry.entry) {\n            if (nodeEntry.entry.isFile) {\n                this.onPreviewFile(nodeEntry);\n            }\n\n            if (nodeEntry.entry.isFolder) {\n                this.navigateTo(nodeEntry.entry);\n            }\n\n            if (nodeEntry.entry['guid']) {\n                const options = {\n                    include: this.includeFields\n                };\n\n                this.alfrescoApiService.nodesApi.getNode(nodeEntry.entry['guid'], options)\n                    .then((node: NodeEntry) => {\n                        this.navigateTo(node.entry);\n                    });\n            }\n        }\n    }\n\n    onNodeSelect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map((entry) => entry.node);\n        const domEvent = new CustomEvent('node-select', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onNodeUnselect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map((entry) => entry.node);\n        const domEvent = new CustomEvent('node-unselect', {\n            detail: {\n                node: event.row ? event.row.node : null,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        if (this.contextMenuActions) {\n            const args = event.value;\n            const node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getContextActions(node) || [];\n            }\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        if (this.contentActions) {\n            const args = event.value;\n            const node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getNodeActions(node) || [];\n            }\n        }\n    }\n\n    onExecuteRowAction(event: DataRowActionEvent) {\n        if (this.contentActions) {\n            const args = event.value;\n            const node = (<ShareDataRow> args.row).node;\n            const action = (<ContentActionModel> args.action);\n            this.executeContentAction(node, action);\n        }\n    }\n\n    private enforceSingleClickNavigationForMobile(): void {\n        if (this.isMobile()) {\n            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;\n        }\n    }\n\n    canNavigateFolder(node: Node): boolean {\n        let canNavigateFolder: boolean = false;\n\n        if (node && node.isFolder) {\n            canNavigateFolder = true;\n        }\n\n        return canNavigateFolder;\n    }\n\n    private loadLayoutPresets(): void {\n        const externalSettings = this.appConfig.get('document-list.presets', null);\n\n        if (externalSettings) {\n            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);\n        } else {\n            this.layoutPresets = presetsDefaultModel;\n        }\n    }\n\n    private onDataReady(nodePaging: NodePaging) {\n        this.ready.emit(nodePaging);\n        this.pagination.next(nodePaging.list.pagination);\n    }\n\n    updatePagination(requestPaginationModel: RequestPaginationModel) {\n        this._pagination.maxItems = requestPaginationModel.maxItems;\n        this._pagination.merge = requestPaginationModel.merge;\n        this._pagination.skipCount = requestPaginationModel.skipCount;\n        this.reload();\n    }\n\n    private resetNewFolderPagination() {\n        this._pagination.skipCount = 0;\n        this._pagination.maxItems = this.maxItems;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((s) => s.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    private handleError(err: any) {\n        if (err.message) {\n            try {\n                if (JSON.parse(err.message).error.statusCode === 403) {\n                    this.setLoadingState(false);\n                    this.noPermission = true;\n                }\n            } catch (error) {\n            }\n        }\n        this.error.emit(err);\n\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { Component } from '@angular/core';\n\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-columns',\n    template: ''\n})\nexport class ContentColumnListComponent {\n\n    constructor(private documentList: DocumentListComponent, private logService: LogService ) {\n        this.logService.log('ContentColumnListComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnListComponent instead.');\n    }\n\n    /**\n     * Registers column model within the parent document list component.\n     * @param column Column definition model to register.\n     */\n    registerColumn(column: DataColumn): boolean {\n        if (this.documentList && column) {\n            const columns = this.documentList.data.getColumns();\n            columns.push(column);\n            return true;\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector no-input-rename  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\n\nimport { ContentColumnListComponent } from './content-column-list.component';\n\n@Component({\n    selector: 'content-column',\n    template: ''\n})\nexport class ContentColumnComponent implements OnInit, AfterContentInit, DataColumn {\n\n    @Input()\n    key: string;\n\n    @Input()\n    type: string = 'text';\n\n    @Input()\n    format: string;\n\n    @Input()\n    sortable: boolean = false;\n\n    @Input()\n    title: string = '';\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    /**\n     * Title to be used for screen readers.\n     */\n    @Input('sr-title')\n    srTitle: string;\n\n    @Input('class')\n    cssClass: string;\n\n    constructor(private list: ContentColumnListComponent, private logService: LogService) {\n        this.logService.log('ContentColumnComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnComponent instead.');\n    }\n\n    ngOnInit() {\n        if (!this.srTitle && this.key === '$thumbnail') {\n            this.srTitle = 'Thumbnail';\n        }\n    }\n\n    ngAfterContentInit() {\n        this.register();\n    }\n\n    register(): boolean {\n        if (this.list) {\n            return this.list.registerColumn(this);\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PermissionModel {\n    type: string;\n    action: string;\n    permission: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.type = obj.type || null;\n            this.action = obj.action || null;\n            this.permission = obj.permission || null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Output, EventEmitter } from '@angular/core';\nimport { Node, NodeEntry } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { AlfrescoApiService, ContentService, NodeDownloadDirective } from '@alfresco/adf-core';\nimport { MatDialog } from '@angular/material';\n\nimport { DocumentListService } from './document-list.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NodeActionsService {\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private contentDialogService: ContentNodeDialogService,\n                public dialogRef: MatDialog,\n                public content: ContentService,\n                private documentListService?: DocumentListService,\n                private apiService?: AlfrescoApiService,\n                private dialog?: MatDialog) {}\n\n    downloadNode(node: NodeEntry) {\n        new NodeDownloadDirective(this.apiService, this.dialog)\n            .downloadNode(node);\n    }\n\n    /**\n     * Copy content node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyContent(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Copy folder node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyFolder(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * Move content node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveContent(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Move folder node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveFolder(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * General method for performing the given operation (copy|move)\n     *\n     * @param action the action to perform (copy|move)\n     * @param type type of the content (content|folder)\n     * @param contentEntry the contentEntry which has to have the action performed on\n     * @param permission permission which is needed to apply the action\n     */\n    private doFileOperation(action: string, type: string, contentEntry: Node, permission?: string): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        this.contentDialogService\n            .openCopyMoveDialog(action, contentEntry, permission)\n            .subscribe((selections: Node[]) => {\n                const selection = selections[0];\n                this.documentListService[`${action}Node`].call(this.documentListService, contentEntry.id, selection.id)\n                    .subscribe(\n                    observable.next.bind(observable, `OPERATION.SUCCESS.${type.toUpperCase()}.${action.toUpperCase()}`),\n                    observable.error.bind(observable)\n                    );\n            },\n            (error) => {\n                observable.error(error);\n                return observable;\n            });\n        return observable;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private contentNodeDialogService: ContentNodeDialogService,\n                private translation: TranslationService,\n                private documentListService?: DocumentListService,\n                private contentService?: ContentService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler for an action.\n     * @param key Identifier of the action\n     * @returns The handler for the action\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            const lKey = key.toLowerCase();\n            return this.handlers[lKey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler for an action.\n     * @param key Identifier of the action\n     * @param handler Handler for the action\n     * @returns False if the key was an empty/null string, true otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            const lKey = key.toLowerCase();\n            this.handlers[lKey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if actions can be executed for an item.\n     * @param nodeEntry Item to receive an action\n     * @returns True if the action can be executed on this item, false otherwise\n     */\n    canExecuteAction(nodeEntry: NodeEntry): boolean {\n        return this.documentListService && nodeEntry && nodeEntry.entry.isFile === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n        this.handlers['lock'] = this.lockNode.bind(this);\n    }\n\n    private lockNode(node: NodeEntry, target?: any, permission?: string) {\n        return this.contentNodeDialogService.openLockNodeDialog(node.entry);\n    }\n\n    private downloadNode(obj: NodeEntry, target?: any, permission?: string) {\n        this.nodeActionsService.downloadNode(obj);\n    }\n\n    private copyNode(node: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(node: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: NodeEntry, target?: any, permission?: string): Observable<any> {\n        let handlerObservable;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasAllowableOperations(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    const message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    const message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({\n                    type: 'content',\n                    action: 'delete',\n                    permission: permission\n                }));\n                return throwError(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FolderActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private documentListService: DocumentListService,\n                private contentService: ContentService,\n                private translation: TranslationService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler function for an action.\n     * @param key Identifier for the action\n     * @returns The handler function\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            const lKey = key.toLowerCase();\n            return this.handlers[lKey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler function for an action.\n     * @param key Identifier for the action\n     * @param handler The new handler function\n     * @returns True if the key was a valid action identifier, false otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            const lKey = key.toLowerCase();\n            this.handlers[lKey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if an action is available for a particular item.\n     * @param nodeEntry Item to check\n     * @returns True if the action is available, false otherwise\n     */\n    canExecuteAction(nodeEntry: NodeEntry): boolean {\n        return this.documentListService && nodeEntry && nodeEntry.entry.isFolder === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n    }\n\n    private downloadNode(nodeEntry: NodeEntry) {\n        this.nodeActionsService.downloadNode(nodeEntry);\n    }\n\n    private copyNode(nodeEntry: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyFolder(nodeEntry.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(nodeEntry: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveFolder(nodeEntry.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                if (target && typeof target.reload === 'function') {\n                    target.reload();\n                }\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: NodeEntry, target?: any, permission?: string): Observable<any> {\n        let handlerObservable: Observable<any>;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasAllowableOperations(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    if (target && typeof target.reload === 'function') {\n                        target.reload();\n                    }\n\n                    const message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    const message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({type: 'folder', action: 'delete', permission: permission}));\n                return throwError(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component } from '@angular/core';\n\nimport { ContentActionModel } from './../../models/content-action.model';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-actions',\n    template: ''\n})\nexport class ContentActionListComponent {\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    /**\n     * Registers action handler within the parent document list component.\n     * @param action Action model to register.\n     */\n    registerAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            this.documentList.actions.push(action);\n            return true;\n        }\n        return false;\n    }\n\n    unregisterAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            const idx = this.documentList.actions.indexOf(action);\n            if (idx >= 0) {\n                this.documentList.actions.splice(idx, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, OnInit, Output, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\n\nimport { ContentActionHandler } from '../../models/content-action.model';\nimport { DocumentActionsService } from '../../services/document-actions.service';\nimport { FolderActionsService } from '../../services/folder-actions.service';\nimport { ContentActionModel, ContentActionTarget } from './../../models/content-action.model';\nimport { ContentActionListComponent } from './content-action-list.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n    selector: 'content-action',\n    template: '',\n    providers: [\n        DocumentActionsService,\n        FolderActionsService\n    ]\n})\nexport class ContentActionComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** The title of the action as shown in the menu. */\n    @Input()\n    title: string = 'Action';\n\n    /** The name of the icon to display next to the menu command (can be left blank). */\n    @Input()\n    icon: string;\n\n    /** Visibility state (see examples). */\n    @Input()\n    visible: boolean | Function = true;\n\n    /** System actions. Can be \"delete\", \"download\", \"copy\" or \"move\". */\n    @Input()\n    handler: string;\n\n    /** Type of item that the action applies to. Can be \"document\" or \"folder\" */\n    @Input()\n    target: string = ContentActionTarget.All;\n\n    /** The permission type. */\n    @Input()\n    permission: string;\n\n    /** Should this action be disabled in the menu if the user doesn't have permission for it? */\n    @Input()\n    disableWithNoPermission: boolean;\n\n    /** Is the menu item disabled? */\n    @Input()\n    disabled: boolean | Function = false;\n\n    /** Emitted when the user selects the action from the menu. */\n    @Output()\n    execute = new EventEmitter();\n\n    /** Emitted when a permission error occurs */\n    @Output()\n    permissionEvent = new EventEmitter();\n\n    /** Emitted when an error occurs during the action.\n     * Applies to copy and move actions.\n     */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when the action succeeds with the success string message.\n     * Applies to copy, move and delete actions.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    documentActionModel: ContentActionModel;\n    folderActionModel: ContentActionModel;\n\n    private subscriptions: Subscription[] = [];\n\n    constructor(\n        private list: ContentActionListComponent,\n        private documentActions: DocumentActionsService,\n        private folderActions: FolderActionsService) {\n    }\n\n    ngOnInit() {\n        if (this.target === ContentActionTarget.All) {\n            this.folderActionModel = this.generateAction(ContentActionTarget.Folder);\n            this.documentActionModel = this.generateAction(ContentActionTarget.Document);\n        } else {\n            this.documentActionModel = this.generateAction(this.target);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.visible && !changes.visible.firstChange) {\n            if (this.documentActionModel) {\n                this.documentActionModel.visible = changes.visible.currentValue;\n            }\n            if (this.folderActionModel) {\n                this.folderActionModel.visible = changes.visible.currentValue;\n            }\n        }\n\n        if (changes.disabled && !changes.disabled.firstChange) {\n            if (this.documentActionModel) {\n                this.documentActionModel.disabled = changes.disabled.currentValue;\n            }\n            if (this.folderActionModel) {\n                this.folderActionModel.disabled = changes.disabled.currentValue;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n        this.subscriptions = [];\n\n        if (this.documentActionModel) {\n            this.unregister(this.documentActionModel);\n            this.documentActionModel = null;\n        }\n\n        if (this.folderActionModel) {\n            this.unregister(this.folderActionModel);\n            this.folderActionModel = null;\n        }\n    }\n\n    register(model: ContentActionModel): boolean {\n        if (this.list) {\n            return this.list.registerAction(model);\n        }\n        return false;\n    }\n\n    unregister(model: ContentActionModel): boolean {\n        if (this.list) {\n            return this.list.unregisterAction(model);\n        }\n        return false;\n    }\n\n    private generateAction(target: string): ContentActionModel {\n        const model = new ContentActionModel({\n            title: this.title,\n            icon: this.icon,\n            permission: this.permission,\n            disableWithNoPermission: this.disableWithNoPermission,\n            target: target,\n            disabled: this.disabled,\n            visible: this.visible\n        });\n        if (this.handler) {\n            model.handler = this.getSystemHandler(target, this.handler);\n        }\n\n        if (this.execute) {\n            model.execute = (value: any): void => {\n                this.execute.emit({ value });\n            };\n        }\n\n        this.register(model);\n        return model;\n    }\n\n    getSystemHandler(target: string, name: string): ContentActionHandler {\n        if (target) {\n            target = target.toLowerCase();\n\n            if (target === ContentActionTarget.Document) {\n                if (this.documentActions) {\n                    this.subscriptions.push(\n                        this.documentActions.permissionEvent.subscribe((permission) => {\n                            this.permissionEvent.emit(permission);\n                        }),\n                        this.documentActions.error.subscribe((errors) => {\n                            this.error.emit(errors);\n                        }),\n                        this.documentActions.success.subscribe((message) => {\n                            this.success.emit(message);\n                        })\n                    );\n\n                    return this.documentActions.getHandler(name);\n                }\n                return null;\n            }\n\n            if (target === ContentActionTarget.Folder) {\n                if (this.folderActions) {\n                    this.subscriptions.push(\n                        this.folderActions.permissionEvent.subscribe((permission) => {\n                            this.permissionEvent.emit(permission);\n                        }),\n                        this.folderActions.error.subscribe((errors) => {\n                            this.error.emit(errors);\n                        }),\n                        this.folderActions.success.subscribe((message) => {\n                            this.success.emit(message);\n                        })\n                    );\n\n                    return this.folderActions.getHandler(name);\n                }\n                return null;\n            }\n        }\n        return null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    OnInit,\n    Input,\n    ElementRef,\n    OnDestroy\n} from '@angular/core';\nimport { NodeEntry, Node, Site } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\n@Component({\n    selector: 'adf-library-name-column',\n    template: `\n        <span class=\"adf-datatable-cell-value\" title=\"{{ displayTooltip$ | async }}\" (click)=\"onClick()\">\n            {{ displayText$ | async }}\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'adf-datatable-content-cell adf-datatable-link adf-library-name-column'\n    }\n})\nexport class LibraryNameColumnComponent implements OnInit, OnDestroy {\n    @Input()\n    context: any;\n\n    displayTooltip$ = new BehaviorSubject<string>('');\n    displayText$ = new BehaviorSubject<string>('');\n    node: NodeEntry;\n\n    private sub: Subscription;\n\n    constructor(\n        private element: ElementRef,\n        private alfrescoApiService: AlfrescoApiService\n    ) {}\n\n    ngOnInit() {\n        this.updateValue();\n\n        this.sub = this.alfrescoApiService.nodeUpdated.subscribe(\n            (node: Node) => {\n                const row: ShareDataRow = this.context.row;\n                if (row) {\n                    const { entry } = row.node;\n\n                    if (entry === node) {\n                        row.node = { entry };\n                        this.updateValue();\n                    }\n                }\n            }\n        );\n    }\n\n    protected updateValue() {\n        this.node = this.context.row.node;\n        const rows: Array<ShareDataRow> = this.context.data.rows || [];\n        if (this.node && this.node.entry) {\n            this.displayText$.next(\n                this.makeLibraryTitle(<any> this.node.entry, rows)\n            );\n            this.displayTooltip$.next(this.makeLibraryTooltip(this.node.entry));\n        }\n    }\n\n    onClick() {\n        this.element.nativeElement.dispatchEvent(\n            new CustomEvent('name-click', {\n                bubbles: true,\n                detail: {\n                    node: this.node\n                }\n            })\n        );\n    }\n\n    makeLibraryTooltip(library: any): string {\n        const { description, title } = library;\n\n        return description || title || '';\n    }\n\n    makeLibraryTitle(library: Site, rows: Array<ShareDataRow>): string {\n        const entries = rows.map((row: ShareDataRow) => row.node.entry);\n        const { title, id } = library;\n\n        let isDuplicate = false;\n\n        if (entries) {\n            isDuplicate = entries.some((entry: any) => {\n                return entry.id !== id && entry.title === title;\n            });\n        }\n\n        return isDuplicate ? `${title} (${id})` : `${title}`;\n    }\n\n    ngOnDestroy() {\n        if (this.sub) {\n            this.sub.unsubscribe();\n            this.sub = null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    OnInit,\n    Input,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    OnDestroy\n} from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Node, SiteEntry, Site } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\n\n@Component({\n    selector: 'adf-library-role-column',\n    template: `\n        <span class=\"adf-datatable-cell-value\" title=\"{{ (displayText$ | async) | translate }}\">\n            {{ (displayText$ | async) | translate }}\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-library-role-column adf-datatable-content-cell' }\n})\nexport class LibraryRoleColumnComponent implements OnInit, OnDestroy {\n    @Input()\n    context: any;\n\n    displayText$ = new BehaviorSubject<string>('');\n\n    private sub: Subscription;\n\n    constructor(private api: AlfrescoApiService) {}\n\n    ngOnInit() {\n        this.updateValue();\n\n        this.sub = this.api.nodeUpdated.subscribe((node: Node) => {\n            const row: ShareDataRow = this.context.row;\n            if (row) {\n                const { entry } = row.node;\n\n                if (entry === node) {\n                    row.node = { entry };\n                    this.updateValue();\n                }\n            }\n        });\n    }\n\n    protected updateValue() {\n        const node: SiteEntry = this.context.row.node;\n        if (node && node.entry) {\n            const role: string = node.entry.role;\n            switch (role) {\n                case Site.RoleEnum.SiteManager:\n                    this.displayText$.next('LIBRARY.ROLE.MANAGER');\n                    break;\n                case Site.RoleEnum.SiteCollaborator:\n                    this.displayText$.next('LIBRARY.ROLE.COLLABORATOR');\n                    break;\n                case Site.RoleEnum.SiteContributor:\n                    this.displayText$.next('LIBRARY.ROLE.CONTRIBUTOR');\n                    break;\n                case Site.RoleEnum.SiteConsumer:\n                    this.displayText$.next('LIBRARY.ROLE.CONSUMER');\n                    break;\n                default:\n                    this.displayText$.next('');\n                    break;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.sub) {\n            this.sub.unsubscribe();\n            this.sub = null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport { Node, Site, SiteEntry } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\n\n@Component({\n    selector: 'adf-library-status-column',\n    template: `\n        <span class=\"adf-datatable-cell-value\" title=\"{{ (displayText$ | async) | translate }}\">\n            {{ (displayText$ | async) | translate }}\n        </span>\n    `,\n    host: { class: 'adf-library-status-column adf-datatable-content-cell' }\n})\nexport class LibraryStatusColumnComponent implements OnInit, OnDestroy {\n    @Input()\n    context: any;\n\n    displayText$ = new BehaviorSubject<string>('');\n\n    private sub: Subscription;\n\n    constructor(private api: AlfrescoApiService) {}\n\n    ngOnInit() {\n        this.updateValue();\n\n        this.sub = this.api.nodeUpdated.subscribe((node: Node) => {\n            const row: ShareDataRow = this.context.row;\n            if (row) {\n                const { entry } = row.node;\n\n                if (entry === node) {\n                    row.node = { entry };\n                    this.updateValue();\n                }\n            }\n        });\n    }\n\n    protected updateValue() {\n        const node: SiteEntry = this.context.row.node;\n        if (node && node.entry) {\n            const visibility: string = node.entry.visibility;\n\n            switch (visibility) {\n                case Site.VisibilityEnum.PUBLIC:\n                    this.displayText$.next('LIBRARY.VISIBILITY.PUBLIC');\n                    break;\n                case Site.VisibilityEnum.PRIVATE:\n                    this.displayText$.next('LIBRARY.VISIBILITY.PRIVATE');\n                    break;\n                case Site.VisibilityEnum.MODERATED:\n                    this.displayText$.next('LIBRARY.VISIBILITY.MODERATED');\n                    break;\n                default:\n                    this.displayText$.next('UNKNOWN');\n                    break;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.sub) {\n            this.sub.unsubscribe();\n            this.sub = null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    Input,\n    OnInit,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    ElementRef,\n    OnDestroy\n} from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\n\n@Component({\n    selector: 'adf-name-column',\n    template: `\n        <span class=\"adf-datatable-cell-value\" title=\"{{ node | adfNodeNameTooltip }}\" (click)=\"onClick()\">\n            {{ displayText$ | async }}\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-datatable-content-cell adf-datatable-link adf-name-column' }\n})\nexport class NameColumnComponent implements OnInit, OnDestroy {\n    @Input()\n    context: any;\n\n    displayText$ = new BehaviorSubject<string>('');\n    node: NodeEntry;\n\n    private sub: Subscription;\n\n    constructor(private element: ElementRef, private alfrescoApiService: AlfrescoApiService) {}\n\n    ngOnInit() {\n        this.updateValue();\n\n        this.sub = this.alfrescoApiService.nodeUpdated.subscribe((node: Node) => {\n            const row: ShareDataRow = this.context.row;\n            if (row) {\n                const { entry } = row.node;\n\n                if (entry === node) {\n                    row.node = { entry };\n                    this.updateValue();\n                }\n            }\n        });\n    }\n\n    protected updateValue() {\n        this.node = this.context.row.node;\n\n        if (this.node && this.node.entry) {\n            this.displayText$.next(this.node.entry.name || this.node.entry.id);\n        }\n    }\n\n    onClick() {\n        this.element.nativeElement.dispatchEvent(\n            new CustomEvent('name-click', {\n                bubbles: true,\n                detail: {\n                    node: this.node\n                }\n            })\n        );\n    }\n\n    ngOnDestroy() {\n        if (this.sub) {\n            this.sub.unsubscribe();\n            this.sub = null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  OnInit,\n  Input\n} from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\n\n@Component({\n  selector: 'adf-trashcan-name-column',\n  template: `\n    <ng-container *ngIf=\"!isLibrary\">\n      <span class=\"adf-datatable-cell-value\" title=\"{{ node | adfNodeNameTooltip }}\">{{ displayText }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"isLibrary\">\n      <span class=\"adf-datatable-cell-value\" title=\"{{ displayTooltip }}\">{{ displayText }}</span>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: { class: 'adf-datatable-content-cell adf-trashcan-name-column' }\n})\nexport class TrashcanNameColumnComponent implements OnInit {\n  @Input()\n  context: any;\n\n  isLibrary = false;\n  displayText: string;\n  displayTooltip: string;\n  node: NodeEntry;\n\n  ngOnInit() {\n    this.node = this.context.row.node;\n    const rows: Array<ShareDataRow> = this.context.data.rows || [];\n\n    if (this.node && this.node.entry) {\n      this.isLibrary = this.node.entry.nodeType === 'st:site';\n\n      if (this.isLibrary) {\n        const { properties } = this.node.entry;\n\n        this.displayText = this.makeLibraryTitle(this.node.entry, rows);\n        this.displayTooltip =\n          properties['cm:description'] || properties['cm:title'];\n      } else {\n        this.displayText = this.node.entry.name || this.node.entry.id;\n      }\n    }\n  }\n\n  makeLibraryTitle(library: any, rows: Array<ShareDataRow>): string {\n    const entries = rows.map((r: ShareDataRow) => r.node.entry);\n    const { id } = library;\n    const title = library.properties['cm:title'];\n\n    let isDuplicate = false;\n\n    if (entries) {\n      isDuplicate = entries.some((entry: any) => {\n        return entry.id !== id && entry.properties['cm:title'] === title;\n      });\n    }\n\n    return isDuplicate\n      ? `${library.properties['cm:title']} (${library.name})`\n      : `${library.properties['cm:title']}`;\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// note: contains only limited subset of available fields\n\nimport { NodeEntry, Node } from '@alfresco/js-api';\n\nexport class NodePaging {\n    list: NodePagingList;\n}\n\nexport class NodePagingList {\n    pagination: Pagination;\n    entries: NodeMinimalEntry[];\n}\n\nexport class NodeMinimalEntry implements NodeEntry {\n    entry: NodeMinimal;\n}\n\nexport class Pagination {\n    count: number;\n    hasMoreItems: boolean;\n    totalItems: number;\n    skipCount: number;\n    maxItems: number;\n}\n\nexport class NodeMinimal implements Node {\n    id: string;\n    parentId: string;\n    name: string;\n    nodeType: string;\n    isFolder: boolean;\n    isFile: boolean;\n    modifiedAt: Date;\n    modifiedByUser: UserInfo;\n    createdAt: Date;\n    createdByUser: UserInfo;\n    content: ContentInfo;\n    path: PathInfoEntity;\n    properties: NodeProperties = {};\n    aspectNames: string[];\n}\n\nexport class UserInfo {\n    displayName: string;\n    id: string;\n}\n\nexport class ContentInfo {\n    mimeType: string;\n    mimeTypeName: string;\n    sizeInBytes: number;\n    encoding: string;\n}\n\nexport class PathInfoEntity {\n    elements: PathElementEntity[];\n    isComplete: boolean;\n    name: string;\n}\n\nexport class PathElementEntity {\n    id: string;\n    name: string;\n}\n\nexport interface NodeProperties {\n    [key: string]: any;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AllowableOperationsEnum } from '@alfresco/adf-core';\n\nexport class PermissionStyleModel {\n    css: string;\n    permission: AllowableOperationsEnum;\n    isFolder: boolean = true;\n    isFile: boolean = true;\n\n    constructor(css: string, permission: AllowableOperationsEnum, isFile: boolean = true, isFolder: boolean = true) {\n        this.css = css;\n        this.permission = permission;\n        this.isFile = isFile;\n        this.isFolder = isFolder;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    FileModel, FileUploadCompleteEvent, FileUploadDeleteEvent,\n    FileUploadErrorEvent, FileUploadStatus, UploadService, UserPreferencesService\n} from '@alfresco/adf-core';\nimport { ChangeDetectorRef, Component, Input, Output, EventEmitter, OnDestroy, OnInit, ViewChild, HostBinding } from '@angular/core';\nimport { Subscription, merge, Subject } from 'rxjs';\nimport { FileUploadingListComponent } from './file-uploading-list.component';\nimport { Direction } from '@angular/cdk/bidi';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-file-uploading-dialog',\n    templateUrl: './file-uploading-dialog.component.html',\n    styleUrls: ['./file-uploading-dialog.component.scss']\n})\nexport class FileUploadingDialogComponent implements OnInit, OnDestroy {\n    /** Dialog direction. Can be 'ltr' or 'rtl. */\n    private direction: Direction = 'ltr';\n    private onDestroy$: Subject<boolean> = new Subject<boolean>();\n\n    @ViewChild('uploadList')\n    uploadList: FileUploadingListComponent;\n\n    /** Dialog position. Can be 'left' or 'right'. */\n    @Input()\n    position: string = 'right';\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    @HostBinding('attr.adfUploadDialogRight')\n    public get isPositionRight(): boolean {\n        return (this.direction === 'ltr' && this.position === 'right')\n            || (this.direction === 'rtl' && this.position === 'left')\n            || null;\n    }\n    @HostBinding('attr.adfUploadDialogLeft')\n    public get isPositionLeft(): boolean {\n        return (this.direction === 'ltr' && this.position === 'left')\n            || (this.direction === 'rtl' && this.position === 'right')\n            || null;\n    }\n\n    filesUploadingList: FileModel[] = [];\n    isDialogActive: boolean = false;\n    totalCompleted: number = 0;\n    totalErrors: number = 0;\n    isDialogMinimized: boolean = false;\n    isConfirmation: boolean = false;\n\n    private listSubscription: Subscription;\n    private counterSubscription: Subscription;\n    private fileUploadSubscription: Subscription;\n    private errorSubscription: Subscription;\n\n    constructor(\n        private uploadService: UploadService,\n        private changeDetector: ChangeDetectorRef,\n        private userPreferencesService: UserPreferencesService\n        ) {\n    }\n\n    ngOnInit() {\n        this.listSubscription = this.uploadService\n            .queueChanged.subscribe((fileList: FileModel[]) => {\n                this.filesUploadingList = fileList;\n\n                if (this.filesUploadingList.length) {\n                    this.isDialogActive = true;\n                }\n            });\n\n        this.counterSubscription = merge(\n                this.uploadService.fileUploadComplete,\n                this.uploadService.fileUploadDeleted\n            )\n            .subscribe((event: (FileUploadDeleteEvent | FileUploadCompleteEvent)) => {\n                this.totalCompleted = event.totalComplete;\n                this.changeDetector.detectChanges();\n            });\n\n        this.errorSubscription = this.uploadService.fileUploadError\n            .subscribe((event: FileUploadErrorEvent) => {\n                this.totalErrors = event.totalError;\n                this.changeDetector.detectChanges();\n            });\n\n        this.fileUploadSubscription = this.uploadService\n            .fileUpload.subscribe(() => {\n                this.changeDetector.detectChanges();\n            });\n\n        this.uploadService.fileDeleted.subscribe((objId) => {\n            if (this.filesUploadingList) {\n                const file = this.filesUploadingList.find((item) => {\n                    return item.data.entry.id === objId;\n                });\n                if (file) {\n                    file.status = FileUploadStatus.Cancelled;\n                    this.changeDetector.detectChanges();\n                }\n            }\n        });\n\n        this.userPreferencesService.select('textOrientation')\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((textOrientation: Direction) => {\n                this.direction = textOrientation;\n            });\n    }\n\n    /**\n     * Toggle confirmation message.\n     */\n    toggleConfirmation() {\n        this.isConfirmation = !this.isConfirmation;\n\n        if (this.isDialogMinimized) {\n            this.isDialogMinimized = false;\n        }\n    }\n\n    /**\n     * Cancel uploads and hide confirmation\n     */\n    cancelAllUploads() {\n        this.toggleConfirmation();\n\n        this.uploadList.cancelAllFiles();\n    }\n\n    /**\n     * Toggle dialog minimized state.\n     */\n    toggleMinimized(): void {\n        this.isDialogMinimized = !this.isDialogMinimized;\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Dismiss dialog\n     */\n    close(): void {\n        this.isConfirmation = false;\n        this.totalCompleted = 0;\n        this.totalErrors = 0;\n        this.filesUploadingList = [];\n        this.isDialogActive = false;\n        this.isDialogMinimized = false;\n        this.uploadService.clearQueue();\n        this.changeDetector.detectChanges();\n    }\n\n    ngOnDestroy() {\n        this.uploadService.clearQueue();\n        this.listSubscription.unsubscribe();\n        this.counterSubscription.unsubscribe();\n        this.fileUploadSubscription.unsubscribe();\n        this.errorSubscription.unsubscribe();\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileUploadStatus } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'adf-file-uploading-list-row',\n    templateUrl: './file-uploading-list-row.component.html',\n    styleUrls: ['./file-uploading-list-row.component.scss']\n})\nexport class FileUploadingListRowComponent {\n    @Input()\n    file: FileModel;\n\n    @Output()\n    cancel: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    @Output()\n    remove: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    FileUploadStatus = FileUploadStatus;\n\n    onCancel(file: FileModel): void {\n        this.cancel.emit(file);\n    }\n\n    onRemove(file: FileModel): void {\n        this.remove.emit(file);\n    }\n\n    showCancelledStatus(): boolean {\n        return this.file.status === FileUploadStatus.Cancelled ||\n            this.file.status === FileUploadStatus.Aborted ||\n            this.file.status === FileUploadStatus.Deleted;\n    }\n\n    get versionNumber(): string {\n        return this.file.data.entry.properties['cm:versionLabel'];\n    }\n\n    get mimeType(): string {\n        if (this.file && this.file.file && this.file.file.type) {\n            return this.file.file.type;\n        }\n\n        return 'default';\n    }\n\n    isUploadVersion(): boolean {\n        return (\n            !!this.file.data &&\n            this.file.options &&\n            this.file.options.newVersion &&\n            this.file.data.entry.properties &&\n            this.file.data.entry.properties['cm:versionLabel']\n        );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    FileModel,\n    FileUploadStatus,\n    NodesApiService,\n    TranslationService,\n    UploadService\n} from '@alfresco/adf-core';\nimport {\n    Component,\n    ContentChild,\n    Input,\n    Output,\n    TemplateRef,\n    EventEmitter\n} from '@angular/core';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-file-uploading-list',\n    templateUrl: './file-uploading-list.component.html',\n    styleUrls: ['./file-uploading-list.component.scss']\n})\nexport class FileUploadingListComponent {\n    FileUploadStatus = FileUploadStatus;\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    @Input()\n    files: FileModel[] = [];\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    constructor(\n        private uploadService: UploadService,\n        private nodesApi: NodesApiService,\n        private translateService: TranslationService\n    ) {}\n\n    /**\n     * Cancel file upload\n     *\n     * @param file File model to cancel upload for.\n     *\n     * @memberOf FileUploadingListComponent\n     */\n    cancelFile(file: FileModel): void {\n        this.uploadService.cancelUpload(file);\n    }\n\n    /**\n     * Remove uploaded file\n     *\n     * @param file File model to remove upload for.\n     *\n     * @memberOf FileUploadingListComponent\n     */\n    removeFile(file: FileModel): void {\n        this.deleteNode(file).subscribe(() => {\n            if (file.status === FileUploadStatus.Error) {\n                this.notifyError(file);\n            }\n\n            this.cancelNodeVersionInstances(file);\n            this.uploadService.cancelUpload(file);\n        });\n    }\n\n    /**\n     * Call the appropriate method for each file, depending on state\n     */\n    cancelAllFiles(): void {\n        this.getUploadingFiles().forEach((file) =>\n            this.uploadService.cancelUpload(file)\n        );\n\n        const deletedFiles = this.files\n            .filter((file) => file.status === FileUploadStatus.Complete)\n            .map((file) => this.deleteNode(file));\n\n        forkJoin(...deletedFiles).subscribe((files: FileModel[]) => {\n            const errors = files.filter(\n                (file) => file.status === FileUploadStatus.Error\n            );\n\n            if (errors.length) {\n                this.notifyError(...errors);\n            }\n\n            this.uploadService.cancelUpload(...files);\n        });\n    }\n\n    /**\n     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending\n     */\n    isUploadCompleted(): boolean {\n        return (\n            !this.isUploadCancelled() &&\n            Boolean(this.files.length) &&\n            !this.files.some(\n                ({ status }) =>\n                    status === FileUploadStatus.Starting ||\n                    status === FileUploadStatus.Progress ||\n                    status === FileUploadStatus.Pending\n            )\n        );\n    }\n\n    /**\n     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states\n     */\n    isUploadCancelled(): boolean {\n        return (\n            !!this.files.length &&\n            this.files.every(\n                ({ status }) =>\n                    status === FileUploadStatus.Aborted ||\n                    status === FileUploadStatus.Cancelled ||\n                    status === FileUploadStatus.Deleted\n            )\n        );\n    }\n\n    private deleteNode(file: FileModel): Observable<FileModel> {\n        const { id } = file.data.entry;\n\n        return this.nodesApi.deleteNode(id, { permanent: true }).pipe(\n            map(() => {\n                file.status = FileUploadStatus.Deleted;\n                return file;\n            }),\n            catchError(() => {\n                file.status = FileUploadStatus.Error;\n                return of(file);\n            })\n        );\n    }\n\n    private cancelNodeVersionInstances(file) {\n        this.files\n            .filter(\n                (item) =>\n                    item.data.entry.id === file.data.entry.id &&\n                    item.options.newVersion\n            )\n            .map((item) => {\n                item.status = FileUploadStatus.Deleted;\n            });\n    }\n\n    private notifyError(...files: FileModel[]) {\n        let messageError: string = null;\n\n        if (files.length === 1) {\n            messageError = this.translateService.instant(\n                'FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR',\n                { fileName: files[0].name }\n            );\n        } else {\n            messageError = this.translateService.instant(\n                'FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR',\n                { total: files.length }\n            );\n        }\n\n        this.error.emit(messageError);\n    }\n\n    private getUploadingFiles() {\n        return this.files.filter((item) => {\n            if (\n                item.status === FileUploadStatus.Pending ||\n                item.status === FileUploadStatus.Progress ||\n                item.status === FileUploadStatus.Starting\n            ) {\n                return item;\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, UploadService } from '@alfresco/adf-core';\nimport { EventEmitter } from '@angular/core';\n\nexport class UploadFilesEvent {\n    private isDefaultPrevented: boolean = false;\n\n    get defaultPrevented() {\n        return this.isDefaultPrevented;\n    }\n\n    preventDefault() {\n        this.isDefaultPrevented = true;\n    }\n\n    constructor(\n        public files: Array<FileModel>,\n        private uploadService: UploadService,\n        private callback: EventEmitter<any>\n    ) {}\n\n    pauseUpload() {\n        this.preventDefault();\n    }\n\n    resumeUpload() {\n        if (this.files && this.files.length > 0) {\n            this.uploadService.addToQueue(...this.files);\n            this.uploadService.uploadFilesInTheQueue(this.callback);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileInfo } from '@alfresco/adf-core';\nimport { EventEmitter, Input, Output, OnInit, OnDestroy, NgZone } from '@angular/core';\nimport { UploadService, TranslationService } from '@alfresco/adf-core';\nimport { Subscription } from 'rxjs';\nimport { UploadFilesEvent } from '../upload-files.event';\n\nexport abstract class UploadBase implements OnInit, OnDestroy {\n\n    /** Sets a limit on the maximum size (in bytes) of a file to be uploaded.\n     * Has no effect if undefined.\n     */\n    @Input()\n    maxFilesSize: number;\n\n    /** The ID of the root. Use the nodeId for\n     * Content Services or the taskId/processId for Process Services.\n     */\n    @Input()\n    rootFolderId: string = '-root-';\n\n    /** Toggles component disabled state (if there is no node permission checking). */\n    @Input()\n    disabled: boolean = false;\n\n    /** Filter for accepted file types. */\n    @Input()\n    acceptedFilesType: string = '*';\n\n    /** Toggles versioning. */\n    @Input()\n    versioning: boolean = false;\n\n    /** majorVersion boolean field to true to indicate a major version should be created. */\n    @Input()\n    majorVersion: boolean = false;\n\n    /** When you overwrite existing content, you can use the comment field to add a version comment that appears in the version history */\n    @Input()\n    comment: string;\n\n    /** Custom node type for uploaded file */\n    @Input()\n    nodeType: string = 'cm:content';\n\n    /** Emitted when the file is uploaded successfully. */\n    @Output()\n    success = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when the upload begins. */\n    @Output()\n    beginUpload = new EventEmitter<UploadFilesEvent>();\n\n    protected subscriptions: Subscription[] = [];\n\n    constructor(protected uploadService: UploadService,\n                protected translationService: TranslationService,\n                protected ngZone: NgZone) {\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(\n            this.uploadService.fileUploadError.subscribe((error) => {\n                this.error.emit(error);\n            })\n        );\n\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    /**\n     * Upload a list of file in the specified path\n     * @param files\n     * @param path\n     */\n    uploadFiles(files: File[]): void {\n        const filteredFiles: FileModel[] = files\n            .map<FileModel>((file: File) => {\n                return this.createFileModel(file, this.rootFolderId, ((<any> file).webkitRelativePath || '').replace(/\\/[^\\/]*$/, ''));\n            });\n\n        this.uploadQueue(filteredFiles);\n    }\n\n    uploadFilesInfo(files: FileInfo[]): void {\n        const filteredFiles: FileModel[] = files\n            .map<FileModel>((fileInfo: FileInfo) => {\n                return this.createFileModel(fileInfo.file, this.rootFolderId, fileInfo.relativeFolder);\n            });\n\n        this.uploadQueue(filteredFiles);\n    }\n\n    private uploadQueue(files: FileModel[]) {\n        const filteredFiles = files\n            .filter(this.isFileAcceptable.bind(this))\n            .filter(this.isFileSizeAcceptable.bind(this));\n\n        this.ngZone.run(() => {\n            const event = new UploadFilesEvent(\n                [...filteredFiles],\n                this.uploadService,\n                this.success\n            );\n            this.beginUpload.emit(event);\n\n            if (!event.defaultPrevented) {\n                if (filteredFiles.length > 0) {\n                    this.uploadService.addToQueue(...filteredFiles);\n                    this.uploadService.uploadFilesInTheQueue(this.success);\n                }\n            }\n        });\n    }\n\n    /**\n     * Checks if the given file is allowed by the extension filters\n     *\n     * @param file FileModel\n     */\n    protected isFileAcceptable(file: FileModel): boolean {\n        if (this.acceptedFilesType === '*') {\n            return true;\n        }\n\n        const allowedExtensions = this.acceptedFilesType\n            .split(',')\n            .map((ext) => ext.trim().replace(/^\\./, ''));\n\n        if (allowedExtensions.indexOf(file.extension) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Creates FileModel from File\n     *\n     * @param file\n     */\n    protected createFileModel(file: File, parentId: string, path: string, id?: string): FileModel {\n        return new FileModel(file, {\n            comment: this.comment,\n            majorVersion: this.majorVersion,\n            newVersion: this.versioning,\n            parentId: parentId,\n            path: path,\n            nodeType: this.nodeType\n        }, id);\n    }\n\n    protected isFileSizeAllowed(file: FileModel) {\n        let isFileSizeAllowed = true;\n        if (this.isMaxFileSizeDefined()) {\n            isFileSizeAllowed = this.isFileSizeCorrect(file);\n        }\n\n        return isFileSizeAllowed;\n    }\n\n    protected isMaxFileSizeDefined() {\n        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;\n    }\n\n    protected isFileSizeCorrect(file: FileModel) {\n        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;\n    }\n\n    /**\n     * Checks if the given file is an acceptable size\n     *\n     * @param file FileModel\n     */\n    private isFileSizeAcceptable(file: FileModel): boolean {\n        let acceptableSize = true;\n\n        if (!this.isFileSizeAllowed(file)) {\n            acceptableSize = false;\n\n            const message = this.translationService.instant(\n                'FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE',\n                { fileName: file.name }\n            );\n\n            this.error.emit(message);\n        }\n\n        return acceptableSize;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ContentService, EXTENDIBLE_COMPONENT, FileUtils,\n    LogService, NodeAllowableOperationSubject, TranslationService, UploadService, AllowableOperationsEnum\n} from '@alfresco/adf-core';\nimport {\n    Component, EventEmitter, forwardRef, Input,\n    OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation, NgZone\n} from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { PermissionModel } from '../../document-list/models/permissions.model';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-button',\n    templateUrl: './upload-button.component.html',\n    styleUrls: ['./upload-button.component.scss'],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadButtonComponent extends UploadBase implements OnInit, OnChanges, NodeAllowableOperationSubject {\n\n    /** Allows/disallows upload folders (only for Chrome). */\n    @Input()\n    uploadFolders: boolean = false;\n\n    /** Allows/disallows multiple files */\n    @Input()\n    multipleFiles: boolean = false;\n\n    /** Defines the text of the upload button. */\n    @Input()\n    staticTitle: string;\n\n    /** Custom tooltip text. */\n    @Input()\n    tooltip: string = null;\n\n    /** Emitted when create permission is missing. */\n    @Output()\n    permissionEvent: EventEmitter<PermissionModel> = new EventEmitter<PermissionModel>();\n\n    private hasAllowableOperations: boolean = false;\n\n    protected permissionValue: Subject<boolean> = new Subject<boolean>();\n\n    constructor(protected uploadService: UploadService,\n                private contentService: ContentService,\n                protected translationService: TranslationService,\n                protected logService: LogService,\n                protected ngZone: NgZone) {\n        super(uploadService, translationService, ngZone);\n    }\n\n    ngOnInit() {\n        this.permissionValue.subscribe((permission: boolean) => {\n            this.hasAllowableOperations = permission;\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const rootFolderId = changes['rootFolderId'];\n        if (rootFolderId && rootFolderId.currentValue) {\n            this.checkPermission();\n        }\n    }\n\n    isButtonDisabled(): boolean {\n        return this.disabled ? true : undefined;\n    }\n\n    onFilesAdded($event: any): void {\n        const files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n\n        if (this.hasAllowableOperations) {\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    onDirectoryAdded($event: any): void {\n        if (this.hasAllowableOperations) {\n            const files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    checkPermission() {\n        if (this.rootFolderId) {\n            const opts: any = {\n                includeSource: true,\n                include: ['allowableOperations']\n            };\n\n            this.contentService.getNode(this.rootFolderId, opts).subscribe(\n                (res) => this.permissionValue.next(this.nodeHasPermission(res.entry, AllowableOperationsEnum.CREATE)),\n                (error) => this.error.emit(error)\n            );\n        }\n    }\n\n    nodeHasPermission(node: Node, permission: AllowableOperationsEnum | string): boolean {\n        return this.contentService.hasAllowableOperations(node, permission);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AllowableOperationsEnum  } from '@alfresco/adf-core';\nimport { Component, forwardRef, Input, OnChanges, ViewEncapsulation, OnInit } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { UploadButtonComponent } from './upload-button.component';\nimport { FileModel, EXTENDIBLE_COMPONENT } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-upload-version-button',\n    templateUrl: './upload-button.component.html',\n    styleUrls: ['./upload-button.component.scss'],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadVersionButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadVersionButtonComponent extends UploadButtonComponent implements OnChanges, OnInit {\n\n    /** (**Required**) The node to be versioned. */\n    @Input()\n    node: Node;\n\n    protected createFileModel(file: File): FileModel {\n        const fileModel = super.createFileModel(file, this.rootFolderId, ((<any> file).webkitRelativePath || '').replace(/\\/[^\\/]*$/, ''), this.node.id);\n\n        if (!this.isFileAcceptable(fileModel)) {\n            const message = this.translationService.instant('FILE_UPLOAD.VERSION.MESSAGES.INCOMPATIBLE_VERSION');\n            this.error.emit(message);\n        }\n\n        return fileModel;\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.checkPermission();\n    }\n\n    checkPermission() {\n        this.permissionValue.next(this.nodeHasPermission(this.node, AllowableOperationsEnum.UPDATE));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    EXTENDIBLE_COMPONENT, FileInfo, FileModel, FileUtils, NodeAllowableOperationSubject,\n    NotificationService, TranslationService, UploadService, ContentService, AllowableOperationsEnum\n} from '@alfresco/adf-core';\nimport { Component, forwardRef, ViewEncapsulation, NgZone } from '@angular/core';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-drag-area',\n    templateUrl: './upload-drag-area.component.html',\n    styleUrls: ['./upload-drag-area.component.scss'],\n    host: { 'class': 'adf-upload-drag-area' },\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadDragAreaComponent extends UploadBase implements NodeAllowableOperationSubject {\n\n    constructor(protected uploadService: UploadService,\n                protected translationService: TranslationService,\n                private notificationService: NotificationService,\n                private contentService: ContentService,\n                protected ngZone: NgZone) {\n        super(uploadService, translationService, ngZone);\n    }\n\n    /**\n     * Method called when files are dropped in the drag area.\n     *\n     * @param files - files dropped in the drag area.\n     */\n    onFilesDropped(files: File[]): void {\n        if (!this.disabled && files.length) {\n            this.uploadFiles(files);\n        }\n    }\n\n    /**\n     * Called when a folder are dropped in the drag area\n     *\n     * @param folder - name of the dropped folder\n     */\n    onFolderEntityDropped(folder: any): void {\n        if (!this.disabled && folder.isDirectory) {\n            FileUtils.flatten(folder).then((filesInfo) => {\n                this.uploadFilesInfo(filesInfo);\n            });\n        }\n    }\n\n    /**\n     * Show undo notification bar.\n     *\n     * @param latestFilesAdded - files in the upload queue enriched with status flag and xhr object.\n     */\n    showUndoNotificationBar(latestFilesAdded: FileModel[]) {\n        let messageTranslate: any, actionTranslate: any;\n        messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');\n        actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');\n\n        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {\n            this.uploadService.cancelUpload(...latestFilesAdded);\n        });\n    }\n\n    /** Returns true or false considering the component options and node permissions */\n    isDroppable(): boolean {\n        return !this.disabled;\n    }\n\n    /**\n     * Handles 'upload-files' events raised by child components.\n     *\n     * @param event DOM event\n     */\n    onUploadFiles(event: CustomEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        const isAllowed: boolean = this.contentService.hasAllowableOperations(event.detail.data.obj.entry, AllowableOperationsEnum.CREATE);\n        if (isAllowed) {\n            const fileInfo: FileInfo[] = event.detail.files;\n            if (this.isTargetNodeFolder(event)) {\n                const destinationFolderName = event.detail.data.obj.entry.name;\n                fileInfo.map((file) => file.relativeFolder = destinationFolderName ? destinationFolderName.concat(file.relativeFolder) : file.relativeFolder);\n            }\n            if (fileInfo && fileInfo.length > 0) {\n                this.uploadFilesInfo(fileInfo);\n            }\n        }\n    }\n\n    private isTargetNodeFolder(event: CustomEvent): boolean {\n        return event.detail.data.obj && event.detail.data.obj.entry.isFolder;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { TranslationService } from '@alfresco/adf-core';\n\n@Pipe({\n    name: 'adfFileUploadError',\n    pure: true\n})\nexport class FileUploadErrorPipe implements PipeTransform {\n\n    constructor(private translation: TranslationService) {\n    }\n\n    transform(errorCode: number): string {\n        return this.translation.instant(`FILE_UPLOAD.ERRORS.${errorCode || 'GENERIC'}`);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { FileUtils } from '@alfresco/adf-core';\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({\n    selector: '[adf-file-draggable]'\n})\nexport class FileDraggableDirective implements OnInit, OnDestroy {\n\n    files: File [];\n\n    /** Enables/disables drag-and-drop functionality. */\n    @Input('adf-file-draggable')\n    enabled: boolean = true;\n\n    /** Emitted when one or more files are dragged and dropped onto the draggable element. */\n    @Output()\n    filesDropped: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Emitted when a directory is dragged and dropped onto the draggable element. */\n    @Output()\n    folderEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    private cssClassName: string = 'adf-file-draggable__input-focus';\n    private element: HTMLElement;\n\n    constructor(el: ElementRef, private ngZone: NgZone) {\n        this.element = el.nativeElement;\n    }\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.element.addEventListener('dragenter', this.onDragEnter.bind(this));\n            this.element.addEventListener('dragover', this.onDragOver.bind(this));\n            this.element.addEventListener('dragleave', this.onDragLeave.bind(this));\n            this.element.addEventListener('drop', this.onDropFiles.bind(this));\n        });\n    }\n\n    ngOnDestroy() {\n        this.element.removeEventListener('dragenter', this.onDragEnter);\n        this.element.removeEventListener('dragover', this.onDragOver);\n        this.element.removeEventListener('dragleave', this.onDragLeave);\n        this.element.removeEventListener('drop', this.onDropFiles);\n    }\n\n    /**\n     * Method called when files is dropped in the drag and drop area.\n     * @param event DOM event.\n     */\n    onDropFiles(event: any): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n\n            // Chrome, Edge, Firefox, Opera (Files + Folders)\n            const items = event.dataTransfer.items;\n            if (items) {\n                const files: File[] = [];\n\n                for (let i = 0; i < items.length; i++) {\n                    if (items[i].webkitGetAsEntry) {\n                        const item = items[i].webkitGetAsEntry();\n\n                        if (item) {\n                            if (item.isFile) {\n                                const file = items[i].getAsFile();\n\n                                if (file) {\n                                    files.push(file);\n                                }\n                            } else if (item.isDirectory) {\n                                this.folderEntityDropped.emit(item);\n                            }\n                        }\n                    }\n                }\n                if (files.length > 0) {\n                    this.filesDropped.emit(files);\n                }\n            } else {\n                // IE, Safari, Chrome, Edge, Firefox, Opera (Files only)\n                const files = FileUtils.toFileArray(event.dataTransfer.files);\n                this.filesDropped.emit(files);\n            }\n\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag in.\n     *\n     * @param event - DOM event.\n     */\n    onDragEnter(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag out.\n     *\n     * @param event - DOM event.\n     */\n    onDragLeave(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file is over the drag area.\n     *\n     * @param event\n     */\n    onDragOver(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Prevent default and stop propagation of the DOM event.\n     *\n     * @param $event - DOM event.\n     */\n    preventDefault(event: Event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FileUploadingDialogComponent } from './components/file-uploading-dialog.component';\nimport { FileUploadingListRowComponent } from './components/file-uploading-list-row.component';\nimport { FileUploadingListComponent } from './components/file-uploading-list.component';\nimport { UploadButtonComponent } from './components/upload-button.component';\nimport { UploadVersionButtonComponent } from './components/upload-version-button.component';\nimport { UploadDragAreaComponent } from './components/upload-drag-area.component';\nimport { FileUploadErrorPipe } from './pipes/file-upload-error.pipe';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FileDraggableDirective } from './directives/file-draggable.directive';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent,\n        FileUploadErrorPipe\n    ],\n    exports: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent,\n        FileUploadErrorPipe\n    ]\n})\nexport class UploadModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { UploadModule } from '../upload/upload.module';\n\nimport { ContentActionListComponent } from './components/content-action/content-action-list.component';\nimport { ContentActionComponent } from './components/content-action/content-action.component';\nimport { ContentColumnListComponent } from './components/content-column/content-column-list.component';\nimport { ContentColumnComponent } from './components/content-column/content-column.component';\nimport { DocumentListComponent } from './components/document-list.component';\n\nimport { TrashcanNameColumnComponent } from './components/trashcan-name-column/trashcan-name-column.component';\nimport { LibraryStatusColumnComponent } from './components/library-status-column/library-status-column.component';\nimport { LibraryRoleColumnComponent } from './components/library-role-column/library-role-column.component';\nimport { LibraryNameColumnComponent } from './components/library-name-column/library-name-column.component';\nimport { NameColumnComponent } from './components/name-column/name-column.component';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        UploadModule\n    ],\n    declarations: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        TrashcanNameColumnComponent,\n        LibraryStatusColumnComponent,\n        LibraryRoleColumnComponent,\n        LibraryNameColumnComponent,\n        NameColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent\n    ],\n    exports: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        TrashcanNameColumnComponent,\n        LibraryStatusColumnComponent,\n        LibraryRoleColumnComponent,\n        LibraryNameColumnComponent,\n        NameColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent\n    ],\n    entryComponents: [\n        TrashcanNameColumnComponent,\n        LibraryStatusColumnComponent,\n        LibraryRoleColumnComponent,\n        LibraryNameColumnComponent,\n        NameColumnComponent\n    ]\n})\nexport class DocumentListModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport {\n    QueryBody,\n    RequestFacetFields,\n    RequestFacetField,\n    RequestSortDefinitionInner,\n    ResultSetPaging,\n    RequestHighlight\n} from '@alfresco/js-api';\nimport { SearchCategory } from './search-category.interface';\nimport { FilterQuery } from './filter-query.interface';\nimport { SearchRange } from './search-range.interface';\nimport { SearchConfiguration } from './search-configuration.interface';\nimport { FacetQuery } from './facet-query.interface';\nimport { SearchSortingDefinition } from './search-sorting-definition.interface';\nimport { FacetField } from './facet-field.interface';\nimport { FacetFieldBucket } from './facet-field-bucket.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SearchQueryBuilderService {\n\n    private _userQuery = '';\n\n    updated = new Subject<QueryBody>();\n    executed = new Subject<ResultSetPaging>();\n    error = new Subject();\n\n    categories: Array<SearchCategory> = [];\n    queryFragments: { [id: string]: string } = {};\n    filterQueries: FilterQuery[] = [];\n    paging: { maxItems?: number; skipCount?: number } = null;\n    sorting: Array<SearchSortingDefinition> = [];\n\n    protected userFacetBuckets: { [key: string]: Array<FacetFieldBucket> } = {};\n\n    get userQuery(): string {\n        return this._userQuery;\n    }\n\n    set userQuery(value: string) {\n        value = (value || '').trim();\n        this._userQuery = value ? `(${value})` : '';\n    }\n\n    config: SearchConfiguration = {\n        categories: []\n    };\n\n    // TODO: to be supported in future iterations\n    ranges: { [id: string]: SearchRange } = {};\n\n    constructor(private appConfig: AppConfigService, private alfrescoApiService: AlfrescoApiService) {\n        this.resetToDefaults();\n    }\n\n    /**\n     * Resets the query to the defaults specified in the app config.\n     */\n    resetToDefaults() {\n        const template = this.appConfig.get<SearchConfiguration>('search');\n        if (template) {\n            this.config = JSON.parse(JSON.stringify(template));\n            this.categories = (this.config.categories || []).filter((category) => category.enabled);\n            this.filterQueries = this.config.filterQueries || [];\n            this.userFacetBuckets = {};\n            if (this.config.sorting) {\n                this.sorting = this.config.sorting.defaults || [];\n            }\n        }\n    }\n\n    /**\n     * Adds a facet bucket to a field.\n     * @param field The target field\n     * @param bucket Bucket to add\n     */\n    addUserFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (field && field.field && bucket) {\n            const buckets = this.userFacetBuckets[field.field] || [];\n            const existing = buckets.find((facetBucket) => facetBucket.label === bucket.label);\n            if (!existing) {\n                buckets.push(bucket);\n            }\n            this.userFacetBuckets[field.field] = buckets;\n        }\n    }\n\n    /**\n     * Gets the buckets currently added to a field\n     * @param field The target fields\n     * @returns Bucket array\n     */\n    getUserFacetBuckets(field: string) {\n        return this.userFacetBuckets[field] || [];\n    }\n\n    /**\n     * Removes an existing bucket from a field.\n     * @param field The target field\n     * @param bucket Bucket to remove\n     */\n    removeUserFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (field && field.field && bucket) {\n            const buckets = this.userFacetBuckets[field.field] || [];\n            this.userFacetBuckets[field.field] = buckets\n                .filter((facetBucket) => facetBucket.label !== bucket.label);\n        }\n    }\n\n    /**\n     * Adds a filter query to the current query.\n     * @param query Query string to add\n     */\n    addFilterQuery(query: string): void {\n        if (query) {\n            const existing = this.filterQueries.find((filterQuery) => filterQuery.query === query);\n            if (!existing) {\n                this.filterQueries.push({ query: query });\n            }\n        }\n    }\n\n    /**\n     * Removes an existing filter query.\n     * @param query The query to remove\n     */\n    removeFilterQuery(query: string): void {\n        if (query) {\n            this.filterQueries = this.filterQueries\n                .filter((filterQuery) => filterQuery.query !== query);\n        }\n    }\n\n    /**\n     * Gets a facet query by label.\n     * @param label Label of the query\n     * @returns Facet query data\n     */\n    getFacetQuery(label: string): FacetQuery {\n        if (label && this.hasFacetQueries) {\n            const result = this.config.facetQueries.queries.find((query) => query.label === label);\n            if (result) {\n                return { ...result };\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Gets a facet field by label.\n     * @param label Label of the facet field\n     * @returns Facet field data\n     */\n    getFacetField(label: string): FacetField {\n        if (label) {\n            const fields = this.config.facetFields.fields || [];\n            const result = fields.find((field) => field.label === label);\n            if (result) {\n                result.label = this.getSupportedLabel(result.label);\n                return { ...result };\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Builds the current query and triggers the `updated` event.\n     */\n    update(): void {\n        const query = this.buildQuery();\n        this.updated.next(query);\n    }\n\n    /**\n     * Builds and executes the current query.\n     * @returns Nothing\n     */\n    async execute() {\n        try {\n            const query = this.buildQuery();\n            if (query) {\n                const resultSetPaging: ResultSetPaging = await this.alfrescoApiService.searchApi.search(query);\n                this.executed.next(resultSetPaging);\n            }\n        } catch (error) {\n            this.error.next(error);\n\n            this.executed.next({\n                list: {\n                    pagination: {\n                        totalItems: 0\n                    },\n                    entries: []\n                }\n            });\n        }\n    }\n\n    /**\n     * Builds the current query.\n     * @returns The finished query\n     */\n    buildQuery(): QueryBody {\n        const query = this.getFinalQuery();\n\n        const include = this.config.include || [];\n        if (include.length === 0) {\n            include.push('path', 'allowableOperations');\n        }\n\n        if (query) {\n            const result: QueryBody = <QueryBody> {\n                query: {\n                    query: query,\n                    language: 'afts'\n                },\n                include: include,\n                paging: this.paging,\n                fields: this.config.fields,\n                filterQueries: this.filterQueries,\n                facetQueries: this.facetQueries,\n                facetIntervals: this.facetIntervals,\n                facetFields: this.facetFields,\n                sort: this.sort,\n                highlight: this.highlight\n            };\n\n            result['facetFormat'] = 'V2';\n            return result;\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets the primary sorting definition.\n     * @returns The primary sorting definition\n     */\n    getPrimarySorting(): SearchSortingDefinition {\n        if (this.sorting && this.sorting.length > 0) {\n            return this.sorting[0];\n        }\n        return null;\n    }\n\n    /**\n     * Gets all pre-configured sorting options that users can choose from.\n     * @returns Pre-configured sorting options\n     */\n    getSortingOptions(): SearchSortingDefinition[] {\n        if (this.config && this.config.sorting) {\n            return this.config.sorting.options || [];\n        }\n        return [];\n    }\n\n    /**\n     * Gets the query group.\n     * @param query Target query\n     * @returns Query group\n     */\n    getQueryGroup(query) {\n        return query.group || this.config.facetQueries.label || 'Facet Queries';\n    }\n\n    /**\n     * Checks if FacetQueries has been defined\n     * @returns True if defined, false otherwise\n     */\n    get hasFacetQueries(): boolean {\n        if (this.config\n            && this.config.facetQueries\n            && this.config.facetQueries.queries\n            && this.config.facetQueries.queries.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if FacetIntervals has been defined\n     * @returns True if defined, false otherwise\n     */\n    get hasFacetIntervals(): boolean {\n        if (this.config\n            && this.config.facetIntervals\n            && this.config.facetIntervals.intervals\n            && this.config.facetIntervals.intervals.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    get hasFacetHighlight(): boolean {\n        return this.config && this.config.highlight ? true : false;\n    }\n\n    protected get sort(): RequestSortDefinitionInner[] {\n        return this.sorting.map((def) => {\n            return new RequestSortDefinitionInner({\n                type: def.type,\n                field: def.field,\n                ascending: def.ascending\n            });\n        });\n    }\n\n    protected get facetQueries(): FacetQuery[] {\n        if (this.hasFacetQueries) {\n            return this.config.facetQueries.queries.map((query) => {\n                query.group = this.getQueryGroup(query);\n                return <FacetQuery> { ...query };\n            });\n        }\n\n        return null;\n    }\n\n    protected get facetIntervals(): any {\n        if (this.hasFacetIntervals) {\n            const configIntervals = this.config.facetIntervals;\n\n            return {\n                intervals: configIntervals.intervals.map((interval) => <any> {\n                    label: this.getSupportedLabel(interval.label),\n                    field: interval.field,\n                    sets: interval.sets.map((set) => <any> {\n                        label: this.getSupportedLabel(set.label),\n                        start: set.start,\n                        end: set.end,\n                        startInclusive: set.startInclusive,\n                        endInclusive: set.endInclusive\n                    })\n                })\n            };\n        }\n\n        return null;\n    }\n\n    protected get highlight(): RequestHighlight {\n        return this.hasFacetHighlight ? this.config.highlight : null;\n    }\n\n    protected getFinalQuery(): string {\n        let query = '';\n\n        this.categories.forEach((facet) => {\n            const customQuery = this.queryFragments[facet.id];\n            if (customQuery) {\n                if (query.length > 0) {\n                    query += ' AND ';\n                }\n                query += `(${customQuery})`;\n            }\n        });\n\n        let result = [this.userQuery, query]\n            .filter((entry) => entry)\n            .join(' AND ');\n\n        if (this.userFacetBuckets) {\n            Object.keys(this.userFacetBuckets).forEach((key) => {\n                const subQuery = (this.userFacetBuckets[key] || [])\n                    .filter((bucket) => bucket.filterQuery)\n                    .map((bucket) => bucket.filterQuery)\n                    .join(' OR ');\n                if (subQuery) {\n                    if (result.length > 0) {\n                        result += ' AND ';\n                    }\n                    result += `(${subQuery})`;\n                }\n            });\n        }\n\n        return result;\n    }\n\n    protected get facetFields(): RequestFacetFields {\n        const facetFields = this.config.facetFields && this.config.facetFields.fields;\n\n        if (facetFields && facetFields.length > 0) {\n            return {\n                facets: facetFields.map((facet) => <RequestFacetField> {\n                    field: facet.field,\n                    mincount: facet.mincount,\n                    label: this.getSupportedLabel(facet.label),\n                    limit: facet.limit,\n                    offset: facet.offset,\n                    prefix: facet.prefix\n                })\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Encloses a label name with double quotes if it contains whitespace characters.\n     * @param configLabel Original label text\n     * @returns Label, possibly with quotes if it contains spaces\n     */\n    getSupportedLabel(configLabel: string): string {\n        const spaceInsideLabelIndex = configLabel.search(/\\s/g);\n        if (spaceInsideLabelIndex > -1) {\n            return `\"${configLabel}\"`;\n        }\n        return configLabel;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NodePaging } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-search',\n    templateUrl: './search.component.html',\n    styleUrls: ['./search.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    exportAs: 'searchAutocomplete',\n    host: {\n        'class': 'adf-search'\n    }\n})\nexport class SearchComponent implements AfterContentInit, OnChanges {\n\n    @ViewChild('panel')\n    panel: ElementRef;\n\n    @ContentChild(TemplateRef)\n    template: TemplateRef<any>;\n\n    /** Function that maps an option's value to its display value in the trigger. */\n    @Input()\n    displayWith: ((value: any) => string) | null = null;\n\n    /** Maximum number of results to show in the search. */\n    @Input()\n    maxResults: number = 20;\n\n    /** Number of results to skip from the results pagination. */\n    @Input()\n    skipResults: number = 0;\n\n    /** Search term to use when executing the search. Updating this value will\n     * run a new search and update the results.\n     */\n    @Input()\n    searchTerm: string = '';\n\n    /** CSS class for display. */\n    @Input('class')\n    set classList(classList: string) {\n        if (classList && classList.length) {\n            classList.split(' ').forEach((className) => this._classList[className.trim()] = true);\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Emitted when search results have fully loaded. */\n    @Output()\n    resultLoaded: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    showPanel: boolean = false;\n    results: NodePaging;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    _isOpen: boolean = false;\n\n    keyPressedStream: Subject<string> = new Subject();\n\n    _classList: { [key: string]: boolean } = {};\n\n    constructor(private searchService: SearchService,\n                private _elementRef: ElementRef) {\n        this.keyPressedStream.asObservable()\n            .pipe(\n                debounceTime(200)\n            )\n            .subscribe((searchedWord: string) => {\n                this.loadSearchResults(searchedWord);\n            });\n\n        searchService.dataLoaded.subscribe(\n            (nodePaging: NodePaging) => this.onSearchDataLoaded(nodePaging),\n            (error) => this.onSearchDataError(error)\n        );\n    }\n\n    ngAfterContentInit() {\n        this.setVisibility();\n    }\n\n    ngOnChanges(changes) {\n        if (changes.searchTerm && changes.searchTerm.currentValue) {\n            this.loadSearchResults(changes.searchTerm.currentValue);\n        }\n    }\n\n    resetResults() {\n        this.cleanResults();\n        this.setVisibility();\n    }\n\n    reload() {\n        this.loadSearchResults(this.searchTerm);\n    }\n\n    private cleanResults() {\n        if (this.results) {\n            this.results = {};\n        }\n    }\n\n    private loadSearchResults(searchTerm?: string) {\n        this.resetResults();\n        if (searchTerm) {\n            this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe(\n                (result) => this.onSearchDataLoaded(result),\n                (err) => this.onSearchDataError(err)\n            );\n        } else {\n            this.cleanResults();\n        }\n    }\n\n    onSearchDataLoaded(nodePaging: NodePaging) {\n        if (nodePaging) {\n            this.results = nodePaging;\n            this.resultLoaded.emit(this.results);\n            this.isOpen = true;\n            this.setVisibility();\n        }\n    }\n\n    onSearchDataError(error) {\n        if (error && error.status !== 400) {\n            this.results = null;\n            this.error.emit(error);\n        }\n    }\n\n    hidePanel() {\n        if (this.isOpen) {\n            this._classList['adf-search-show'] = false;\n            this._classList['adf-search-hide'] = true;\n            this.isOpen = false;\n        }\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.results && !!this.results.list;\n        this._classList['adf-search-show'] = this.showPanel;\n        this._classList['adf-search-hide'] = !this.showPanel;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trigger, transition, animate, style, state, AnimationTriggerMetadata } from '@angular/animations';\n\nexport const searchAnimation: AnimationTriggerMetadata = trigger('transitionMessages', [\n    state('active', style({\n        'margin-left': '{{ margin-left }}px',\n        'margin-right': '{{ margin-right }}px',\n        'transform': '{{ transform }}'\n    }), { params: { 'margin-left': 0, 'margin-right': 0, 'transform': 'translateX(0%)' } }),\n    state('inactive', style({\n        'margin-left': '{{ margin-left }}px',\n        'margin-right': '{{ margin-right }}px',\n        'transform': '{{ transform }}'\n    }), { params: { 'margin-left': 0, 'margin-right': 0, 'transform': 'translateX(0%)' } }),\n    state('no-animation', style({ transform: 'translateX(0%)', width: '100%' })),\n    transition('active <=> inactive', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'adf-empty-search-result',\n    templateUrl: './empty-search-result.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class EmptySearchResultComponent {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthenticationService, ThumbnailService, UserPreferencesService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output,\n         QueryList, ViewEncapsulation, ViewChild, ViewChildren, ElementRef, TemplateRef, ContentChild } from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { Observable, Subject } from 'rxjs';\nimport { SearchComponent } from './search.component';\nimport { searchAnimation } from './animations';\nimport { MatListItem } from '@angular/material';\nimport { EmptySearchResultComponent } from './empty-search-result.component';\nimport { debounceTime, filter, takeUntil } from 'rxjs/operators';\nimport { Direction } from '@angular/cdk/bidi';\n\n@Component({\n    selector: 'adf-search-control',\n    templateUrl: './search-control.component.html',\n    styleUrls: ['./search-control.component.scss'],\n    animations: [searchAnimation],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-control' }\n})\nexport class SearchControlComponent implements OnInit, OnDestroy {\n\n    /** Toggles whether to use an expanding search control. If false\n     * then a regular input is used.\n     */\n    @Input()\n    expandable: boolean = true;\n\n    /** Toggles highlighting of the search term in the results. */\n    @Input()\n    highlight: boolean = false;\n\n    /** Type of the input field to render, e.g. \"search\" or \"text\" (default). */\n    @Input()\n    inputType: string = 'text';\n\n    /** Toggles auto-completion of the search input field. */\n    @Input()\n    autocomplete: boolean = false;\n\n    /** Toggles \"find-as-you-type\" suggestions for possible matches. */\n    @Input()\n    liveSearchEnabled: boolean = true;\n\n    /** Maximum number of results to show in the live search. */\n    @Input()\n    liveSearchMaxResults: number = 5;\n\n    /** Emitted when the search is submitted by pressing the ENTER key.\n     * The search term is provided as the value of the event.\n     */\n    @Output()\n    submit: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when the search term is changed. The search term is provided\n     * in the 'value' property of the returned object.  If the term is less\n     * than three characters in length then it is truncated to an empty\n     * string.\n     */\n    @Output()\n    searchChange: EventEmitter<string> = new EventEmitter();\n\n    /** Emitted when a file item from the list of \"find-as-you-type\" results is selected. */\n    @Output()\n    optionClicked: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('search')\n    searchAutocomplete: SearchComponent;\n\n    @ViewChild('searchInput')\n    searchInput: ElementRef;\n\n    @ViewChildren(MatListItem)\n    private listResultElement: QueryList<MatListItem>;\n\n    @ContentChild(EmptySearchResultComponent)\n    emptySearchTemplate: EmptySearchResultComponent;\n\n    searchTerm: string = '';\n    subscriptAnimationState: any;\n    noSearchResultTemplate: TemplateRef <any> = null;\n\n    private toggleSearch = new Subject<any>();\n    private focusSubject = new Subject<FocusEvent>();\n    private onDestroy$ = new Subject<boolean>();\n    private dir = 'ltr';\n\n    constructor(\n        public authService: AuthenticationService,\n        private thumbnailService: ThumbnailService,\n        private userPreferencesService: UserPreferencesService\n    ) {\n\n        this.toggleSearch.asObservable().pipe(debounceTime(200)).subscribe(() => {\n            if (this.expandable) {\n                this.subscriptAnimationState = this.toggleAnimation();\n\n                if (this.subscriptAnimationState.value === 'inactive') {\n                    this.searchTerm = '';\n                    this.searchAutocomplete.resetResults();\n                    if ( document.activeElement.id === this.searchInput.nativeElement.id) {\n                        this.searchInput.nativeElement.blur();\n                    }\n                }\n            }\n        });\n    }\n\n    applySearchFocus(animationDoneEvent) {\n        if (animationDoneEvent.toState === 'active') {\n            this.searchInput.nativeElement.focus();\n        }\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select('textOrientation')\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((direction: Direction) => {\n                this.dir = direction;\n                this.subscriptAnimationState = this.getAnimationState();\n            });\n\n        this.subscriptAnimationState = this.getAnimationState();\n        this.setupFocusEventHandlers();\n    }\n\n    isNoSearchTemplatePresent(): boolean {\n        return this.emptySearchTemplate ? true : false;\n    }\n\n    ngOnDestroy(): void {\n        if (this.focusSubject) {\n            this.focusSubject.complete();\n            this.focusSubject = null;\n        }\n\n        if (this.toggleSearch) {\n            this.toggleSearch.complete();\n            this.toggleSearch = null;\n        }\n\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    isLoggedIn(): boolean {\n        return this.authService.isEcmLoggedIn();\n    }\n\n    searchSubmit(event: any) {\n        this.submit.emit(event);\n        this.toggleSearchBar();\n    }\n\n    inputChange(event: any) {\n        this.searchChange.emit(event);\n    }\n\n    getAutoComplete(): string {\n        return this.autocomplete ? 'on' : 'off';\n    }\n\n    getMimeTypeIcon(node: NodeEntry): string {\n        const mimeType = this.getMimeType(node);\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    getMimeType(node: NodeEntry): string {\n        let mimeType: string;\n\n        if (node.entry.content && node.entry.content.mimeType) {\n            mimeType = node.entry.content.mimeType;\n        }\n        if (node.entry.isFolder) {\n            mimeType = 'folder';\n        }\n        return mimeType;\n    }\n\n    isSearchBarActive() {\n        return this.subscriptAnimationState.value === 'active' && this.liveSearchEnabled;\n    }\n\n    toggleSearchBar() {\n        if (this.toggleSearch) {\n            this.toggleSearch.next();\n        }\n    }\n\n    elementClicked(item: any) {\n        if (item.entry) {\n            this.optionClicked.next(item);\n            this.toggleSearchBar();\n        }\n    }\n\n    onFocus($event): void {\n        this.focusSubject.next($event);\n    }\n\n    onBlur($event): void {\n        this.focusSubject.next($event);\n    }\n\n    activateToolbar() {\n        if (!this.isSearchBarActive()) {\n            this.toggleSearchBar();\n        }\n    }\n\n    selectFirstResult() {\n        if ( this.listResultElement && this.listResultElement.length > 0) {\n            const firstElement: MatListItem = <MatListItem> this.listResultElement.first;\n            firstElement._getHostElement().focus();\n        }\n    }\n\n    onRowArrowDown($event: KeyboardEvent): void {\n        const nextElement: any = this.getNextElementSibling(<Element> $event.target);\n        if (nextElement) {\n            nextElement.focus();\n        }\n    }\n\n    onRowArrowUp($event: KeyboardEvent): void {\n        const previousElement: any = this.getPreviousElementSibling(<Element> $event.target);\n        if (previousElement) {\n            previousElement.focus();\n        } else {\n            this.searchInput.nativeElement.focus();\n            this.focusSubject.next(new FocusEvent('focus'));\n        }\n    }\n\n    private setupFocusEventHandlers() {\n        const focusEvents: Observable<FocusEvent> = this.focusSubject\n            .asObservable()\n            .pipe(\n                debounceTime(50),\n                filter(($event: any) => {\n                    return this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout');\n                })\n            );\n\n        focusEvents.subscribe(() => {\n            this.toggleSearchBar();\n        });\n    }\n\n    private getNextElementSibling(node: Element): Element {\n        return node.nextElementSibling;\n    }\n\n    private getPreviousElementSibling(node: Element): Element {\n        return node.previousElementSibling;\n    }\n\n    private toggleAnimation() {\n        if (this.dir === 'ltr') {\n            return this.subscriptAnimationState.value === 'inactive' ?\n                { value: 'active', params: { 'margin-left': 13 } } :\n                { value: 'inactive', params: { 'transform': 'translateX(82%)' } };\n        } else {\n            return this.subscriptAnimationState.value === 'inactive' ?\n                { value: 'active', params: { 'margin-right': 13 } } :\n                { value: 'inactive', params: { 'transform': 'translateX(-82%)' } };\n        }\n    }\n\n    private getAnimationState() {\n        if (this.dir === 'ltr') {\n            return this.expandable ?\n                { value: 'inactive', params: { 'transform': 'translateX(82%)' } } :\n                { value: 'no-animation' };\n        } else {\n            return this.expandable ?\n                { value: 'inactive', params: { 'transform': 'translateX(-82%)' } } :\n                { value: 'no-animation' };\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable: no-input-rename no-use-before-declare no-input-rename  */\n\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, Subject, Subscription, merge, of, fromEvent } from 'rxjs';\nimport { SearchComponent } from './search.component';\nimport { filter, switchMap, takeUntil } from 'rxjs/operators';\n\nexport const SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SearchTriggerDirective),\n    multi: true\n};\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: `input[searchAutocomplete], textarea[searchAutocomplete]`,\n    host: {\n        'role': 'combobox',\n        '[attr.autocomplete]': 'autocomplete',\n        'aria-autocomplete': 'list',\n        '[attr.aria-expanded]': 'panelOpen.toString()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class SearchTriggerDirective implements ControlValueAccessor, OnDestroy {\n    private onDestroy$: Subject<boolean> = new Subject<boolean>();\n\n    @Input('searchAutocomplete')\n    searchPanel: SearchComponent;\n\n    @Input()\n    autocomplete: string = 'off';\n\n    private _panelOpen: boolean = false;\n    private closingActionsSubscription: Subscription;\n    private escapeEventStream = new Subject<void>();\n\n    onChange: (value: any) => void = () => { };\n\n    onTouched = () => { };\n\n    constructor(private element: ElementRef,\n                private ngZone: NgZone,\n                private changeDetectorRef: ChangeDetectorRef,\n                @Optional() @Inject(DOCUMENT) private document: any) { }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n\n        if (this.escapeEventStream) {\n            this.escapeEventStream = null;\n        }\n        if ( this.closingActionsSubscription ) {\n            this.closingActionsSubscription.unsubscribe();\n        }\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen && this.searchPanel.showPanel;\n    }\n\n    openPanel(): void {\n        this.searchPanel.isOpen = this._panelOpen = true;\n        this.closingActionsSubscription = this.subscribeToClosingActions();\n    }\n\n    closePanel(): void {\n        if (this._panelOpen) {\n            this.closingActionsSubscription.unsubscribe();\n            this._panelOpen = false;\n            this.searchPanel.resetResults();\n            this.searchPanel.hidePanel();\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    get panelClosingActions(): Observable<any> {\n        return merge(\n            this.escapeEventStream,\n            this.outsideClickStream\n        );\n    }\n\n    private get outsideClickStream(): Observable<any> {\n        if (!this.document) {\n            return of(null);\n        }\n\n        return merge(\n            fromEvent(this.document, 'click'),\n            fromEvent(this.document, 'touchend')\n        ).pipe(\n            filter((event: MouseEvent | TouchEvent) => {\n                const clickTarget = event.target as HTMLElement;\n                return this._panelOpen && clickTarget !== this.element.nativeElement;\n            }),\n            takeUntil(this.onDestroy$)\n        );\n    }\n\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === ESCAPE && this.panelOpen) {\n            this.escapeEventStream.next();\n            event.stopPropagation();\n        } else if (keyCode === ENTER) {\n            this.escapeEventStream.next();\n            event.preventDefault();\n        }\n\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        if (document.activeElement === event.target) {\n            const inputValue: string = (event.target as HTMLInputElement).value;\n            this.onChange(inputValue);\n            if (inputValue) {\n                this.searchPanel.keyPressedStream.next(inputValue);\n                this.openPanel();\n            } else {\n                this.searchPanel.resetResults();\n                this.closePanel();\n            }\n        }\n    }\n\n    private isPanelOptionClicked(event: MouseEvent) {\n        let isPanelOption: boolean = false;\n        if ( event ) {\n            const clickTarget = event.target as HTMLElement;\n            isPanelOption = !this.isNoResultOption(event) &&\n                            !!this.searchPanel.panel &&\n                            !!this.searchPanel.panel.nativeElement.contains(clickTarget);\n        }\n        return isPanelOption;\n    }\n\n    private isNoResultOption(event: MouseEvent) {\n        return this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;\n    }\n\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.ngZone.onStable.asObservable();\n        const optionChanges = this.searchPanel.keyPressedStream.asObservable();\n\n        return merge(firstStable, optionChanges)\n            .pipe(\n                switchMap(() => {\n                    this.searchPanel.setVisibility();\n                    return this.panelClosingActions;\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.searchPanel && this.searchPanel.displayWith ?\n            this.searchPanel.displayWith(value) : value;\n        const inputValue = toDisplay != null ? toDisplay : '';\n        this.element.nativeElement.value = inputValue;\n    }\n\n    private setValueAndClose(event: any | null): void {\n        if (this.isPanelOptionClicked(event) && !event.defaultPrevented) {\n            this.setTriggerValue(event.target.textContent.trim());\n            this.onChange(event.target.textContent.trim());\n            this.element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst DEFAULT_PAGE_SIZE = 5;\n\nexport class SearchFilterList<T> implements Iterable<T> {\n\n    private filteredItems: T[] = [];\n    private _filterText: string = '';\n\n    items: T[] = [];\n    pageSize: number = DEFAULT_PAGE_SIZE;\n    currentPageSize: number = DEFAULT_PAGE_SIZE;\n\n    get filterText(): string {\n        return this._filterText;\n    }\n\n    set filterText(value: string) {\n        this._filterText = value;\n        this.applyFilter();\n    }\n\n    private _filter: (item: T) => boolean = () => true;\n\n    get filter(): (item: T) => boolean {\n        return this._filter;\n    }\n\n    set filter(value: (item: T) => boolean ) {\n        this._filter = value;\n        this.applyFilter();\n    }\n\n    private applyFilter() {\n        if (this.filter) {\n            this.filteredItems = this.items.filter(this.filter);\n        } else {\n            this.filteredItems = this.items;\n        }\n        this.currentPageSize = this.pageSize;\n    }\n\n    /** Returns visible portion of the items.  */\n    get visibleItems(): T[] {\n        return this.filteredItems.slice(0, this.currentPageSize);\n    }\n\n    /** Returns entire collection length including items not displayed on the page. */\n    get length(): number {\n        return this.items.length;\n    }\n\n    /** Detects whether more items can be displayed. */\n    get canShowMoreItems(): boolean {\n        return this.filteredItems.length > this.currentPageSize;\n    }\n\n    /** Detects whether less items can be displayed. */\n    get canShowLessItems(): boolean {\n        return this.currentPageSize > this.pageSize;\n    }\n\n    /** Detects whether content fits single page. */\n    get fitsPage(): boolean {\n        return this.pageSize >= this.filteredItems.length;\n    }\n\n    constructor(items: T[] = [], pageSize?: number) {\n        this.items = items;\n        this.filteredItems = items;\n        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;\n        this.currentPageSize = pageSize || DEFAULT_PAGE_SIZE;\n    }\n\n    /** Display more items. */\n    showMoreItems() {\n        if (this.canShowMoreItems) {\n            this.currentPageSize += this.pageSize;\n        }\n    }\n\n    /** Display less items. */\n    showLessItems() {\n        if (this.canShowLessItems) {\n            this.currentPageSize -= this.pageSize;\n        }\n    }\n\n    /** Reset entire collection and page settings. */\n    clear() {\n        this.currentPageSize = this.pageSize;\n        this.items = [];\n        this.filteredItems = [];\n        this.filterText = '';\n    }\n\n    addItem(item: T) {\n        if (!item) {\n            return;\n        }\n        this.items.push(item);\n        this.applyFilter();\n    }\n\n    deleteItem(item: T) {\n        const removeIndex = this.items.indexOf(item);\n        if (removeIndex > -1) {\n            this.items.splice(removeIndex, 1);\n            this.filteredItems.splice(removeIndex, 1);\n        }\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        let pointer = 0;\n        const items = this.visibleItems;\n\n        return {\n            next(): IteratorResult<T> {\n                if (pointer < items.length) {\n                    return {\n                        done: false,\n                        value: items[pointer++]\n                    };\n                } else {\n                    return {\n                        done: true,\n                        value: null\n                    };\n                }\n            }\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, OnDestroy } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\nimport { SearchService, TranslationService } from '@alfresco/adf-core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { FacetFieldBucket } from '../../facet-field-bucket.interface';\nimport { FacetField } from '../../facet-field.interface';\nimport { SearchFilterList } from './models/search-filter-list.model';\nimport { takeWhile } from 'rxjs/operators';\nimport { ResultSetPaging, GenericBucket, GenericFacetResponse, ResultSetContext } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-search-filter',\n    templateUrl: './search-filter.component.html',\n    styleUrls: ['./search-filter.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-filter' }\n})\nexport class SearchFilterComponent implements OnInit, OnDestroy {\n\n    private DEFAULT_PAGE_SIZE = 5;\n\n    isAlive = true;\n\n    /** All facet field items to be displayed in the component. These are updated according to the response.\n     *  When a new search is performed, the already existing items are updated with the new bucket count values and\n     *  the newly received items are added to the responseFacets.\n     */\n    responseFacets: FacetField[] = null;\n\n    private facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;\n    facetQueriesLabel: string = 'Facet Queries';\n    facetExpanded = {\n        'default': false\n    };\n    displayResetButton: boolean;\n    selectedBuckets: Array<{ field: FacetField, bucket: FacetFieldBucket }> = [];\n\n    constructor(public queryBuilder: SearchQueryBuilderService,\n                private searchService: SearchService,\n                private translationService: TranslationService) {\n        if (queryBuilder.config && queryBuilder.config.facetQueries) {\n            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';\n            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;\n            this.facetExpanded['query'] = queryBuilder.config.facetQueries.expanded;\n        }\n        if (queryBuilder.config && queryBuilder.config.facetFields) {\n            this.facetExpanded['field'] = queryBuilder.config.facetFields.expanded;\n        }\n        if (queryBuilder.config && queryBuilder.config.facetIntervals) {\n            this.facetExpanded['interval'] = queryBuilder.config.facetIntervals.expanded;\n        }\n        this.displayResetButton = this.queryBuilder.config && !!this.queryBuilder.config.resetButton;\n\n        this.queryBuilder.updated.pipe(\n            takeWhile(() => this.isAlive)\n        ).subscribe(() => {\n            this.queryBuilder.execute();\n        });\n    }\n\n    ngOnInit() {\n        if (this.queryBuilder) {\n            this.queryBuilder.executed.pipe(\n                takeWhile(() => this.isAlive)\n            ).subscribe((resultSetPaging: ResultSetPaging) => {\n                this.onDataLoaded(resultSetPaging);\n                this.searchService.dataLoaded.next(resultSetPaging);\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.isAlive = false;\n    }\n\n    private updateSelectedBuckets() {\n        if (this.responseFacets) {\n            this.selectedBuckets = [];\n            for (const field of this.responseFacets) {\n                if (field.buckets) {\n                    this.selectedBuckets.push(\n                        ...this.queryBuilder.getUserFacetBuckets(field.field)\n                            .filter((bucket) => bucket.checked)\n                            .map((bucket) => {\n                                return { field, bucket };\n                            })\n                    );\n                }\n            }\n        } else {\n            this.selectedBuckets = [];\n        }\n    }\n\n    onToggleBucket(event: MatCheckboxChange, field: FacetField, bucket: FacetFieldBucket) {\n        if (event && bucket) {\n            if (event.checked) {\n                this.selectFacetBucket(field, bucket);\n            } else {\n                this.unselectFacetBucket(field, bucket);\n            }\n        }\n    }\n\n    selectFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (bucket) {\n            bucket.checked = true;\n            this.queryBuilder.addUserFacetBucket(field, bucket);\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    unselectFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (bucket) {\n            bucket.checked = false;\n            this.queryBuilder.removeUserFacetBucket(field, bucket);\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    canResetSelectedBuckets(field: FacetField): boolean {\n        if (field && field.buckets) {\n            return field.buckets.items.some((bucket) => bucket.checked);\n        }\n        return false;\n    }\n\n    resetSelectedBuckets(field: FacetField) {\n        if (field && field.buckets) {\n            for (const bucket of field.buckets.items) {\n                bucket.checked = false;\n                this.queryBuilder.removeUserFacetBucket(field, bucket);\n            }\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    resetAllSelectedBuckets() {\n        this.responseFacets.forEach((field) => {\n            if (field && field.buckets) {\n                for (const bucket of field.buckets.items) {\n                    bucket.checked = false;\n                    this.queryBuilder.removeUserFacetBucket(field, bucket);\n                }\n                this.updateSelectedBuckets();\n            }\n        });\n        this.queryBuilder.update();\n    }\n\n    resetAll() {\n        this.resetAllSelectedBuckets();\n        this.responseFacets = null;\n    }\n\n    shouldExpand(field: FacetField): boolean {\n        return this.facetExpanded[field.type] || this.facetExpanded['default'];\n    }\n\n    onDataLoaded(data: any) {\n        const context = data.list.context;\n\n        if (context) {\n            this.parseFacets(context);\n        } else {\n            this.responseFacets = null;\n        }\n    }\n\n    private parseFacets(context: ResultSetContext) {\n        this.parseFacetFields(context);\n        this.parseFacetIntervals(context);\n        this.parseFacetQueries(context);\n    }\n\n    private parseFacetItems(context: ResultSetContext, configFacetFields: FacetField[], itemType: string) {\n        configFacetFields.forEach((field) => {\n            const responseField = this.findFacet(context, itemType, field.label);\n            const responseBuckets = this.getResponseBuckets(responseField, field)\n                .filter(this.getFilterByMinCount(field.mincount));\n            const alreadyExistingField = this.findResponseFacet(itemType, field.label);\n\n            if (alreadyExistingField) {\n                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];\n\n                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);\n            } else if (responseField) {\n\n                const bucketList = new SearchFilterList<FacetFieldBucket>(responseBuckets, field.pageSize);\n                bucketList.filter = this.getBucketFilterFunction(bucketList);\n\n                if (!this.responseFacets) {\n                    this.responseFacets = [];\n                }\n                this.responseFacets.push(<FacetField> {\n                    ...field,\n                    type: responseField.type || itemType,\n                    label: field.label,\n                    pageSize: field.pageSize | this.DEFAULT_PAGE_SIZE,\n                    currentPageSize: field.pageSize | this.DEFAULT_PAGE_SIZE,\n                    buckets: bucketList\n                });\n            }\n        });\n    }\n\n    private parseFacetFields(context: ResultSetContext) {\n        const configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];\n        this.parseFacetItems(context, configFacetFields, 'field');\n    }\n\n    private parseFacetIntervals(context: ResultSetContext) {\n        const configFacetIntervals = this.queryBuilder.config.facetIntervals && this.queryBuilder.config.facetIntervals.intervals || [];\n        this.parseFacetItems(context, configFacetIntervals, 'interval');\n    }\n\n    private parseFacetQueries(context: ResultSetContext) {\n        const configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];\n        const configGroups = configFacetQueries.reduce((acc, query) => {\n            const group = this.queryBuilder.getQueryGroup(query);\n            if (acc[group]) {\n                acc[group].push(query);\n            } else {\n                acc[group] = [query];\n            }\n            return acc;\n        }, []);\n\n        const mincount = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.mincount;\n        const mincountFilter = this.getFilterByMinCount(mincount);\n\n        Object.keys(configGroups).forEach((group) => {\n            const responseField = this.findFacet(context, 'query', group);\n            const responseBuckets = this.getResponseQueryBuckets(responseField, configGroups[group])\n                .filter(mincountFilter);\n            const alreadyExistingField = this.findResponseFacet('query', group);\n\n            if (alreadyExistingField) {\n                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];\n\n                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);\n            } else if (responseField) {\n\n                const bucketList = new SearchFilterList<FacetFieldBucket>(responseBuckets, this.facetQueriesPageSize);\n                bucketList.filter = this.getBucketFilterFunction(bucketList);\n\n                if (!this.responseFacets) {\n                    this.responseFacets = [];\n                }\n                this.responseFacets.push(<FacetField> {\n                    field: group,\n                    type: responseField.type || 'query',\n                    label: group,\n                    pageSize: this.DEFAULT_PAGE_SIZE,\n                    currentPageSize: this.DEFAULT_PAGE_SIZE,\n                    buckets: bucketList\n                });\n            }\n        });\n\n    }\n\n    private getResponseBuckets(responseField: GenericFacetResponse, configField: FacetField): FacetFieldBucket[] {\n        return ((responseField && responseField.buckets) || []).map((respBucket) => {\n\n            respBucket['count'] = this.getCountValue(respBucket);\n            respBucket.filterQuery = respBucket.filterQuery || this.getCorrespondingFilterQuery(configField, respBucket.label);\n            return <FacetFieldBucket> {\n                ...respBucket,\n                checked: false,\n                display: respBucket.display,\n                label: respBucket.label\n            };\n        });\n    }\n\n    private getResponseQueryBuckets(responseField: GenericFacetResponse, configGroup: any): FacetFieldBucket[] {\n        return (configGroup || []).map((query) => {\n            const respBucket = ((responseField && responseField.buckets) || [])\n                .find((bucket) => bucket.label === query.label);\n\n            respBucket['count'] = this.getCountValue(respBucket);\n            return <FacetFieldBucket> {\n                ...respBucket,\n                checked: false,\n                display: respBucket.display,\n                label: respBucket.label\n            };\n        });\n    }\n\n    private getCountValue(bucket: GenericBucket): number {\n        return (!!bucket && !!bucket.metrics && bucket.metrics[0] && bucket.metrics[0].value && bucket.metrics[0].value.count)\n            || 0;\n    }\n\n    getBucketCountDisplay(bucket: FacetFieldBucket): string {\n        return bucket.count === null ? '' : `(${bucket.count})`;\n    }\n\n    private getFilterByMinCount(mincountInput: number) {\n        return (bucket) => {\n            let mincount = mincountInput;\n            if (mincount === undefined) {\n                mincount = 1;\n            }\n            return bucket.count >= mincount;\n        };\n    }\n\n    private getCorrespondingFilterQuery (configFacetItem: FacetField, bucketLabel: string): string {\n        let filterQuery = null;\n\n        if (configFacetItem.field && bucketLabel) {\n\n            if (configFacetItem.sets) {\n                const configSet = configFacetItem.sets.find((set) => bucketLabel === set.label);\n\n                if (configSet) {\n                    filterQuery = this.buildIntervalQuery(configFacetItem.field, configSet);\n                }\n\n            } else {\n                filterQuery = `${configFacetItem.field}:\"${bucketLabel}\"`;\n            }\n        }\n\n        return filterQuery;\n    }\n\n    private buildIntervalQuery(fieldName: string, interval: any): string {\n        const start = interval.start;\n        const end = interval.end;\n        const startLimit = (interval.startInclusive === undefined || interval.startInclusive === true) ? '[' : '<';\n        const endLimit = (interval.endInclusive === undefined || interval.endInclusive === true) ? ']' : '>';\n\n        return `${fieldName}:${startLimit}\"${start}\" TO \"${end}\"${endLimit}`;\n    }\n\n    private findFacet(context: ResultSetContext, itemType: string, fieldLabel: string): GenericFacetResponse {\n        return (context.facets || []).find((response) => response.type === itemType && response.label === fieldLabel) || {};\n    }\n\n    private findResponseFacet(itemType: string, fieldLabel: string): FacetField {\n        return (this.responseFacets || []).find((response) => response.type === itemType && response.label === fieldLabel);\n    }\n\n    private updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets) {\n        const bucketsToDelete = [];\n\n        alreadyExistingBuckets\n            .map((bucket) => {\n                const responseBucket = ((responseField && responseField.buckets) || []).find((respBucket) => respBucket.label === bucket.label);\n\n                if (!responseBucket) {\n                    bucketsToDelete.push(bucket);\n                }\n                bucket.count = this.getCountValue(responseBucket);\n                return bucket;\n            });\n\n        const hasSelection = this.selectedBuckets\n            .find((selBuckets) => alreadyExistingField.label === selBuckets.field.label && alreadyExistingField.type === selBuckets.field.type);\n\n        if (!hasSelection && bucketsToDelete.length) {\n            bucketsToDelete.forEach((bucket) => {\n                alreadyExistingField.buckets.deleteItem(bucket);\n            });\n        }\n\n        responseBuckets.forEach((respBucket) => {\n            const existingBucket = alreadyExistingBuckets.find((oldBucket) => oldBucket.label === respBucket.label);\n\n            if (!existingBucket) {\n                alreadyExistingField.buckets.addItem(respBucket);\n            }\n        });\n    }\n\n    private getBucketFilterFunction (bucketList) {\n        return (bucket: FacetFieldBucket): boolean => {\n            if (bucket && bucketList.filterText) {\n                const pattern = (bucketList.filterText || '').toLowerCase();\n                const label = (this.translationService.instant(bucket.display) || this.translationService.instant(bucket.label)).toLowerCase();\n                return this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);\n            }\n            return true;\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\n\n@Component({\n    selector: 'adf-search-text',\n    templateUrl: './search-text.component.html',\n    styleUrls: ['./search-text.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-text' }\n})\nexport class SearchTextComponent implements SearchWidget, OnInit {\n\n    /** The content of the text box. */\n    @Input()\n    value = '';\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n\n    ngOnInit() {\n        if (this.context && this.settings && this.settings.pattern) {\n            const pattern = new RegExp(this.settings.pattern, 'g');\n            const match = pattern.exec(this.context.queryFragments[this.id] || '');\n\n            if (match && match.length > 1) {\n                this.value = match[1];\n            }\n        }\n    }\n\n    reset() {\n        this.value = '';\n        this.updateQuery(null);\n    }\n\n    onChangedHandler(event) {\n        this.value = event.target.value;\n        this.updateQuery(this.value);\n    }\n\n    private updateQuery(value: string) {\n        if (this.context && this.settings && this.settings.field) {\n            this.context.queryFragments[this.id] = value ? `${this.settings.field}:'${value}'` : '';\n            this.context.update();\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { MatRadioChange } from '@angular/material';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterList } from '../search-filter/models/search-filter-list.model';\n\nexport interface SearchRadioOption {\n    name: string;\n    value: string;\n}\n\n@Component({\n    selector: 'adf-search-radio',\n    templateUrl: './search-radio.component.html',\n    styleUrls: ['./search-radio.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-radio' }\n})\nexport class SearchRadioComponent implements SearchWidget, OnInit {\n\n    /** The value of the selected radio button. */\n    @Input()\n    value: string;\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n    options: SearchFilterList<SearchRadioOption>;\n    pageSize = 5;\n\n    constructor() {\n        this.options = new SearchFilterList<SearchRadioOption>();\n    }\n\n    ngOnInit() {\n        if (this.settings) {\n            this.pageSize = this.settings.pageSize || 5;\n\n            if (this.settings.options && this.settings.options.length > 0) {\n                this.options = new SearchFilterList<SearchRadioOption>(\n                    this.settings.options, this.pageSize\n                );\n            }\n        }\n\n        const initialValue = this.getSelectedValue();\n        if (initialValue !== null) {\n            this.setValue(initialValue);\n        }\n    }\n\n    private getSelectedValue(): string {\n        const options: any[] = this.settings['options'] || [];\n        if (options && options.length > 0) {\n            let selected = options.find((opt) => opt.default);\n            if (!selected) {\n                selected = options[0];\n            }\n            return selected.value;\n        }\n        return null;\n    }\n\n    private setValue(newValue: string) {\n        this.value = newValue;\n        this.context.queryFragments[this.id] = newValue;\n        this.context.update();\n    }\n\n    changeHandler(event: MatRadioChange) {\n        this.setValue(event.value);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { MatSliderChange } from '@angular/material';\n\n@Component({\n    selector: 'adf-search-slider',\n    templateUrl: './search-slider.component.html',\n    styleUrls: ['./search-slider.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-slider' }\n})\nexport class SearchSliderComponent implements SearchWidget, OnInit {\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n    step: number;\n    min: number;\n    max: number;\n    thumbLabel = false;\n\n    /** The numeric value represented by the slider. */\n    @Input()\n    value: number | null;\n\n    ngOnInit() {\n        if (this.settings) {\n            if (this.settings.hasOwnProperty('min')) {\n                this.min = this.settings['min'];\n            }\n\n            if (this.settings.hasOwnProperty('max')) {\n                this.max = this.settings['max'];\n            }\n\n            if (this.settings.hasOwnProperty('step')) {\n                this.step = this.settings['step'];\n            }\n\n            this.thumbLabel = this.settings['thumbLabel'] ? true : false;\n        }\n    }\n\n    reset() {\n        this.value = this.min || 0;\n        this.updateQuery(null);\n    }\n\n    onChangedHandler(event: MatSliderChange) {\n        this.value = event.value;\n        this.updateQuery(this.value);\n    }\n\n    private updateQuery(value: number | null) {\n        if (this.id && this.context && this.settings && this.settings.field) {\n            if (value === null) {\n                this.context.queryFragments[this.id] = '';\n            } else {\n                this.context.queryFragments[this.id] = `${this.settings.field}:[0 TO ${value}]`;\n            }\n            this.context.update();\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorStateMatcher } from '@angular/material';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\n\nexport class LiveErrorStateMatcher implements ErrorStateMatcher {\n\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        const isSubmitted = form && form.submitted;\n        return !!(control && control.invalid && (control.dirty || control.touched || (!control.pristine && isSubmitted)));\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnInit, Component, ViewEncapsulation } from '@angular/core';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';\n\n@Component({\n    selector: 'adf-search-number-range',\n    templateUrl: './search-number-range.component.html',\n    styleUrls: ['./search-number-range.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-number-range' }\n})\nexport class SearchNumberRangeComponent implements SearchWidget, OnInit {\n\n    from: FormControl;\n    to: FormControl;\n\n    form: FormGroup;\n    matcher = new LiveErrorStateMatcher();\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n\n    field: string;\n    format = '[{FROM} TO {TO}]';\n\n    validators: Validators;\n\n    ngOnInit(): void {\n\n        if (this.settings) {\n            this.field = this.settings.field;\n            this.format = this.settings.format || '[{FROM} TO {TO}]';\n        }\n\n        this.validators = Validators.compose([\n            Validators.required,\n            Validators.pattern(/^-?(0|[1-9]\\d*)?$/),\n            Validators.min(0)\n        ]);\n\n        this.from = new FormControl('', this.validators);\n        this.to = new FormControl('', this.validators);\n\n        this.form = new FormGroup({\n            from: this.from,\n            to: this.to\n        }, this.formValidator);\n    }\n\n    formValidator(formGroup: FormGroup) {\n        return parseInt(formGroup.get('from').value, 10) < parseInt(formGroup.get('to').value, 10) ? null : {'mismatch': true};\n    }\n\n    apply(model: { from: string, to: string }, isValid: boolean) {\n        if (isValid && this.id && this.context && this.field) {\n            const map = new Map<string, string>();\n            map.set('FROM', model.from);\n            map.set('TO', model.to);\n\n            const value = this.formatString(this.format, map);\n\n            this.context.queryFragments[this.id] = `${this.field}:${value}`;\n            this.context.update();\n        }\n    }\n\n    private formatString(str: string, map: Map<string, string>): string {\n        let result = str;\n\n        map.forEach((value, key) => {\n            const expr = new RegExp('{' + key + '}', 'gm');\n            result = result.replace(expr, value);\n        });\n\n        return result;\n    }\n\n    reset() {\n        this.form.reset({\n            from: '',\n            to: ''\n        });\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterList } from '../search-filter/models/search-filter-list.model';\n\nexport interface SearchListOption {\n    name: string;\n    value: string;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'adf-search-check-list',\n    templateUrl: './search-check-list.component.html',\n    styleUrls: ['./search-check-list.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-check-list' }\n})\nexport class SearchCheckListComponent implements SearchWidget, OnInit {\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n    options: SearchFilterList<SearchListOption>;\n    operator: string = 'OR';\n    pageSize = 5;\n\n    constructor() {\n        this.options = new SearchFilterList<SearchListOption>();\n    }\n\n    ngOnInit(): void {\n        if (this.settings) {\n            this.operator = this.settings.operator || 'OR';\n            this.pageSize = this.settings.pageSize || 5;\n\n            if (this.settings.options && this.settings.options.length > 0) {\n                this.options = new SearchFilterList(this.settings.options, this.pageSize);\n            }\n        }\n    }\n\n    reset() {\n        this.options.items.forEach((opt) => {\n            opt.checked = false;\n        });\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n\n    changeHandler(event: MatCheckboxChange, option: any) {\n        option.checked = event.checked;\n        this.flush();\n    }\n\n    flush() {\n        const checkedValues = this.options.items\n            .filter((option) => option.checked)\n            .map((option) => option.value);\n\n        const query = checkedValues.join(` ${this.operator} `);\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = query;\n            this.context.update();\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnInit, Component, ViewEncapsulation } from '@angular/core';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MomentDateAdapter, MOMENT_DATE_FORMATS } from '@alfresco/adf-core';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';\nimport { Moment } from 'moment';\nimport { UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';\n\ndeclare let moment: any;\n\nconst DEFAULT_FORMAT_DATE: string = 'DD/MM/YYYY';\n\n@Component({\n    selector: 'adf-search-date-range',\n    templateUrl: './search-date-range.component.html',\n    styleUrls: ['./search-date-range.component.scss'],\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\n        {provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}\n    ],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-date-range' }\n})\nexport class SearchDateRangeComponent implements SearchWidget, OnInit {\n\n    from: FormControl;\n    to: FormControl;\n\n    form: FormGroup;\n    matcher = new LiveErrorStateMatcher();\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n    maxDate: any;\n    datePickerDateFormat = DEFAULT_FORMAT_DATE;\n\n    constructor(private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService) {\n    }\n\n    getFromValidationMessage(): string {\n        return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :\n            this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :\n            this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :\n            '';\n    }\n\n    getToValidationMessage(): string {\n        return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :\n            this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :\n            this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :\n            this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :\n            '';\n    }\n\n    ngOnInit() {\n        if (this.settings) {\n            this.datePickerDateFormat = this.settings.dateFormat || DEFAULT_FORMAT_DATE;\n        }\n        const theCustomDateAdapter = <MomentDateAdapter> <any> this.dateAdapter;\n        theCustomDateAdapter.overrideDisplayFormat = this.datePickerDateFormat;\n\n        this.userPreferencesService.select(UserPreferenceValues.Locale).subscribe((locale) => {\n            this.setLocale(locale);\n        });\n\n        const validators = Validators.compose([\n            Validators.required\n        ]);\n\n        this.from = new FormControl('', validators);\n        this.to = new FormControl('', validators);\n\n        this.form = new FormGroup({\n            from: this.from,\n            to: this.to\n        });\n\n        this.maxDate = this.dateAdapter.today().startOf('day');\n    }\n\n    apply(model: { from: string, to: string }, isValid: boolean) {\n        if (isValid && this.id && this.context && this.settings && this.settings.field) {\n            const start = moment(model.from).startOf('day').format();\n            const end = moment(model.to).endOf('day').format();\n\n            this.context.queryFragments[this.id] = `${this.settings.field}:['${start}' TO '${end}']`;\n            this.context.update();\n        }\n    }\n\n    reset() {\n        this.form.reset({\n            from: '',\n            to: ''\n        });\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n\n    onChangedHandler(event: any, formControl: FormControl) {\n        const inputValue = event.srcElement.value;\n\n        const formatDate = this.dateAdapter.parse(inputValue, this.datePickerDateFormat);\n        if (formatDate && formatDate.isValid()) {\n            formControl.setValue(formatDate);\n        } else if (formatDate) {\n            formControl.setErrors({\n                'invalidOnChange': true\n            });\n        } else {\n            formControl.setErrors({\n                'required': true\n            });\n        }\n    }\n\n    setLocale(locale) {\n        this.dateAdapter.setLocale(locale);\n        moment.locale(locale);\n    }\n\n    hasParseError(formControl) {\n        return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;\n    }\n\n    forcePlaceholder(event: any) {\n        event.srcElement.click();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Type } from '@angular/core';\nimport { SearchTextComponent } from '../search-text/search-text.component';\nimport { SearchRadioComponent } from '../search-radio/search-radio.component';\nimport { SearchSliderComponent } from '../search-slider/search-slider.component';\nimport { SearchNumberRangeComponent } from '../search-number-range/search-number-range.component';\nimport { SearchCheckListComponent } from '../search-check-list/search-check-list.component';\nimport { SearchDateRangeComponent } from '../search-date-range/search-date-range.component';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SearchFilterService {\n\n    /**\n     * Contains string-to-type mappings for registered widgets.\n     */\n    widgets: { [id: string]: Type<{}> } = {\n        'text': SearchTextComponent,\n        'radio': SearchRadioComponent,\n        'slider': SearchSliderComponent,\n        'number-range': SearchNumberRangeComponent,\n        'check-list': SearchCheckListComponent,\n        'date-range': SearchDateRangeComponent\n    };\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input } from '@angular/core';\nimport { SearchFilterComponent } from '../../components/search-filter/search-filter.component';\n\n@Component({\n    selector: 'adf-search-chip-list',\n    templateUrl: './search-chip-list.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-chip-list' }\n})\nexport class SearchChipListComponent {\n\n    /** Search filter to supply the data for the chips. */\n    @Input()\n    searchFilter: SearchFilterComponent;\n\n    /** Flag used to enable the display of a clear-all-filters button. */\n    @Input()\n    clearAll: boolean = false;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchSortingDefinition } from '../../search-sorting-definition.interface';\n\n@Component({\n    selector: 'adf-search-sorting-picker',\n    templateUrl: './search-sorting-picker.component.html',\n    styleUrls: ['./search-sorting-picker.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-sorting-picker' }\n})\nexport class SearchSortingPickerComponent implements OnInit {\n\n    options: SearchSortingDefinition[] = [];\n    value: string;\n    ascending: boolean;\n\n    constructor(private queryBuilder: SearchQueryBuilderService) {}\n\n    ngOnInit() {\n        this.options = this.queryBuilder.getSortingOptions();\n\n        const primary = this.queryBuilder.getPrimarySorting();\n        if (primary) {\n            this.value = primary.key;\n            this.ascending = primary.ascending;\n        }\n    }\n\n    onValueChanged(key: string) {\n        this.value = key;\n        this.ascending = this.getSortingOrder();\n        this.applySorting();\n    }\n\n    onSortingChanged(ascending: boolean) {\n        this.ascending = ascending;\n        this.applySorting();\n    }\n\n    private findOptionByKey(key: string): SearchSortingDefinition {\n        if (key) {\n            return this.options.find((opt) => opt.key === key);\n        }\n        return null;\n    }\n\n    private applySorting() {\n        const option = this.findOptionByKey(this.value);\n        if (option) {\n            this.queryBuilder.sorting = [{\n                ...option,\n                ascending: this.ascending\n            }];\n            this.queryBuilder.update();\n        }\n    }\n\n    private getSortingOrder(): boolean {\n        const option = this.findOptionByKey(this.value);\n        if (option) {\n            return option.ascending;\n        }\n\n        return this.queryBuilder.getPrimarySorting().ascending;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewChild, ViewContainerRef, OnInit, OnDestroy, ComponentRef, ComponentFactoryResolver } from '@angular/core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterService } from '../search-filter/search-filter.service';\n\n@Component({\n    selector: 'adf-search-widget-container',\n    template: '<div #content></div>'\n})\nexport class SearchWidgetContainerComponent implements OnInit, OnDestroy {\n\n    @ViewChild('content', { read: ViewContainerRef })\n    content: ViewContainerRef;\n\n    @Input()\n    id: string;\n\n    @Input()\n    selector: string;\n\n    @Input()\n    settings: any;\n\n    @Input()\n    config: any;\n\n    private componentRef: ComponentRef<any>;\n\n    constructor(\n        private searchFilterService: SearchFilterService,\n        private queryBuilder: SearchQueryBuilderService,\n        private componentFactoryResolver: ComponentFactoryResolver) {\n    }\n\n    ngOnInit() {\n        const componentType = this.searchFilterService.widgets[this.selector];\n        if (componentType) {\n            const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n            if (factory) {\n                this.content.clear();\n                this.componentRef = this.content.createComponent(factory, 0);\n                this.setupWidget(this.componentRef);\n            }\n        }\n    }\n\n    private setupWidget(ref: ComponentRef<any>) {\n        if (ref && ref.instance) {\n            ref.instance.id = this.id;\n            ref.instance.settings = { ...this.settings };\n            ref.instance.context = this.queryBuilder;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n            this.componentRef = null;\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { SearchTriggerDirective } from './components/search-trigger.directive';\n\nimport { SearchControlComponent } from './components/search-control.component';\nimport { SearchComponent } from './components/search.component';\nimport { EmptySearchResultComponent } from './components/empty-search-result.component';\nimport { SearchWidgetContainerComponent } from './components/search-widget-container/search-widget-container.component';\nimport { SearchFilterComponent } from './components/search-filter/search-filter.component';\nimport { SearchChipListComponent } from './components/search-chip-list/search-chip-list.component';\nimport { SearchTextComponent } from './components/search-text/search-text.component';\nimport { SearchRadioComponent } from './components/search-radio/search-radio.component';\nimport { SearchSliderComponent } from './components/search-slider/search-slider.component';\nimport { SearchNumberRangeComponent } from './components/search-number-range/search-number-range.component';\nimport { SearchCheckListComponent } from './components/search-check-list/search-check-list.component';\nimport { SearchDateRangeComponent } from './components/search-date-range/search-date-range.component';\nimport { SearchSortingPickerComponent } from './components/search-sorting-picker/search-sorting-picker.component';\n\nexport const ALFRESCO_SEARCH_DIRECTIVES: any[] = [\n    SearchComponent,\n    SearchControlComponent,\n    SearchTriggerDirective,\n    EmptySearchResultComponent,\n    SearchFilterComponent,\n    SearchChipListComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent,\n        SearchSortingPickerComponent\n    ],\n    exports: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent,\n        SearchSortingPickerComponent\n    ],\n    entryComponents: [\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent\n    ]\n})\nexport class SearchModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { SitesService, LogService } from '@alfresco/adf-core';\nimport { SitePaging, SiteEntry } from '@alfresco/js-api';\nimport { MatSelect } from '@angular/material';\n\nexport enum Relations {\n    Members = 'members',\n    Containers = 'containers'\n}\n\n@Component({\n    selector: 'adf-sites-dropdown',\n    styleUrls: ['./sites-dropdown.component.scss'],\n    templateUrl: './sites-dropdown.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-sites-dropdown' }\n})\nexport class DropdownSitesComponent implements OnInit {\n\n    /** Hide the \"My Files\" option. */\n    @Input()\n    hideMyFiles: boolean = false;\n\n    /** A custom list of sites to be displayed by the dropdown. If no value\n     * is given, the sites of the current user are displayed by default. A\n     * list of objects only with properties 'title' and 'guid' is enough to\n     * be able to display the dropdown.\n     */\n    @Input()\n    siteList: SitePaging = null;\n\n    /** Id of the selected site */\n    @Input()\n    value: string = null;\n\n    /** Text or a translation key to act as a placeholder. Default value is the\n     * key \"DROPDOWN.PLACEHOLDER_LABEL\".\n     */\n    @Input()\n    placeholder: string = 'DROPDOWN.PLACEHOLDER_LABEL';\n\n    /** Filter for the results of the sites query. Possible values are\n     * \"members\" and \"containers\". When \"members\" is used, the site list\n     * will be restricted to the sites that the user is a member of.\n     */\n    @Input()\n    relations: string;\n\n    /** Emitted when the user selects a site. When the default option is selected,\n     * an empty model is emitted.\n     */\n    @Output()\n    change: EventEmitter<SiteEntry> = new EventEmitter();\n\n    @ViewChild('siteSelect')\n    siteSelect: MatSelect;\n\n    private loading = true;\n    private skipCount = 0;\n    private readonly MAX_ITEMS = 50;\n    private readonly ITEM_HEIGHT = 45;\n    private readonly ITEM_HEIGHT_TO_WAIT_BEFORE_LOAD_NEXT = (this.ITEM_HEIGHT * (this.MAX_ITEMS / 2));\n\n    selected: SiteEntry = null;\n\n    public MY_FILES_VALUE = '-my-';\n\n    constructor(private sitesService: SitesService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        this.siteSelect.openedChange.subscribe(() => {\n            if (this.siteSelect.panelOpen) {\n                this.siteSelect.panel.nativeElement.addEventListener('scroll', (event) => this.loadAllOnScroll(event));\n            }\n        });\n\n        if (!this.siteList) {\n            this.loadSiteList();\n        }\n    }\n\n    loadAllOnScroll(event) {\n        if (this.isInfiniteScrollingEnabled() && this.isScrollInNextFetchArea(event)) {\n            this.loading = true;\n            this.loadSiteList();\n        }\n    }\n\n    isScrollInNextFetchArea(event) {\n        return event.target.scrollTop >= (event.target.scrollHeight - event.target.offsetHeight - this.ITEM_HEIGHT_TO_WAIT_BEFORE_LOAD_NEXT);\n    }\n\n    selectedSite(event: any) {\n        this.change.emit(event.value);\n    }\n\n    private loadSiteList() {\n        const extendedOptions: any = {\n            skipCount: this.skipCount,\n            maxItems: this.MAX_ITEMS\n        };\n\n        this.skipCount += this.MAX_ITEMS;\n\n        if (this.relations) {\n            extendedOptions.relations = [this.relations];\n        }\n\n        this.sitesService.getSites(extendedOptions).subscribe((sitePaging: SitePaging) => {\n\n                if (!this.siteList) {\n                    this.siteList = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;\n\n                    if (!this.hideMyFiles) {\n                        const siteEntry = new SiteEntry({\n                            entry: {\n                                id: '-my-',\n                                guid: '-my-',\n                                title: 'DROPDOWN.MY_FILES_OPTION'\n                            }\n                        });\n\n                        this.siteList.list.entries.unshift(siteEntry);\n\n                        if (!this.value) {\n                            this.value = '-my-';\n                        }\n                    }\n\n                } else {\n                    const siteList: SitePaging = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;\n\n                    this.siteList.list.entries = this.siteList.list.entries.concat(siteList.list.entries);\n                    this.siteList.list.pagination = sitePaging.list.pagination;\n                }\n\n                this.selected = this.siteList.list.entries.find((site: SiteEntry) => site.entry.id === this.value);\n\n                this.loading = false;\n            },\n            (error) => {\n                this.logService.error(error);\n            });\n    }\n\n    showLoading(): boolean {\n        return this.loading && (this.siteList && this.siteList.list.pagination && this.siteList.list.pagination.hasMoreItems);\n    }\n\n    isInfiniteScrollingEnabled(): boolean {\n        return !this.loading && (this.siteList && this.siteList.list.pagination && this.siteList.list.pagination.hasMoreItems);\n    }\n\n    private filteredResultsByMember(sites: SitePaging): SitePaging {\n        const loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();\n        sites.list.entries = sites.list.entries.filter((site) => this.isCurrentUserMember(site, loggedUserName));\n        return sites;\n    }\n\n    private isCurrentUserMember(site, loggedUserName): boolean {\n        return site.entry.visibility === 'PUBLIC' ||\n            !!site.relations.members.list.entries.find((member) => {\n                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();\n            });\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DropdownSitesComponent } from './sites-dropdown.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        DropdownSitesComponent\n    ],\n    declarations: [\n        DropdownSitesComponent\n    ]\n})\nexport class SitesDropdownModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { Node, PathElementEntity } from '@alfresco/js-api';\nimport { DocumentListComponent } from '../document-list';\n\n@Component({\n    selector: 'adf-breadcrumb',\n    templateUrl: './breadcrumb.component.html',\n    styleUrls: ['./breadcrumb.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-breadcrumb'\n    }\n})\nexport class BreadcrumbComponent implements OnInit, OnChanges {\n\n    /** Active node, builds UI based on folderNode.path.elements collection. */\n    @Input()\n    folderNode: Node = null;\n\n    /** (optional) Name of the root element of the breadcrumb. You can use\n     * this property to rename \"Company Home\" to \"Personal Files\" for\n     * example. You can use an i18n resource key for the property value.\n     */\n    @Input()\n    root: string = null;\n\n    /** (optional) The id of the root element. You can use this property\n     * to set a custom element the breadcrumb should start with.\n     */\n    @Input()\n    rootId: string = null;\n\n    /** (optional) Document List component to operate with. The list will\n     * update when the breadcrumb is clicked.\n     */\n    @Input()\n    target: DocumentListComponent;\n\n    /** Transformation to be performed on the chosen/folder node before building\n     * the breadcrumb UI. Can be useful when custom formatting is needed for the\n     * breadcrumb. You can change the path elements from the node that are used to\n     * build the breadcrumb using this function.\n     */\n    @Input()\n    transform: (node) => any;\n\n    @ViewChild('dropdown')\n    dropdown: MatSelect;\n\n    /** Maximum number of nodes to display before wrapping them with a dropdown element.  */\n    @Input()\n    maxItems: number;\n\n    previousNodes: PathElementEntity[];\n    lastNodes: PathElementEntity[];\n\n    route: PathElementEntity[] = [];\n\n    get hasRoot(): boolean {\n        return !!this.root;\n    }\n\n    /** Emitted when the user clicks on a breadcrumb. */\n    @Output()\n    navigate = new EventEmitter<PathElementEntity>();\n\n    ngOnInit() {\n        this.transform = this.transform ? this.transform : null;\n\n        if (this.target) {\n            this.target.$folderNode.subscribe((folderNode: Node) => {\n                this.folderNode = folderNode;\n                this.recalculateNodes();\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.recalculateNodes();\n    }\n\n    protected recalculateNodes(): void {\n        const node: Node = this.transform ? this.transform(this.folderNode) : this.folderNode;\n\n        this.route = this.parseRoute(node);\n\n        if (this.maxItems && this.route.length > this.maxItems) {\n            this.lastNodes = this.route.slice(this.route.length - this.maxItems);\n            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);\n            this.previousNodes.reverse();\n        } else {\n            this.lastNodes = this.route;\n            this.previousNodes = null;\n        }\n    }\n\n    open(): void {\n        if (this.dropdown) {\n            this.dropdown.open();\n        }\n    }\n\n    hasPreviousNodes(): boolean {\n        return this.previousNodes ? true : false;\n    }\n\n    parseRoute(node: Node): PathElementEntity[] {\n        if (node && node.path) {\n            const route = <PathElementEntity[]> (node.path.elements || []).slice();\n\n            route.push(<PathElementEntity> {\n                id: node.id,\n                name: node.name,\n                node: node\n            });\n\n            const rootPos = this.getElementPosition(route, this.rootId);\n            if (rootPos > 0) {\n                route.splice(0, rootPos);\n            }\n\n            if (rootPos === -1 && this.rootId) {\n                route[0].id = this.rootId;\n            }\n\n            if (this.root) {\n                route[0].name = this.root;\n            }\n\n            return route;\n        }\n\n        return [];\n    }\n\n    private getElementPosition(route: PathElementEntity[], nodeId: string): number {\n        let position: number = -1;\n\n        if (route && route.length > 0 && nodeId) {\n            position = route.findIndex((el) => el.id === nodeId);\n        }\n\n        return position;\n    }\n\n    onRoutePathClick(route: PathElementEntity, event?: Event): void {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (route) {\n            this.navigate.emit(route);\n\n            if (this.target) {\n                this.target.navigateTo(route.id);\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { PathElementEntity, Node } from '@alfresco/js-api';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@Component({\n    selector: 'adf-dropdown-breadcrumb',\n    templateUrl: './dropdown-breadcrumb.component.html',\n    styleUrls: ['./dropdown-breadcrumb.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-dropdown-breadcrumb'\n    }\n})\nexport class DropdownBreadcrumbComponent extends BreadcrumbComponent implements OnChanges {\n\n    @ViewChild('dropdown')\n    dropdown: MatSelect;\n\n    currentNode: PathElementEntity;\n    previousNodes: PathElementEntity[];\n\n    /**\n     * Calculate the current and previous nodes from the route array\n     */\n    protected recalculateNodes(): void {\n        const node: Node = this.transform ? this.transform(this.folderNode) : this.folderNode;\n\n        this.route = this.parseRoute(node);\n        this.currentNode = this.route[this.route.length - 1];\n        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();\n    }\n\n    /**\n     * Opens the node picker menu\n     */\n    open(): void {\n        if (this.dropdown) {\n            this.dropdown.open();\n        }\n    }\n\n    /**\n     * Return if route has more than one element (means: we are not in the root directory)\n     */\n    hasPreviousNodes(): boolean {\n        return this.previousNodes.length > 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { BreadcrumbComponent } from './breadcrumb.component';\nimport { DropdownBreadcrumbComponent } from './dropdown-breadcrumb.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ],\n    declarations: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ]\n})\nexport class BreadcrumbModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation, SecurityContext } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n    selector: 'adf-confirm-dialog',\n    templateUrl: './confirm.dialog.html',\n    styleUrls: ['./confirm.dialog.scss'],\n    host: { 'class': 'adf-confirm-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ConfirmDialogComponent {\n\n    title: string;\n    message: string;\n    yesLabel: string;\n    noLabel: string;\n    thirdOptionLabel: string;\n    htmlContent: string;\n\n    constructor(@Inject(MAT_DIALOG_DATA) data, private sanitizer: DomSanitizer) {\n        data = data || {};\n        this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';\n        this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';\n        this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';\n        this.thirdOptionLabel = data.thirdOptionLabel;\n        this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';\n        this.htmlContent = data.htmlContent;\n    }\n\n    public sanitizedHtmlContent() {\n        return this.sanitizer.sanitize(SecurityContext.HTML, this.htmlContent);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, ContentService } from '@alfresco/adf-core';\nimport { Component, Input, OnChanges, ViewEncapsulation, EventEmitter, Output } from '@angular/core';\nimport { VersionsApi, Node, VersionEntry, VersionPaging } from '@alfresco/js-api';\nimport { MatDialog } from '@angular/material';\nimport { ConfirmDialogComponent } from '../dialogs/confirm.dialog';\n\n@Component({\n    selector: 'adf-version-list',\n    templateUrl: './version-list.component.html',\n    styleUrls: ['./version-list.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-version-list'\n    }\n})\nexport class VersionListComponent implements OnChanges {\n\n    private versionsApi: VersionsApi;\n    versions: VersionEntry[] = [];\n    isLoading = true;\n\n    /** The target node. */\n    @Input()\n    node: Node;\n\n    /** Toggles showing/hiding of comments */\n    @Input()\n    showComments = true;\n\n    /** Enable/disable downloading a version of the current node. */\n    @Input()\n    allowDownload = true;\n\n    /** Toggles showing/hiding of version actions */\n    @Input()\n    showActions = true;\n\n    /** Emitted when a version is restored */\n    @Output()\n    restored: EventEmitter<Node> = new EventEmitter<Node>();\n\n    /** Emitted when a version is deleted */\n    @Output()\n    deleted: EventEmitter<Node> = new EventEmitter<Node>();\n\n    constructor(private alfrescoApi: AlfrescoApiService,\n                private contentService: ContentService,\n                private dialog: MatDialog) {\n        this.versionsApi = this.alfrescoApi.versionsApi;\n    }\n\n    ngOnChanges() {\n        this.loadVersionHistory();\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'update') && this.versions.length > 1;\n    }\n\n    canDelete(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'delete') && this.versions.length > 1;\n    }\n\n    restore(versionId) {\n        if (this.canUpdate()) {\n            this.versionsApi\n                .revertVersion(this.node.id, versionId, { majorVersion: true, comment: '' })\n                .then(() =>\n                    this.alfrescoApi.nodesApi.getNodeInfo(\n                        this.node.id,\n                        { include: ['permissions', 'path', 'isFavorite', 'allowableOperations'] }\n                    )\n                )\n                .then((node) => this.onVersionRestored(node));\n        }\n    }\n\n    loadVersionHistory() {\n        this.isLoading = true;\n        this.versionsApi.listVersionHistory(this.node.id).then((versionPaging: VersionPaging) => {\n            this.versions = versionPaging.list.entries;\n            this.isLoading = false;\n        });\n    }\n\n    downloadVersion(versionId: string) {\n        if (this.allowDownload) {\n            const versionDownloadUrl = this.getVersionContentUrl(this.node.id, versionId, true);\n            this.downloadContent(versionDownloadUrl);\n        }\n    }\n\n    deleteVersion(versionId: string) {\n        if (this.canUpdate()) {\n            const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n                data: {\n                    title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',\n                    message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',\n                    yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',\n                    noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'\n                },\n                minWidth: '250px'\n            });\n\n            dialogRef.afterClosed().subscribe((result) => {\n                if (result === true) {\n                    this.alfrescoApi.versionsApi\n                        .deleteVersion(this.node.id, versionId)\n                        .then(() => this.onVersionDeleted(this.node));\n                }\n            });\n        }\n    }\n\n    onVersionDeleted(node: any) {\n        this.loadVersionHistory();\n        this.deleted.emit(node);\n    }\n\n    onVersionRestored(node: any) {\n        this.loadVersionHistory();\n        this.restored.emit(node);\n    }\n\n    private getVersionContentUrl(nodeId: string, versionId: string, attachment?: boolean) {\n        const nodeDownloadUrl = this.alfrescoApi.contentApi.getContentUrl(nodeId, attachment);\n        return nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');\n    }\n\n    downloadContent(url: string) {\n        if (url) {\n            const link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { VersionListComponent } from './version-list.component';\nimport { AppConfigService, ContentService, AlfrescoApiService } from '@alfresco/adf-core';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\n\n@Component({\n    selector: 'adf-version-manager',\n    templateUrl: './version-manager.component.html',\n    styleUrls: ['./version-manager.component.scss'],\n    animations: [\n        trigger('uploadToggle', [\n            state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),\n            state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),\n            transition('open => close', [\n                style({ visibility: 'hidden' }),\n                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')\n            ]),\n            transition('close => open', [\n                style({ visibility: 'visible' }),\n                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')\n            ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class VersionManagerComponent {\n\n    /** Target node to manage version history. */\n    @Input()\n    node: Node;\n\n    /** Toggles showing/hiding of comments. */\n    @Input()\n    showComments = true;\n\n    /** Enable/disable downloading a version of the current node. */\n    @Input()\n    allowDownload = true;\n\n    /** Emitted when a file is uploaded successfully. */\n    @Output()\n    uploadSuccess: EventEmitter<Node> = new EventEmitter<Node>();\n\n    /** Emitted when an error occurs during upload. */\n    @Output()\n    uploadError: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @ViewChild('versionList')\n    versionListComponent: VersionListComponent;\n\n    uploadState: string = 'close';\n\n    constructor(config: AppConfigService,\n                private contentService: ContentService,\n                private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    refresh(node: Node) {\n        this.alfrescoApiService.nodeUpdated.next(node);\n        this.versionListComponent.loadVersionHistory();\n        this.uploadSuccess.emit(node);\n        this.uploadState = 'close';\n    }\n\n    onUploadSuccess(event: any) {\n        this.alfrescoApiService.nodeUpdated.next(event.value.entry);\n        this.versionListComponent.loadVersionHistory();\n        this.uploadSuccess.emit(event.value.entry);\n        this.uploadState = 'close';\n    }\n\n    onUploadError(event: any) {\n        this.uploadError.emit(event);\n    }\n\n    onUploadCancel() {\n        this.uploadState = 'close';\n    }\n\n    toggleNewVersion() {\n        this.uploadState = this.uploadState === 'open' ? 'close' : 'open';\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'update');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-version-upload',\n    templateUrl: './version-upload.component.html',\n    styleUrls: ['./version-upload.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-version-upload' }\n})\nexport class VersionUploadComponent {\n\n    semanticVersion: string = 'minor';\n    comment: string;\n    uploadVersion: boolean = false;\n\n    @Input()\n    node: Node;\n\n    @Output()\n    success = new EventEmitter();\n\n    @Output()\n    error = new EventEmitter();\n\n    @Output()\n    cancel = new EventEmitter();\n\n    constructor(private contentService: ContentService) {\n    }\n\n    canUpload(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'update');\n    }\n\n    isMajorVersion(): boolean {\n        return this.semanticVersion === 'minor' ? false : true;\n    }\n\n    cancelUpload() {\n        this.cancel.emit();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { VersionUploadComponent } from './version-upload.component';\nimport { VersionManagerComponent } from './version-manager.component';\nimport { VersionListComponent } from './version-list.component';\nimport { UploadModule } from '../upload/upload.module';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild(),\n        UploadModule,\n        FormsModule\n    ],\n    exports: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent,\n        FormsModule\n    ],\n    declarations: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent\n    ]\n})\nexport class VersionManagerModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Input, ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { DataRow } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-name-location-cell',\n    template: `\n        <div class=\"adf-name-location-cell-name adf-datatable-cell-value\">{{ name }}</div>\n        <div class=\"adf-name-location-cell-location adf-datatable-cell-value\" [title]=\"path\">{{ path }}</div>\n    `,\n    styleUrls: ['./name-location-cell.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'adf-name-location-cell adf-datatable-content-cell' }\n})\nexport class NameLocationCellComponent implements OnInit {\n\n    name: string = '';\n    path: string = '';\n\n    @Input()\n    row: DataRow;\n\n    ngOnInit() {\n        if (this.row) {\n            this.name = this.row.getValue('name');\n\n            const fullPath = this.row.getValue('path');\n            if (fullPath) {\n                this.path = fullPath.name || '';\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodePaging } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\n\n/**\n * Internal service used by ContentNodeSelector component.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentNodeSelectorService {\n\n    constructor(private searchService: SearchService) {\n    }\n\n    /**\n     * Performs a search for content node selection\n     *\n     * @param searchTerm    The term to search for\n     * @param rootNodeId    The root is to start the search from\n     * @param skipCount     From where to start the loading\n     * @param maxItems      How many items to load\n     * @param [extraNodeIds]  List of extra node ids to search from. This last parameter is necessary when\n     * the rootNodeId is one of the supported aliases (e.g. '-my-', '-root-', '-mysites-', etc.)\n     * and search is not supported for that alias, but can be performed on its corresponding nodes.\n     */\n    public search(searchTerm: string, rootNodeId: string = null, skipCount: number = 0, maxItems: number = 25, extraNodeIds?: string[]): Observable<NodePaging> {\n\n        let extraParentFiltering = '';\n\n        if (extraNodeIds && extraNodeIds.length) {\n            extraNodeIds\n                .filter((id) => id !== rootNodeId)\n                .forEach((extraId) => {\n                    extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;\n                });\n        }\n\n        const parentFiltering = rootNodeId ? [{ query: `ANCESTOR:'workspace://SpacesStore/${rootNodeId}'${extraParentFiltering}` }] : [];\n\n        const defaultSearchNode: any = {\n            query: {\n                query: `${searchTerm}* OR name:${searchTerm}*`\n            },\n            include: ['path', 'allowableOperations'],\n            paging: {\n                maxItems: maxItems,\n                skipCount: skipCount\n            },\n            filterQueries: [\n                { query: \"TYPE:'cm:folder'\" },\n                { query: 'NOT cm:creator:System' },\n                ...parentFiltering\n            ],\n            scope: {\n                locations: ['nodes']\n            }\n        };\n\n        return this.searchService.searchByQueryBody(defaultSearchNode);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport {\n    HighlightDirective,\n    UserPreferencesService,\n    PaginationModel,\n    UserPreferenceValues,\n    InfinitePaginationComponent, PaginatedComponent\n} from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { Node, NodePaging, Pagination, SiteEntry, SitePaging } from '@alfresco/js-api';\nimport { DocumentListComponent } from '../document-list/components/document-list.component';\nimport { RowFilter } from '../document-list/data/row-filter.model';\nimport { ImageResolver } from '../document-list/data/image-resolver.model';\nimport { ContentNodeSelectorService } from './content-node-selector.service';\nimport { debounceTime } from 'rxjs/operators';\nimport { CustomResourcesService } from '../document-list/services/custom-resources.service';\nimport { ShareDataRow } from '../document-list';\n\nexport type ValidationFunction = (entry: Node) => boolean;\n\nconst defaultValidation = () => true;\n\n@Component({\n    selector: 'adf-content-node-selector-panel',\n    styleUrls: ['./content-node-selector-panel.component.scss'],\n    templateUrl: './content-node-selector-panel.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-node-selector-panel' }\n})\nexport class ContentNodeSelectorPanelComponent implements OnInit {\n\n    DEFAULT_PAGINATION: Pagination = new Pagination({\n        maxItems: 25,\n        skipCount: 0,\n        totalItems: 0,\n        hasMoreItems: false\n    });\n\n    /** Node ID of the folder currently listed. */\n    @Input()\n    currentFolderId: string = null;\n\n    /** Hide the \"My Files\" option added to the site list by default.\n     * See the [Sites Dropdown component](sites-dropdown.component.md)\n     * for more information.\n     */\n    @Input()\n    dropdownHideMyFiles: boolean = false;\n\n    /** Custom site for site dropdown. This is the same as the `siteList`.\n     * property of the Sites Dropdown component (see its doc page\n     * for more information).\n     */\n    @Input()\n    dropdownSiteList: SitePaging = null;\n\n    _rowFilter: RowFilter = defaultValidation;\n\n    /** Custom *where* filter function. See the\n     * Document List component\n     * for more information.\n     */\n    @Input()\n    where: string;\n\n    /**\n     * Custom row filter function. See the\n     * [Row Filter Model](row-filter.model.md) page\n     * for more information.\n     */\n    @Input()\n    set rowFilter(rowFilter: RowFilter) {\n        this.createRowFilter(rowFilter);\n    }\n\n    get rowFilter(): RowFilter {\n        return this._rowFilter;\n    }\n\n    _excludeSiteContent: string[] = [];\n\n    /** Custom list of site content componentIds.\n     * Used to filter out the corresponding items from the displayed nodes\n     */\n    @Input()\n    set excludeSiteContent(excludeSiteContent: string[]) {\n        this._excludeSiteContent = excludeSiteContent;\n        this.createRowFilter(this._rowFilter);\n    }\n\n    get excludeSiteContent(): string[] {\n        return this._excludeSiteContent;\n    }\n\n    /**\n     * Custom image resolver function. See the\n     * [Image Resolver Model](image-resolver.model.md) page\n     * for more information.\n     */\n    @Input()\n    imageResolver: ImageResolver = null;\n\n    /** Number of items shown per page in the list. */\n    @Input()\n    pageSize: number = this.DEFAULT_PAGINATION.maxItems;\n\n    /** Function used to decide if the selected node has permission to be selected.\n     * Default value is a function that always returns true.\n     */\n    @Input()\n    isSelectionValid: ValidationFunction = defaultValidation;\n\n    /** Transformation to be performed on the chosen/folder node before building the\n     * breadcrumb UI. Can be useful when custom formatting is needed for the breadcrumb.\n     * You can change the path elements from the node that are used to build the\n     * breadcrumb using this function.\n     */\n    @Input()\n    breadcrumbTransform: (node) => any;\n\n    /** Emitted when the user has chosen an item. */\n    @Output()\n    select: EventEmitter<Node[]> = new EventEmitter<Node[]>();\n\n    @ViewChild('documentList')\n    documentList: DocumentListComponent;\n\n    @ViewChild(HighlightDirective)\n    highlighter: HighlightDirective;\n\n    nodePaging: NodePaging | null = null;\n    siteId: null | string;\n    searchTerm: string = '';\n    showingSearchResults: boolean = false;\n    loadingSearchResults: boolean = false;\n    inDialog: boolean = false;\n    _chosenNode: Node = null;\n    folderIdToShow: string | null = null;\n    breadcrumbFolderTitle: string | null = null;\n\n    pagination: PaginationModel = this.DEFAULT_PAGINATION;\n\n    @ViewChild(InfinitePaginationComponent)\n    infinitePaginationComponent: InfinitePaginationComponent;\n\n    infiniteScroll: boolean = false;\n    debounceSearch: number = 200;\n    searchInput: FormControl = new FormControl();\n\n    target: PaginatedComponent;\n\n    constructor(private contentNodeSelectorService: ContentNodeSelectorService,\n                private customResourcesService: CustomResourcesService,\n                private userPreferencesService: UserPreferencesService) {\n        this.searchInput.valueChanges\n            .pipe(\n                debounceTime(this.debounceSearch)\n            )\n            .subscribe((searchValue) => {\n                this.search(searchValue);\n            });\n\n        this.userPreferencesService.select(UserPreferenceValues.PaginationSize).subscribe((pagSize) => {\n            this.pageSize = pagSize;\n        });\n\n    }\n\n    set chosenNode(value: Node) {\n        this._chosenNode = value;\n        let valuesArray = null;\n        if (value) {\n            valuesArray = [value];\n        }\n        this.select.next(valuesArray);\n    }\n\n    get chosenNode() {\n        return this._chosenNode;\n    }\n\n    ngOnInit() {\n        this.target = this.documentList;\n        this.folderIdToShow = this.currentFolderId;\n\n        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;\n        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;\n    }\n\n    private createRowFilter(filter?: RowFilter) {\n        if (!filter) {\n            filter = () => true;\n        }\n        this._rowFilter = (value: ShareDataRow, index: number, array: ShareDataRow[]) => {\n            return filter(value, index, array) &&\n                !this.isExcludedSiteContent(value);\n        };\n    }\n\n    private isExcludedSiteContent(row: ShareDataRow): boolean {\n        const entry = row.node.entry;\n        if (this._excludeSiteContent && this._excludeSiteContent.length &&\n            entry &&\n            entry.properties &&\n            entry.properties['st:componentId']) {\n            const excludedItem = this._excludeSiteContent.find(\n                (id: string) => entry.properties['st:componentId'] === id\n            );\n            return !!excludedItem;\n        }\n        return false;\n    }\n\n    /**\n     * Updates the site attribute and starts a new search\n     *\n     * @param chosenSite SiteEntry to search within\n     */\n    siteChanged(chosenSite: SiteEntry): void {\n        this.siteId = chosenSite.entry.guid;\n        this.setTitleIfCustomSite(chosenSite);\n        this.updateResults();\n\n    }\n\n    /**\n     * Updates the searchTerm attribute and starts a new search\n     *\n     * @param searchTerm string value to search against\n     */\n    search(searchTerm: string): void {\n        this.searchTerm = searchTerm;\n        this.updateResults();\n    }\n\n    /**\n     * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb\n     */\n    get breadcrumbFolderNode(): Node | null {\n        let folderNode: Node;\n\n        if (this.showingSearchResults && this.chosenNode) {\n            folderNode = this.chosenNode;\n        } else {\n            folderNode = this.documentList.folderNode;\n        }\n\n        return folderNode;\n    }\n\n    /**\n     * Clear the search input and reset to last folder node in which search was performed\n     */\n    clear(): void {\n        this.clearSearch();\n        this.folderIdToShow = this.siteId || this.currentFolderId;\n    }\n\n    /**\n     * Clear the search input and search related data\n     */\n    clearSearch() {\n        this.searchTerm = '';\n        this.nodePaging = null;\n        this.pagination.maxItems = this.pageSize;\n        this.chosenNode = null;\n        this.showingSearchResults = false;\n    }\n\n    /**\n     * Update the result list depending on the criteria\n     */\n    private updateResults(): void {\n        this.target = this.searchTerm.length > 0 ? null : this.documentList;\n\n        if (this.searchTerm.length === 0) {\n            this.clear();\n        } else {\n            this.startNewSearch();\n        }\n    }\n\n    /**\n     * Load the first page of a new search result\n     */\n    private startNewSearch(): void {\n        this.nodePaging = null;\n        this.pagination.maxItems = this.pageSize;\n        if (this.target) {\n            this.infinitePaginationComponent.reset();\n        }\n        this.chosenNode = null;\n        this.folderIdToShow = null;\n        this.querySearch();\n    }\n\n    /**\n     * Perform the call to searchService with the proper parameters\n     */\n    private querySearch(): void {\n        this.loadingSearchResults = true;\n\n        if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {\n            this.customResourcesService.getCorrespondingNodeIds(this.siteId)\n                .subscribe((nodeIds) => {\n                        this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.pagination.skipCount, this.pagination.maxItems, nodeIds)\n                            .subscribe(this.showSearchResults.bind(this));\n                    },\n                    () => {\n                        this.showSearchResults({ list: { entries: [] } });\n                    });\n        } else {\n            this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.pagination.skipCount, this.pagination.maxItems)\n                .subscribe(this.showSearchResults.bind(this));\n        }\n    }\n\n    /**\n     * Show the results of the search\n     *\n     * @param results Search results\n     */\n    private showSearchResults(nodePaging: NodePaging): void {\n        this.showingSearchResults = true;\n        this.loadingSearchResults = false;\n\n        this.nodePaging = nodePaging;\n    }\n\n    /**\n     * Sets showingSearchResults state to be able to differentiate between search results or folder results\n     */\n    onFolderChange(): void {\n        this.showingSearchResults = false;\n        this.infiniteScroll = false;\n        this.clearSearch();\n    }\n\n    /**\n     * Attempts to set the currently loaded node\n     */\n    onFolderLoaded(): void {\n        if (!this.showingSearchResults) {\n            this.attemptNodeSelection(this.documentList.folderNode);\n        }\n    }\n\n    /**\n     * Returns whether breadcrumb has to be shown or not\n     */\n    showBreadcrumbs() {\n        return !this.showingSearchResults || this.chosenNode;\n    }\n\n    /**\n     * Loads the next batch of search results\n     *\n     * @param event Pagination object\n     */\n    getNextPageOfSearch(pagination: Pagination): void {\n        this.infiniteScroll = true;\n        this.pagination = pagination;\n\n        if (this.searchTerm.length > 0) {\n            this.querySearch();\n        }\n    }\n\n    /**\n     * Selects node as chosen if it has the right permission, clears the selection otherwise\n     *\n     * @param entry\n     */\n    private attemptNodeSelection(entry: Node): void {\n        if (entry && this.isSelectionValid(entry)) {\n            this.chosenNode = entry;\n        } else {\n            this.resetChosenNode();\n        }\n    }\n\n    /**\n     * Clears the chosen node\n     */\n    resetChosenNode(): void {\n        this.chosenNode = null;\n    }\n\n    /**\n     * Invoked when user selects a node\n     *\n     * @param event CustomEvent for node-select\n     */\n    onNodeSelect(event: any): void {\n        this.attemptNodeSelection(event.detail.node.entry);\n    }\n\n    setTitleIfCustomSite(site: SiteEntry) {\n        if (this.customResourcesService.isCustomSource(site.entry.guid)) {\n            this.breadcrumbFolderTitle = site.entry.title;\n        } else {\n            this.breadcrumbFolderTitle = null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { ContentNodeSelectorPanelComponent } from './content-node-selector-panel.component';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { SitesDropdownModule } from '../site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from '../breadcrumb/breadcrumb.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { DocumentListModule } from '../document-list/document-list.module';\nimport { NameLocationCellComponent } from './name-location-cell/name-location-cell.component';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        DocumentListModule\n    ],\n    exports: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ],\n    entryComponents: [\n        ContentNodeSelectorPanelComponent,\n        ContentNodeSelectorComponent\n    ],\n    declarations: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ]\n})\nexport class ContentNodeSelectorModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormControl } from '@angular/forms';\n\nconst I18N_ERRORS_PATH = 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS';\n\nexport function forbidSpecialCharacters({ value }: FormControl) {\n    const specialCharacters: RegExp = /([\\*\\\"\\<\\>\\\\\\/\\?\\:\\|])/;\n    const isValid: boolean = !specialCharacters.test(value);\n\n    return (isValid) ? null : {\n        message: `${I18N_ERRORS_PATH}.SPECIAL_CHARACTERS`\n    };\n}\n\nexport function forbidEndingDot({ value }: FormControl) {\n    const isValid: boolean = ((value || '').trim().split('').pop() !== '.');\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ENDING_DOT`\n    };\n}\n\nexport function forbidOnlySpaces({ value }: FormControl) {\n    const isValid: boolean = !!((value || '')).trim();\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ONLY_SPACES`\n    };\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from 'rxjs';\n\nimport { Component, Inject, OnInit, Optional, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\nimport { Node } from '@alfresco/js-api';\nimport { NodesApiService, TranslationService } from '@alfresco/adf-core';\n\nimport { forbidEndingDot, forbidOnlySpaces, forbidSpecialCharacters } from './folder-name.validators';\n\n@Component({\n    selector: 'adf-folder-dialog',\n    styleUrls: ['./folder.dialog.scss'],\n    templateUrl: './folder.dialog.html'\n})\nexport class FolderDialogComponent implements OnInit {\n\n    form: FormGroup;\n\n    folder: Node = null;\n\n    /** Emitted when the edit/create folder give error for example a folder with same name already exist\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the edit/create folder is successfully created/modified\n     */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<Node>();\n\n    editTitle = 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE';\n    createTitle = 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE';\n    nodeType = 'cm:folder';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dialog: MatDialogRef<FolderDialogComponent>,\n        private nodesApi: NodesApiService,\n        private translation: TranslationService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {\n        if (data) {\n            this.editTitle = data.editTitle || this.editTitle;\n            this.createTitle = data.createTitle || this.createTitle;\n            this.nodeType = data.nodeType || this.nodeType;\n        }\n    }\n\n    get editing(): boolean {\n        return !!this.data.folder;\n    }\n\n    ngOnInit() {\n        const { folder } = this.data;\n        let name = '';\n        let description = '';\n\n        if (folder) {\n            const { properties } = folder;\n\n            name = folder.name || '';\n            description = properties ? properties['cm:description'] : '';\n        }\n\n        const validators = {\n            name: [\n                Validators.required,\n                forbidSpecialCharacters,\n                forbidEndingDot,\n                forbidOnlySpaces\n            ]\n        };\n\n        this.form = this.formBuilder.group({\n            name: [ name, validators.name ],\n            description: [ description ]\n        });\n    }\n\n    get name(): string {\n        const { name } = this.form.value;\n\n        return (name || '').trim();\n    }\n\n    get description(): string {\n        const { description } = this.form.value;\n\n        return (description || '').trim();\n    }\n\n    private get properties(): any {\n        const { name: title, description } = this;\n\n        return {\n            'cm:title': title,\n            'cm:description': description\n        };\n    }\n\n    private create(): Observable<Node> {\n        const { name, properties, nodeType, nodesApi, data: { parentNodeId} } = this;\n        return nodesApi.createFolder(parentNodeId, { name, properties, nodeType });\n    }\n\n    private edit(): Observable<Node> {\n        const { name, properties, nodesApi, data: { folder: { id: nodeId }} } = this;\n        return nodesApi.updateNode(nodeId, { name, properties });\n    }\n\n    submit() {\n        const { form, dialog, editing } = this;\n\n        if (!form.valid) { return; }\n\n        (editing ? this.edit() : this.create())\n            .subscribe(\n                (folder: Node) => {\n                    this.success.emit(folder);\n                    dialog.close(folder);\n                },\n                (error) => this.handleError(error)\n            );\n    }\n\n    handleError(error: any): any {\n        let errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';\n\n        try {\n            const { error: { statusCode } } = JSON.parse(error.message);\n\n            if (statusCode === 409) {\n                errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';\n            }\n        } catch (err) { /* Do nothing, keep the original message */ }\n\n        this.error.emit(this.translation.instant(errorMessage));\n\n        return error;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable, Subject, from } from 'rxjs';\nimport {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl,\n  AbstractControl\n} from '@angular/forms';\nimport { MatDialogRef } from '@angular/material';\nimport { SiteBodyCreate, SiteEntry, SitePaging } from '@alfresco/js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { debounceTime, mergeMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'adf-library-dialog',\n  styleUrls: ['./library.dialog.scss'],\n  templateUrl: './library.dialog.html',\n  encapsulation: ViewEncapsulation.None,\n  host: { class: 'adf-library-dialog' }\n})\nexport class LibraryDialogComponent implements OnInit, OnDestroy {\n  /** Emitted when an error occurs. */\n  @Output()\n  error: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Emitted when the new library is created successfully. The\n   * event parameter is a SiteEntry object with the details of the\n   * newly-created library.\n   */\n  @Output()\n  success: EventEmitter<any> = new EventEmitter<any>();\n\n  onDestroy$: Subject<boolean> = new Subject<boolean>();\n\n  createTitle = 'LIBRARY.DIALOG.CREATE_TITLE';\n  libraryTitleExists = false;\n  form: FormGroup;\n  visibilityOption: any;\n  visibilityOptions = [\n    { value: 'PUBLIC', label: 'LIBRARY.VISIBILITY.PUBLIC', disabled: false },\n    { value: 'PRIVATE', label: 'LIBRARY.VISIBILITY.PRIVATE', disabled: false },\n    {\n      value: 'MODERATED',\n      label: 'LIBRARY.VISIBILITY.MODERATED',\n      disabled: false\n    }\n  ];\n\n  constructor(\n    private alfrescoApiService: AlfrescoApiService,\n    private formBuilder: FormBuilder,\n    private dialog: MatDialogRef<LibraryDialogComponent>\n  ) {}\n\n  ngOnInit() {\n    const validators = {\n      id: [\n        Validators.required,\n        Validators.maxLength(72),\n        this.forbidSpecialCharacters\n      ],\n      title: [\n        Validators.required,\n        this.forbidOnlySpaces,\n        Validators.minLength(2),\n        Validators.maxLength(256)\n      ],\n      description: [Validators.maxLength(512)]\n    };\n\n    this.form = this.formBuilder.group({\n      title: [null, validators.title],\n      id: [null, validators.id, this.createSiteIdValidator()],\n      description: ['', validators.description]\n    });\n\n    this.visibilityOption = this.visibilityOptions[0].value;\n\n    this.form.controls['title'].valueChanges\n      .pipe(\n        debounceTime(300),\n        mergeMap(\n            (title) => this.checkLibraryNameExists(title),\n            (title) => title\n        ),\n        takeUntil(this.onDestroy$)\n      )\n      .subscribe((title: string) => {\n        if (!this.form.controls['id'].dirty && this.canGenerateId(title)) {\n          this.form.patchValue({ id: this.sanitize(title.trim()) });\n          this.form.controls['id'].markAsTouched();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this.onDestroy$.next(true);\n    this.onDestroy$.complete();\n  }\n\n  get title(): string {\n    const { title } = this.form.value;\n\n    return (title || '').trim();\n  }\n\n  get id(): string {\n    const { id } = this.form.value;\n\n    return (id || '').trim();\n  }\n\n  get description(): string {\n    const { description } = this.form.value;\n\n    return (description || '').trim();\n  }\n\n  get visibility(): string {\n    return this.visibilityOption || '';\n  }\n\n  submit() {\n    const { form, dialog } = this;\n\n    if (!form.valid) {\n      return;\n    }\n\n    this.create().subscribe(\n      (node: SiteEntry) => {\n        this.success.emit(node);\n        dialog.close(node);\n      },\n      (error) => this.handleError(error)\n    );\n  }\n\n  visibilityChangeHandler(event) {\n    this.visibilityOption = event.value;\n  }\n\n  private create(): Observable<SiteEntry> {\n    const { title, id, description, visibility } = this;\n    const siteBody = <SiteBodyCreate> {\n      id,\n      title,\n      description,\n      visibility\n    };\n\n    return from(this.alfrescoApiService.sitesApi.createSite(siteBody));\n  }\n\n  private sanitize(input: string) {\n    return input.replace(/[\\s\\s]+/g, '-').replace(/[^A-Za-z0-9-]/g, '');\n  }\n\n  private canGenerateId(title) {\n    return Boolean(title.replace(/[^A-Za-z0-9-]/g, '').length);\n  }\n\n  private handleError(error: any): any {\n      try {\n          const {\n              error: { statusCode }\n          } = JSON.parse(error.message);\n\n          if (statusCode === 409) {\n              this.form.controls['id'].setErrors({\n                  message: 'LIBRARY.ERRORS.CONFLICT'\n              });\n          }\n      } catch (error) {\n\n      }\n\n      return error;\n  }\n\n  private async checkLibraryNameExists(libraryTitle: string) {\n    let entries = [];\n\n    try {\n        entries = (await this.findLibraryByTitle(libraryTitle)).list.entries;\n    } catch {\n        entries = [];\n    }\n\n    if (entries.length) {\n      this.libraryTitleExists = entries[0].entry.title.toLowerCase() === libraryTitle.toLowerCase();\n    } else {\n      this.libraryTitleExists = false;\n    }\n  }\n\n  private async findLibraryByTitle(libraryTitle: string): Promise<SitePaging> {\n    return this.alfrescoApiService\n      .getInstance()\n      .core.queriesApi.findSites(libraryTitle, {\n        maxItems: 1,\n        fields: ['title']\n      });\n  }\n\n  private forbidSpecialCharacters({ value }: FormControl) {\n    if (value === null || value.length === 0) {\n      return null;\n    }\n\n    const validCharacters: RegExp = /[^A-Za-z0-9-]/;\n    const isValid: boolean = !validCharacters.test(value);\n\n    return isValid\n      ? null\n      : {\n          message: 'LIBRARY.ERRORS.ILLEGAL_CHARACTERS'\n        };\n  }\n\n  private forbidOnlySpaces({ value }: FormControl) {\n    if (value === null || value.length === 0) {\n      return null;\n    }\n\n    const isValid: boolean = !!(value || '').trim();\n\n    return isValid\n      ? null\n      : {\n          message: 'LIBRARY.ERRORS.ONLY_SPACES'\n        };\n  }\n\n  private createSiteIdValidator() {\n    let timer;\n\n    return (control: AbstractControl) => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      return new Promise((resolve) => {\n        timer = setTimeout(() => {\n          return from(\n            this.alfrescoApiService.sitesApi.getSite(control.value)\n          ).subscribe(\n            () => resolve({ message: 'LIBRARY.ERRORS.EXISTENT_SITE' }),\n            () => resolve(null)\n          );\n        }, 300);\n      });\n    };\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { FolderDialogComponent } from './folder.dialog';\nimport { NodeLockDialogComponent } from './node-lock.dialog';\nimport { ConfirmDialogComponent } from './confirm.dialog';\nimport { MatDatetimepickerModule } from '@mat-datetimepicker/core';\nimport { MatMomentDatetimeModule } from '@mat-datetimepicker/moment';\nimport { LibraryDialogComponent } from './library/library.dialog';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild(),\n        FormsModule,\n        ReactiveFormsModule,\n        MatMomentDatetimeModule,\n        MatDatetimepickerModule\n    ],\n    declarations: [\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent,\n        LibraryDialogComponent\n    ],\n    exports: [\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent,\n        LibraryDialogComponent\n    ],\n    entryComponents: [\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent,\n        LibraryDialogComponent\n    ]\n})\nexport class DialogModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { Node } from '@alfresco/js-api';\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\nconst DEFAULT_FOLDER_PARENT_ID = '-my-';\n\n@Directive({\n    selector: '[adf-create-folder]'\n})\nexport class FolderCreateDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Parent folder where the new folder will be located after creation. */\n    @Input('adf-create-folder')\n    parentNodeId: string = DEFAULT_FOLDER_PARENT_ID;\n\n    /** Title of folder creation dialog. */\n    @Input()\n    title: string = null;\n\n    /** Type of node to create. */\n    @Input()\n    nodeType = 'cm:folder';\n\n    /** Emitted when an error occurs (eg, a folder with same name already exists). */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the folder is created successfully. */\n    @Output()\n    success: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.openDialog();\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderCreateDirective;\n        const { parentNodeId, title: createTitle, nodeType } = this;\n\n        return {\n            data: { parentNodeId, createTitle, nodeType },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.componentInstance.success.subscribe((node: Node) => {\n            this.success.emit(node);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: Node) => {\n            if (node) {\n                content.folderCreate.next(node);\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\n\nimport { Node } from '@alfresco/js-api';\n\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Directive({\n    selector: '[adf-edit-folder]'\n})\nexport class FolderEditDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Folder node to edit. */\n    @Input('adf-edit-folder')\n    folder: Node;\n\n    /** Emitted when an error occurs (eg, a folder with same name already exists). */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Title of folder edit dialog. */\n    @Input()\n    title: string = null;\n\n    /** Emitted when the folder has been edited successfully. */\n    @Output()\n    success: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        if (this.folder) {\n            this.openDialog();\n        }\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public elementRef: ElementRef,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderEditDirective;\n        const { folder } = this;\n\n        return {\n            data: {\n                folder,\n                editTitle: this.title\n            },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.componentInstance.success.subscribe((node: Node) => {\n            this.success.emit(node);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: Node) => {\n            if (node) {\n                content.folderEdit.next(node);\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { FolderCreateDirective } from './folder-create.directive';\nimport { FolderEditDirective } from './folder-edit.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ],\n    exports: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ]\n})\nexport class FolderDirectiveModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-content-metadata-card',\n    templateUrl: './content-metadata-card.component.html',\n    styleUrls: ['./content-metadata-card.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-metadata-card' }\n})\nexport class ContentMetadataCardComponent implements OnChanges {\n    /** (required) The node entity to fetch metadata about */\n    @Input()\n    node: Node;\n\n    /** (optional) This flag displays/hides empty metadata\n     * fields.\n     */\n    @Input()\n    displayEmpty: boolean = false;\n\n    /** (optional) This flag displays desired aspect when open for the first time\n     * fields.\n     */\n    @Input()\n    displayAspect: string = null;\n\n    /** (required) Name of the metadata preset, which defines aspects\n     * and their properties.\n     */\n    @Input()\n    preset: string;\n\n    /** (optional) This flag sets the metadata in read only mode\n     * preventing changes.\n     */\n    @Input()\n    readOnly = false;\n\n    /** (optional) This flag allows the component to display more\n     * than one accordion at a time.\n     */\n    @Input()\n    multi = false;\n\n    private _displayDefaultProperties: boolean = true;\n\n    /** (optional) This flag displays/hides the metadata\n     * properties.\n     */\n    @Input()\n    set displayDefaultProperties(value: boolean) {\n        this._displayDefaultProperties = value;\n        this.onDisplayDefaultPropertiesChange();\n    }\n\n    get displayDefaultProperties(): boolean {\n        return this._displayDefaultProperties;\n    }\n\n    editable: boolean = false;\n\n    expanded: boolean;\n\n    constructor(private contentService: ContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.displayAspect && changes.displayAspect.currentValue) {\n            this.expanded = true;\n        }\n    }\n\n    onDisplayDefaultPropertiesChange(): void {\n        this.expanded = !this._displayDefaultProperties;\n    }\n\n    toggleEdit(): void {\n        this.editable = !this.editable;\n    }\n\n    toggleExpanded(): void {\n        this.expanded = !this.expanded;\n    }\n\n    hasAllowableOperations() {\n        return this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATE);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { CardViewDateItemModel, CardViewTextItemModel, FileSizePipe } from '@alfresco/adf-core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BasicPropertiesService {\n\n    constructor(private fileSizePipe: FileSizePipe) {\n    }\n\n    getProperties(node: Node) {\n\n        const sizeInBytes = node.content ? node.content.sizeInBytes : '',\n            mimeTypeName = node.content ? node.content.mimeTypeName : '',\n            author = node.properties ? node.properties['cm:author'] : '',\n            description = node.properties ? node.properties['cm:description'] : '',\n            title = node.properties ? node.properties['cm:title'] : '';\n\n        return [\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.NAME',\n                value: node.name,\n                key: 'name',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.TITLE',\n                value: title,\n                key: 'properties.cm:title',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.CREATOR',\n                value: node.createdByUser.displayName,\n                key: 'createdByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.CREATED_DATE',\n                value: node.createdAt,\n                key: 'createdAt',\n                editable: false,\n                format: 'mediumDate'\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.SIZE',\n                value: sizeInBytes,\n                key: 'content.sizeInBytes',\n                pipes: [{ pipe: this.fileSizePipe }],\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIER',\n                value: node.modifiedByUser.displayName,\n                key: 'modifiedByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',\n                value: node.modifiedAt,\n                key: 'modifiedAt',\n                editable: false,\n                format: 'mediumDate'\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MIMETYPE',\n                value: mimeTypeName,\n                key: 'content.mimeTypeName',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.AUTHOR',\n                value: author,\n                key: 'properties.cm:author',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.DESCRIPTION',\n                value: description,\n                key: 'properties.cm:description',\n                multiline: true,\n                editable: true\n            })\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n    CardViewItemProperties,\n    CardViewItem,\n    CardViewTextItemModel,\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewIntItemModel,\n    CardViewFloatItemModel,\n    LogService,\n    MultiValuePipe,\n    AppConfigService\n} from '@alfresco/adf-core';\nimport { Property, CardViewGroup, OrganisedPropertyGroup } from '../interfaces/content-metadata.interfaces';\n\nconst D_TEXT = 'd:text';\nconst D_MLTEXT = 'd:mltext';\nconst D_DATE = 'd:date';\nconst D_DATETIME = 'd:datetime';\nconst D_INT = 'd:int';\nconst D_LONG = 'd:long';\nconst D_FLOAT = 'd:float';\nconst D_DOUBLE = 'd:double';\nconst D_BOOLEAN = 'd:boolean';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PropertyGroupTranslatorService {\n\n    static readonly RECOGNISED_ECM_TYPES = [D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG, D_FLOAT, D_DOUBLE, D_BOOLEAN];\n\n    valueSeparator: string;\n\n    constructor(private logService: LogService,\n                private multiValuePipe: MultiValuePipe,\n                private appConfig: AppConfigService) {\n        this.valueSeparator = this.appConfig.get<string>('content-metadata.multi-value-pipe-separator');\n    }\n\n    public translateToCardViewGroups(propertyGroups: OrganisedPropertyGroup[], propertyValues): CardViewGroup[] {\n        return propertyGroups.map((propertyGroup) => {\n            const translatedPropertyGroup: any = Object.assign({}, propertyGroup);\n            translatedPropertyGroup.properties = this.translateArray(propertyGroup.properties, propertyValues);\n            return translatedPropertyGroup;\n        });\n    }\n\n    private translateArray(properties: Property[], propertyValues: any): CardViewItem[] {\n        return properties.map((property) => {\n            return this.translate(property, propertyValues);\n        });\n    }\n\n    private translate(property: Property, propertyValues: any): CardViewItem {\n        let propertyValue;\n        if (propertyValues && propertyValues[property.name]) {\n            propertyValue = propertyValues[property.name];\n        }\n\n        this.checkECMTypeValidity(property.dataType);\n\n        const prefix = 'properties.';\n\n        const propertyDefinition: CardViewItemProperties = {\n            label: property.title || property.name,\n            value: propertyValue,\n            key: `${prefix}${property.name}`,\n            default: property.defaultValue,\n            editable: true\n        };\n        let cardViewItemProperty;\n\n        switch (property.dataType) {\n\n            case D_MLTEXT:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multiline: true\n                }));\n                break;\n\n            case D_INT:\n            case D_LONG:\n                cardViewItemProperty = new CardViewIntItemModel(propertyDefinition);\n                break;\n\n            case D_FLOAT:\n            case D_DOUBLE:\n                cardViewItemProperty = new CardViewFloatItemModel(propertyDefinition);\n                break;\n\n            case D_DATE:\n                cardViewItemProperty = new CardViewDateItemModel(propertyDefinition);\n                break;\n\n            case D_DATETIME:\n                cardViewItemProperty = new CardViewDatetimeItemModel(propertyDefinition);\n                break;\n\n            case D_BOOLEAN:\n                cardViewItemProperty = new CardViewBoolItemModel(propertyDefinition);\n                break;\n\n            case D_TEXT:\n            default:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multivalued: property.multiValued,\n                    multiline: property.multiValued,\n                    pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator]}]\n                }));\n        }\n\n        return cardViewItemProperty;\n    }\n\n    private checkECMTypeValidity(ecmPropertyType) {\n        if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {\n            this.logService.error(`Unknown type for mapping: ${ecmPropertyType}`);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PropertyGroup, Property, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\n\nconst emptyGroup = {\n    properties: {}\n};\n\nfunction convertObjectToArray(object: any): Property[] {\n    return Object.keys(object).map((key) => object[key]);\n}\n\nexport function getGroup(propertyGroups: PropertyGroupContainer, groupName: string): PropertyGroup | undefined {\n    return propertyGroups[groupName];\n}\n\nexport function getProperty(propertyGroups: PropertyGroupContainer, groupName: string, propertyName: string): Property | Property[] | undefined {\n    const groupDefinition = getGroup(propertyGroups, groupName) || emptyGroup;\n    let propertyDefinitions;\n\n    if (propertyName === '*') {\n        propertyDefinitions = convertObjectToArray(groupDefinition.properties);\n    } else {\n        propertyDefinitions = groupDefinition.properties[propertyName];\n    }\n\n    return propertyDefinitions;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentMetadataConfig, OrganisedPropertyGroup, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\nimport { getGroup, getProperty } from './property-group-reader';\n\nexport class AspectOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) { }\n\n    public isGroupAllowed(groupName: string): boolean {\n        if (this.isIncludeAllEnabled()) {\n            return true;\n        }\n        const groupNames = Object.keys(this.config);\n        return groupNames.indexOf(groupName) !== -1;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const aspects = this.config,\n            aspectNames = Object.keys(aspects);\n\n        return aspectNames\n            .reduce((groupAccumulator, aspectName) => {\n                const newGroup = this.getOrganisedPropertyGroup(propertyGroups, aspectName);\n                return groupAccumulator.concat(newGroup);\n            }, [])\n            .filter((organisedPropertyGroup) => organisedPropertyGroup.properties.length > 0);\n    }\n\n    public appendAllPreset(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const groups =  Object.keys(propertyGroups)\n            .map((groupName) => {\n                const propertyGroup = propertyGroups[groupName],\n                    properties = propertyGroup.properties;\n\n                return Object.assign({}, propertyGroup, {\n                    properties: Object.keys(properties).map((propertyName) => properties[propertyName])\n                });\n            });\n\n        return groups;\n    }\n\n    public filterExcludedPreset(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[] {\n        if (this.config.exclude) {\n            return propertyGroups.filter((preset) => {\n                return !this.config.exclude.includes(preset.name);\n            });\n        }\n        return propertyGroups;\n    }\n\n    public isIncludeAllEnabled() {\n        return this.config.includeAll;\n    }\n\n    private getOrganisedPropertyGroup(propertyGroups, aspectName) {\n        const group = getGroup(propertyGroups, aspectName);\n        let newGroup = [];\n\n        if (group) {\n            const aspectProperties = this.config[aspectName];\n            let properties;\n\n            if (aspectProperties === '*') {\n                properties = getProperty(propertyGroups, aspectName, aspectProperties);\n            } else {\n                properties = (<string[]> aspectProperties)\n                    .map((propertyName) => getProperty(propertyGroups, aspectName, propertyName))\n                    .filter((props) => props !== undefined);\n            }\n\n            newGroup = [{ title: group.title, properties }];\n        }\n\n        return newGroup;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentMetadataConfig, OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\n\nexport class IndifferentConfigService implements ContentMetadataConfig {\n\n    constructor(config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        return true;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        return Object.keys(propertyGroups)\n            .map((groupName) => {\n                const propertyGroup = propertyGroups[groupName],\n                    properties = propertyGroup.properties;\n\n                return Object.assign({}, propertyGroup, {\n                    properties: Object.keys(properties).map((propertyName) => properties[propertyName])\n                });\n            });\n    }\n\n    public filterExcludedPreset(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[] {\n        return propertyGroups;\n    }\n\n    public appendAllPreset(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        return[];\n    }\n\n    public isIncludeAllEnabled(): boolean {\n        return true;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ContentMetadataConfig,\n    LayoutOrientedConfigItem,\n    OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\nimport { getProperty } from './property-group-reader';\n\nexport class LayoutOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) { }\n\n    public isGroupAllowed(groupName: string): boolean {\n        if (this.isIncludeAllEnabled()) {\n            return true;\n        }\n        return this.getMatchingGroups(groupName).length > 0;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const layoutBlocks = this.config.filter((itemsGroup) => itemsGroup.items);\n\n        const organisedPropertyGroup = layoutBlocks.map((layoutBlock) => {\n            const flattenedItems = this.flattenItems(layoutBlock.items),\n                properties = flattenedItems.reduce((props, explodedItem) => {\n                    const property = getProperty(propertyGroups, explodedItem.groupName, explodedItem.propertyName) || [];\n                    return props.concat(property);\n                }, []);\n\n            return {\n                title: layoutBlock.title,\n                properties\n            };\n        });\n\n        return organisedPropertyGroup;\n    }\n\n    public appendAllPreset(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        return Object.keys(propertyGroups)\n            .map((groupName) => {\n                const propertyGroup = propertyGroups[groupName],\n                    properties = propertyGroup.properties;\n\n                return Object.assign({}, propertyGroup, {\n                    properties: Object.keys(properties).map((propertyName) => properties[propertyName])\n                });\n            });\n    }\n\n    public filterExcludedPreset(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[] {\n        let excludedConfig = this.config\n            .map((config) => config.exclude)\n            .find((exclude) => exclude !== undefined);\n\n        if (excludedConfig === undefined) {\n            excludedConfig = [];\n        } else if (typeof excludedConfig === 'string') {\n            excludedConfig = [excludedConfig];\n        }\n\n        return propertyGroups.filter((props) => {\n            return !excludedConfig.includes(props.name);\n        });\n    }\n\n    public isIncludeAllEnabled() {\n        const includeAllProperty = this.config\n            .map((config) => config.includeAll)\n            .find((includeAll) => includeAll !== undefined);\n\n        return includeAllProperty !== undefined ? includeAllProperty : false;\n    }\n\n    private flattenItems(items) {\n        return items.reduce((accumulator, item) => {\n            const properties = Array.isArray(item.properties) ? item.properties : [item.properties];\n            const flattenedProperties = properties.map((propertyName) => {\n                return {\n                    groupName: item.aspect || item.type,\n                    propertyName\n                };\n            });\n\n            return accumulator.concat(flattenedProperties);\n        }, []);\n    }\n\n    private getMatchingGroups(groupName: string): LayoutOrientedConfigItem[] {\n        return this.config\n            .map((layoutBlock) => layoutBlock.items)\n            .reduce((accumulator, items) => accumulator.concat(items), [])\n            .filter((item) => item.aspect === groupName || item.type === groupName);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AppConfigService, LogService } from '@alfresco/adf-core';\nimport { AspectOrientedConfigService } from './aspect-oriented-config.service';\nimport { IndifferentConfigService } from './indifferent-config.service';\nimport { LayoutOrientedConfigService } from './layout-oriented-config.service';\nimport {\n    PresetConfig,\n    ContentMetadataConfig,\n    AspectOrientedConfig,\n    InDifferentConfig,\n    LayoutOrientedConfig\n} from '../../interfaces/content-metadata.interfaces';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentMetadataConfigFactory {\n\n    static readonly INDIFFERENT_PRESET = '*';\n    static readonly DEFAULT_PRESET_NAME = 'default';\n\n    constructor(private appConfigService: AppConfigService, private logService: LogService) {}\n\n    public get(presetName: string = 'default'): ContentMetadataConfig {\n        let presetConfig;\n        try {\n            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];\n        } catch {\n            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {\n                this.logService.error(`No content-metadata preset for: ${presetName}`);\n            }\n            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;\n        }\n\n        return this.createConfig(presetConfig);\n    }\n\n    private createConfig(presetConfig: PresetConfig): ContentMetadataConfig {\n        let config: ContentMetadataConfig;\n\n        if (this.isLayoutOrientedPreset(presetConfig)) {\n            config = new LayoutOrientedConfigService(<LayoutOrientedConfig> presetConfig);\n        } else if (this.isAspectOrientedPreset(presetConfig)) {\n            config = new AspectOrientedConfigService(<AspectOrientedConfig> presetConfig);\n        } else {\n            config = new IndifferentConfigService(<InDifferentConfig> presetConfig);\n        }\n\n        Object.freeze(config);\n        return config;\n    }\n\n    private isAspectOrientedPreset(presetConfig: PresetConfig): boolean {\n        return this.isObject(presetConfig);\n    }\n\n    private isLayoutOrientedPreset(presetConfig: PresetConfig): boolean {\n        return Array.isArray(presetConfig);\n    }\n\n    private isObject(x) {\n        return x != null && typeof x === 'object';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Observable, defer, forkJoin } from 'rxjs';\nimport { PropertyGroup, PropertyGroupContainer } from '../interfaces/content-metadata.interfaces';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PropertyDescriptorsService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService) {}\n\n    load(groupNames: string[]): Observable<PropertyGroupContainer> {\n        const groupFetchStreams = groupNames\n            .map((groupName) => groupName.replace(':', '_'))\n            .map((groupName) => defer( () => this.alfrescoApiService.classesApi.getClass(groupName)) );\n\n        return forkJoin(groupFetchStreams).pipe(\n            map(this.convertToObject)\n        );\n    }\n\n    private convertToObject(propertyGroupsArray: PropertyGroup[]): PropertyGroupContainer {\n        return propertyGroupsArray.reduce((propertyGroups, propertyGroup) => {\n            return Object.assign({}, propertyGroups, {\n                [propertyGroup.name]: propertyGroup\n            });\n        }, {});\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { BasicPropertiesService } from './basic-properties.service';\nimport { Observable, of, iif, Subject } from 'rxjs';\nimport { PropertyGroupTranslatorService } from './property-groups-translator.service';\nimport { CardViewItem } from '@alfresco/adf-core';\nimport { CardViewGroup, OrganisedPropertyGroup } from '../interfaces/content-metadata.interfaces';\nimport { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';\nimport { PropertyDescriptorsService } from './property-descriptors.service';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentMetadataService {\n\n    error = new Subject<{ statusCode: number, message: string }>();\n\n    constructor(private basicPropertiesService: BasicPropertiesService,\n                private contentMetadataConfigFactory: ContentMetadataConfigFactory,\n                private propertyGroupTranslatorService: PropertyGroupTranslatorService,\n                private propertyDescriptorsService: PropertyDescriptorsService) {\n    }\n\n    getBasicProperties(node: Node): Observable<CardViewItem[]> {\n        return of(this.basicPropertiesService.getProperties(node));\n    }\n\n    getGroupedProperties(node: Node, presetName: string = 'default'): Observable<CardViewGroup[]> {\n        let groupedProperties = of([]);\n\n        if (node.aspectNames) {\n            const contentMetadataConfig = this.contentMetadataConfigFactory.get(presetName),\n                groupNames = node.aspectNames\n                    .concat(node.nodeType)\n                    .filter((groupName) => contentMetadataConfig.isGroupAllowed(groupName));\n\n            if (groupNames.length > 0) {\n                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(\n                    switchMap((groups) =>\n                        iif(\n                            () => contentMetadataConfig.isIncludeAllEnabled(),\n                            of(contentMetadataConfig.appendAllPreset(groups).concat(contentMetadataConfig.reorganiseByConfig(groups))),\n                            of(contentMetadataConfig.reorganiseByConfig(groups))\n                        )),\n                    map((groups) => contentMetadataConfig.filterExcludedPreset(groups)),\n                    map((groups) => this.filterEmptyPreset(groups)),\n                    map((groups) => this.setTitleToNameIfNotSet(groups)),\n                    map((groups) => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties))\n                );\n            }\n        }\n\n        return groupedProperties;\n    }\n\n    setTitleToNameIfNotSet(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[] {\n        propertyGroups.map((propertyGroup) => {\n            propertyGroup.title = propertyGroup.title || propertyGroup.name;\n        });\n        return propertyGroups;\n    }\n\n    filterEmptyPreset(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[]  {\n        return propertyGroups.filter((props) => props.properties.length);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { Observable, Subject, of } from 'rxjs';\nimport { CardViewItem, NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService, TranslationService } from '@alfresco/adf-core';\nimport { ContentMetadataService } from '../../services/content-metadata.service';\nimport { CardViewGroup } from '../../interfaces/content-metadata.interfaces';\nimport { switchMap, takeUntil, catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-content-metadata',\n    templateUrl: './content-metadata.component.html',\n    styleUrls: ['./content-metadata.component.scss'],\n    host: { 'class': 'adf-content-metadata' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentMetadataComponent implements OnChanges, OnInit, OnDestroy {\n\n    protected onDestroy$ = new Subject<boolean>();\n\n    /** (required) The node entity to fetch metadata about */\n    @Input()\n    node: Node;\n\n    /** Toggles whether the edit button should be shown */\n    @Input()\n    editable: boolean = false;\n\n    /** Toggles whether to display empty values in the card view */\n    @Input()\n    displayEmpty: boolean = false;\n\n    /** Toggles between expanded (ie, full information) and collapsed\n     * (ie, reduced information) in the display\n     */\n    @Input()\n    expanded: boolean = false;\n\n    /** The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time */\n    @Input()\n    multi = false;\n\n    /** Name of the metadata preset, which defines aspects and their properties */\n    @Input()\n    preset: string;\n\n    /** Toggles whether the metadata properties should be shown */\n    @Input()\n    displayDefaultProperties: boolean = true;\n\n    /** (Optional) shows the given aspect in the expanded  card */\n    @Input()\n    displayAspect: string = null;\n\n    basicProperties$: Observable<CardViewItem[]>;\n    groupedProperties$: Observable<CardViewGroup[]>;\n\n    constructor(\n        private contentMetadataService: ContentMetadataService,\n        private cardViewUpdateService: CardViewUpdateService,\n        private nodesApiService: NodesApiService,\n        private logService: LogService,\n        private alfrescoApiService: AlfrescoApiService,\n        private translationService: TranslationService\n    ) {}\n\n    ngOnInit() {\n        this.cardViewUpdateService.itemUpdated$\n            .pipe(\n                switchMap((changes) =>\n                    this.saveNode(changes).pipe(\n                        catchError((err) => {\n                            this.handleUpdateError(err);\n                            return of(null);\n                        })\n                    )\n                ),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(\n                (updatedNode) => {\n                    if (updatedNode) {\n                        Object.assign(this.node, updatedNode);\n                        this.alfrescoApiService.nodeUpdated.next(this.node);\n                    }\n                }\n            );\n\n        this.loadProperties(this.node);\n    }\n\n    protected handleUpdateError(error: Error) {\n        this.logService.error(error);\n\n        let statusCode = 0;\n\n        try {\n            statusCode = JSON.parse(error.message).error.statusCode;\n        } catch {}\n\n        let message = `METADATA.ERRORS.${statusCode}`;\n\n        if (this.translationService.instant(message) === message) {\n            message = 'METADATA.ERRORS.GENERIC';\n        }\n\n        this.contentMetadataService.error.next({\n            statusCode,\n            message\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.node && !changes.node.firstChange) {\n            this.loadProperties(changes.node.currentValue);\n        }\n    }\n\n    private loadProperties(node: Node) {\n        if (node) {\n            this.basicProperties$ = this.contentMetadataService.getBasicProperties(node);\n            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);\n        }\n    }\n\n    private saveNode({ changed: nodeBody }): Observable<Node> {\n        return this.nodesApiService.updateNode(this.node.id, nodeBody);\n    }\n\n    showGroup(group: CardViewGroup) {\n        const properties = group.properties.filter((property) => {\n            return !!property.displayValue;\n        });\n\n        return properties.length;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    public canExpandTheCard(group: CardViewGroup): boolean {\n        return group.title === this.displayAspect;\n    }\n\n    public canExpandProperties(): boolean {\n        return !this.expanded || this.displayAspect === 'Properties';\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ContentMetadataComponent } from './components/content-metadata/content-metadata.component';\nimport { ContentMetadataCardComponent } from './components/content-metadata-card/content-metadata-card.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FlexLayoutModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ],\n    declarations: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ]\n})\nexport class ContentMetadataModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionElement } from '@alfresco/js-api';\n\nexport class PermissionDisplayModel implements PermissionElement {\n\n    authorityId?: string;\n    name?: string;\n    accessStatus?: PermissionElement.AccessStatusEnum;\n    isInherited: boolean = false;\n    icon: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.authorityId = obj.authorityId;\n            this.name = obj.name;\n            this.accessStatus = obj.accessStatus;\n            this.isInherited = obj.isInherited !== null && obj.isInherited !== undefined ? obj.isInherited : false;\n            this.icon = obj.icon ? obj.icon : 'vpn_key';\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable, of, from, throwError } from 'rxjs';\nimport { AlfrescoApiService, SearchService, NodesApiService, TranslationService } from '@alfresco/adf-core';\nimport { QueryBody, Node, NodeEntry, PathElement, GroupMemberEntry, GroupMemberPaging, PermissionElement } from '@alfresco/js-api';\nimport { switchMap, map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NodePermissionService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private searchApiService: SearchService,\n                private nodeService: NodesApiService,\n                private translation: TranslationService) {\n    }\n\n    /**\n     * Gets a list of roles for the current node.\n     * @param node The target node\n     * @returns Array of strings representing the roles\n     */\n    getNodeRoles(node: Node): Observable<string[]> {\n        const retrieveSiteQueryBody: QueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);\n        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)\n            .pipe(\n                switchMap((siteNodeList: any) => {\n                    if ( siteNodeList.list.entries.length > 0 ) {\n                        const siteName = siteNodeList.list.entries[0].entry.name;\n                        return this.getGroupMembersBySiteName(siteName);\n                    } else {\n                        return of(node.permissions.settable);\n                    }\n                })\n            );\n    }\n\n    /**\n     * Updates the permission role for a node.\n     * @param node Target node\n     * @param updatedPermissionRole Permission role to update or add\n     * @returns Node with updated permission\n     */\n    updatePermissionRole(node: Node, updatedPermissionRole: PermissionElement): Observable<Node> {\n        const permissionBody = { permissions: { locallySet: []} };\n        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(updatedPermissionRole.authorityId);\n        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);\n        if (index !== -1) {\n            permissionBody.permissions.locallySet[index] = updatedPermissionRole;\n        } else {\n            permissionBody.permissions.locallySet.push(updatedPermissionRole);\n        }\n        return this.nodeService.updateNode(node.id, permissionBody);\n    }\n\n    /**\n     * Update permissions for a node.\n     * @param nodeId ID of the target node\n     * @param permissionList New permission settings\n     * @returns Node with updated permissions\n     */\n    updateNodePermissions(nodeId: string, permissionList: NodeEntry[]): Observable<Node> {\n       return this.nodeService.getNode(nodeId).pipe(\n           switchMap((node) => {\n                return this.getNodeRoles(node).pipe(\n                    switchMap((nodeRoles) => of({node, nodeRoles}) )\n                );\n            }),\n            switchMap(({node, nodeRoles}) => this.updateLocallySetPermissions(node, permissionList, nodeRoles))\n        );\n    }\n\n    /**\n     * Updates the locally set permissions for a node.\n     * @param node ID of the target node\n     * @param nodes Permission settings\n     * @param nodeRole Permission role\n     * @returns Node with updated permissions\n     */\n    updateLocallySetPermissions(node: Node, nodes: NodeEntry[], nodeRole: string[]): Observable<Node> {\n        const permissionBody = { permissions: { locallySet: []} };\n        const permissionList = this.transformNodeToPermissionElement(nodes, nodeRole[0]);\n        const duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);\n        if (duplicatedPermissions.length > 0) {\n            const list = duplicatedPermissions.map((permission) => 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name).join(', ');\n            const duplicatePermissionMessage: string = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION',  {list});\n            return throwError(duplicatePermissionMessage);\n        }\n        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;\n        return this.nodeService.updateNode(node.id, permissionBody);\n    }\n\n    private getDuplicatedPermissions(nodeLocallySet: PermissionElement[], permissionListAdded: PermissionElement[]): PermissionElement[] {\n        const duplicatePermissions: PermissionElement[] = [];\n        if (nodeLocallySet) {\n            permissionListAdded.forEach((permission: PermissionElement) => {\n                const duplicate = nodeLocallySet.find((localPermission) => this.isEqualPermission(localPermission, permission));\n                if (duplicate) {\n                    duplicatePermissions.push(duplicate);\n                }\n            });\n        }\n        return duplicatePermissions;\n    }\n\n    private isEqualPermission(oldPermission: PermissionElement, newPermission: PermissionElement): boolean {\n        return oldPermission.accessStatus === newPermission.accessStatus &&\n               oldPermission.authorityId === newPermission.authorityId &&\n               oldPermission.name === newPermission.name;\n    }\n\n    private transformNodeToPermissionElement(nodes: NodeEntry[], nodeRole: any): PermissionElement[] {\n        return nodes.map((node) => {\n            const newPermissionElement: PermissionElement = <PermissionElement> {\n                'authorityId': node.entry.properties['cm:authorityName'] ?\n                    node.entry.properties['cm:authorityName'] :\n                    node.entry.properties['cm:userName'],\n                'name': nodeRole,\n                'accessStatus': 'ALLOWED'\n            };\n            return newPermissionElement;\n        });\n    }\n\n    /**\n     * Removes a permission setting from a node.\n     * @param node ID of the target node\n     * @param permissionToRemove Permission setting to remove\n     * @returns Node with modified permissions\n     */\n    removePermission(node: Node, permissionToRemove: PermissionElement): Observable<Node> {\n        const permissionBody = { permissions: { locallySet: [] } };\n        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(permissionToRemove.authorityId);\n        if (index !== -1) {\n            node.permissions.locallySet.splice(index, 1);\n            permissionBody.permissions.locallySet = node.permissions.locallySet;\n            return this.nodeService.updateNode(node.id, permissionBody);\n        }\n    }\n\n    private getGroupMembersBySiteName(siteName: string): Observable<string[]> {\n        const groupName = 'GROUP_site_' + siteName;\n        return this.getGroupMemberByGroupName(groupName)\n            .pipe(\n                map((groupMemberPaging: GroupMemberPaging) => {\n                    const displayResult: string[] = [];\n                    groupMemberPaging.list.entries.forEach((member: GroupMemberEntry) => {\n                        displayResult.push(this.formattedRoleName(member.entry.displayName, 'site_' + siteName));\n                    });\n                    return displayResult;\n                })\n            );\n    }\n\n    /**\n     * Gets all members related to a group name.\n     * @param groupName Name of group to look for members\n     * @param opts Extra options supported by JS-API\n     * @returns List of members\n     */\n    getGroupMemberByGroupName(groupName: string, opts?: any): Observable<GroupMemberPaging> {\n        return from(this.apiService.groupsApi.getGroupMembers(groupName, opts));\n    }\n\n    private formattedRoleName(displayName, siteName): string {\n        return displayName.replace(siteName + '_', '');\n    }\n\n    private buildRetrieveSiteQueryBody(nodePath: PathElement[]): QueryBody {\n        const pathNames = nodePath.map((node: PathElement) => 'name: \"' + node.name + '\"');\n        const buildedPathNames = pathNames.join(' OR ');\n        return {\n            'query': {\n                'query': buildedPathNames\n            },\n            'paging': {\n                'maxItems': 100,\n                'skipCount': 0\n            },\n            'include': ['aspectNames', 'properties'],\n            'filterQueries': [\n                {\n                    'query':\n                        \"TYPE:'st:site'\"\n                }\n            ]\n        };\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { Node, PermissionElement } from '@alfresco/js-api';\nimport { PermissionDisplayModel } from '../../models/permission.model';\nimport { NodePermissionService } from '../../services/node-permission.service';\n\n@Component({\n    selector: 'adf-permission-list',\n    templateUrl: './permission-list.component.html',\n    styleUrls: ['./permission-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class PermissionListComponent implements OnInit {\n\n    /** ID of the node whose permissions you want to show. */\n    @Input()\n    nodeId: string = '';\n\n    /** Emitted when the permission is updated. */\n    @Output()\n    update: EventEmitter<PermissionElement> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    permissionList: PermissionDisplayModel[];\n    settableRoles: any[];\n    actualNode: Node;\n\n    constructor(private nodeService: NodesApiService,\n                private nodePermissionService: NodePermissionService) {\n\n    }\n\n    ngOnInit() {\n        this.fetchNodePermissions();\n    }\n\n    reload() {\n        this.fetchNodePermissions();\n    }\n\n    private fetchNodePermissions() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: Node) => {\n            this.actualNode = node;\n            this.permissionList = this.getPermissionList(node);\n            this.nodePermissionService.getNodeRoles(node).subscribe((settableList: string[]) => {\n                this.settableRoles = settableList;\n            });\n        });\n    }\n\n    private getPermissionList(node: Node): PermissionDisplayModel[] {\n        const allPermissions: PermissionDisplayModel[] = [];\n        if (node.permissions.locallySet) {\n            node.permissions.locallySet.map((permissionElement: PermissionElement) => {\n                const permission = new PermissionDisplayModel(permissionElement);\n                allPermissions.push(permission);\n            });\n        }\n        if (node.permissions.inherited) {\n            node.permissions.inherited.map((permissionElement: PermissionElement) => {\n                const permissionInherited = new PermissionDisplayModel(permissionElement);\n                permissionInherited.isInherited = true;\n                allPermissions.push(permissionInherited);\n            });\n        }\n        return allPermissions;\n    }\n\n    saveNewRole(event: any, permissionRow: PermissionDisplayModel) {\n        const updatedPermissionRole: PermissionElement = this.buildUpdatedPermission(event.value, permissionRow);\n        this.nodePermissionService.updatePermissionRole(this.actualNode, updatedPermissionRole)\n            .subscribe((node: Node) => {\n                this.update.emit(updatedPermissionRole);\n            });\n    }\n\n    private buildUpdatedPermission(newRole: string, permissionRow: PermissionDisplayModel): PermissionElement {\n        const permissionRole: PermissionElement = {};\n        permissionRole.accessStatus = permissionRow.accessStatus;\n        permissionRole.name = newRole;\n        permissionRole.authorityId = permissionRow.authorityId;\n        return permissionRole;\n    }\n\n    removePermission(permissionRow: PermissionDisplayModel) {\n        this.nodePermissionService.removePermission(this.actualNode, permissionRow).subscribe((node) => {\n            this.update.emit(node);\n        }, (error) => this.error.emit(error));\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'adf-no-permission-template',\n    template: '<ng-content></ng-content>'\n})\nexport class NoPermissionTemplateComponent {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\nimport { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { NodesApiService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\n\n@Directive({\n    selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',\n    host: {\n        'role': 'button',\n        '(click)': 'onInheritPermissionClicked()'\n    }\n})\nexport class InheritPermissionDirective {\n\n    /** ID of the node to add/remove inherited permissions. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the node is updated. */\n    @Output()\n    updated: EventEmitter<Node> = new EventEmitter<Node>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private nodeService: NodesApiService,\n                private contentService: ContentService) {\n    }\n\n    onInheritPermissionClicked() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: Node) => {\n            if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {\n                const nodeBody = { permissions: { isInheritanceEnabled: !node.permissions.isInheritanceEnabled } };\n                this.nodeService.updateNode(this.nodeId, nodeBody, { include: ['permissions'] }).subscribe((nodeUpdated: Node) => {\n                    this.updated.emit(nodeUpdated);\n                }, (error) => this.error.emit(error));\n            } else {\n                this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');\n            }\n        });\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { AddPermissionDialogData } from './add-permission-dialog-data.interface';\nimport { AddPermissionComponent } from '../add-permission/add-permission.component';\n\n@Component({\n    selector: 'adf-add-permission-dialog',\n    templateUrl: './add-permission-dialog.component.html',\n    styleUrls: ['./add-permission-dialog.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddPermissionDialogComponent {\n\n    @ViewChild('addPermission')\n    addPermissionComponent: AddPermissionComponent;\n\n    currentSelection: NodeEntry[] = [];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: AddPermissionDialogData) {\n    }\n\n    onSelect(items: NodeEntry[]) {\n        this.currentSelection = items;\n    }\n\n    onAddClicked() {\n        this.data.confirm.next(this.currentSelection);\n        this.data.confirm.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { Injectable } from '@angular/core';\nimport { Subject, Observable, throwError } from 'rxjs';\nimport { AddPermissionDialogComponent } from '../components/add-permission/add-permission-dialog.component';\nimport { AddPermissionDialogData } from '../components/add-permission/add-permission-dialog-data.interface';\nimport { NodeEntry, Node } from '@alfresco/js-api';\nimport { NodePermissionService } from './node-permission.service';\nimport { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NodePermissionDialogService {\n\n    constructor(private dialog: MatDialog,\n                private nodePermissionService: NodePermissionService,\n                private contentService: ContentService) {\n    }\n\n    /**\n     * Opens a dialog to add permissions to a node.\n     * @param node ID of the target node\n     * @param title Dialog title\n     * @returns Node with updated permissions\n     */\n    openAddPermissionDialog(node: Node, title?: string): Observable<NodeEntry[]> {\n        if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {\n            const confirm = new Subject<NodeEntry[]>();\n\n            confirm.subscribe({\n                complete: this.close.bind(this)\n            });\n\n            const data: AddPermissionDialogData = {\n                nodeId: node.id,\n                title: title,\n                confirm: confirm\n            };\n\n            this.openDialog(data, 'adf-add-permission-dialog', '630px');\n            return confirm;\n        } else {\n            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));\n            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';\n            return throwError(errors);\n        }\n    }\n\n    private openDialog(data: any, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(AddPermissionDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    /**\n     * Closes the currently-open dialog.\n     */\n    close() {\n        this.dialog.closeAll();\n    }\n\n    /**\n     * Opens a dialog to update permissions for a node.\n     * @param nodeId ID of the target node\n     * @param title Dialog title\n     * @returns Node with updated permissions\n     */\n    updateNodePermissionByDialog(nodeId?: string, title?: string): Observable<Node> {\n        return this.contentService.getNode(nodeId, { include: ['allowableOperations'] })\n            .pipe(\n                switchMap((node) => {\n                    return this.openAddPermissionDialog(node.entry, title)\n                        .pipe(\n                            switchMap((selection) => {\n                                return this.nodePermissionService.updateNodePermissions(nodeId, selection);\n                            })\n                        );\n                })\n            );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryBody } from '@alfresco/js-api';\nimport { SearchConfigurationInterface } from '@alfresco/adf-core';\n\nexport class SearchPermissionConfigurationService implements SearchConfigurationInterface {\n\n    constructor() {\n    }\n\n    public generateQueryBody(searchTerm: string, maxResults: number, skipCount: number): QueryBody {\n        const defaultQueryBody: QueryBody = {\n            query: {\n                query: searchTerm ? `authorityName:*${searchTerm}* OR userName:*${searchTerm}*` : searchTerm\n            },\n            include: ['properties', 'aspectNames'],\n            paging: {\n                maxItems: maxResults,\n                skipCount: skipCount\n            },\n            filterQueries: [\n                /*tslint:disable-next-line */\n                { query: \"TYPE:'cm:authority'\" }]\n        };\n\n        return defaultQueryBody;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { SearchPermissionConfigurationService } from './search-config-permission.service';\nimport { SearchService, SearchConfigurationService } from '@alfresco/adf-core';\nimport { SearchComponent } from '../../../search/components/search.component';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\nimport { NodeEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-add-permission-panel',\n    templateUrl: './add-permission-panel.component.html',\n    styleUrls: ['./add-permission-panel.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        { provide: SearchConfigurationService, useClass: SearchPermissionConfigurationService },\n        SearchService\n    ]\n})\nexport class AddPermissionPanelComponent {\n\n    @ViewChild('search')\n    search: SearchComponent;\n\n    /** Emitted when a permission list item is selected. */\n    @Output()\n    select: EventEmitter<any> = new EventEmitter();\n\n    searchInput: FormControl = new FormControl();\n    searchedWord = '';\n    debounceSearch: number = 200;\n\n    selectedItems: NodeEntry[] = [];\n\n    EVERYONE: NodeEntry = new NodeEntry({ entry: { properties: {'cm:authorityName': 'GROUP_EVERYONE'}}});\n\n    constructor() {\n        this.searchInput.valueChanges\n        .pipe(\n            debounceTime(this.debounceSearch)\n        )\n        .subscribe((searchValue) => {\n            this.searchedWord = searchValue;\n            if (!searchValue) {\n                this.search.resetResults();\n            }\n        });\n    }\n\n    elementClicked(item: NodeEntry) {\n        if (this.isAlreadySelected(item)) {\n            this.selectedItems.splice(this.selectedItems.indexOf(item), 1);\n        } else {\n            this.selectedItems.push(item);\n        }\n        this.select.emit(this.selectedItems);\n    }\n\n    private isAlreadySelected(item: NodeEntry): boolean {\n        return this.selectedItems.indexOf(item) >= 0;\n    }\n\n    clearSearch() {\n        this.searchedWord = '';\n        this.selectedItems.splice(0, this.selectedItems.length);\n        this.search.resetResults();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';\nimport { NodeEntry, Node } from '@alfresco/js-api';\nimport { NodePermissionService } from '../../services/node-permission.service';\nimport { NodesApiService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-add-permission',\n    templateUrl: './add-permission.component.html',\n    styleUrls: ['./add-permission.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddPermissionComponent {\n\n    /** ID of the target node. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the node is updated successfully. */\n    @Output()\n    success: EventEmitter<Node> = new EventEmitter();\n\n    /** Emitted when an error occurs during the update. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    selectedItems: NodeEntry[] = [];\n    currentNode: Node;\n    currentNodeRoles: string[];\n\n    constructor(private nodePermissionService: NodePermissionService,\n                private nodeApiService: NodesApiService,\n                private contentService: ContentService) {\n        this.nodeApiService.getNode(this.nodeId).subscribe((node) => this.currentNode = node);\n    }\n\n    onSelect(selection: NodeEntry[]) {\n        this.selectedItems = selection;\n    }\n\n    isAddEnabled(): boolean {\n        return this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS) &&\n                this.selectedItems.length !== 0;\n    }\n\n    applySelection() {\n        if (this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS)) {\n            this.nodePermissionService.updateNodePermissions(this.nodeId, this.selectedItems)\n                .subscribe(\n                    (node) => {\n                        this.success.emit(node);\n                    },\n                    (error) => {\n                        this.error.emit(error);\n                    });\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\nimport { PermissionListComponent } from './components/permission-list/permission-list.component';\nimport { AddPermissionComponent } from './components/add-permission/add-permission.component';\nimport { AddPermissionDialogComponent } from './components/add-permission/add-permission-dialog.component';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { InheritPermissionDirective } from './components/inherited-button.directive';\nimport { NoPermissionTemplateComponent } from './components/permission-list/no-permission.component';\nimport { AddPermissionPanelComponent } from './components/add-permission/add-permission-panel.component';\nimport { SearchModule } from '../search/search.module';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        SearchModule\n    ],\n    declarations: [\n        PermissionListComponent,\n        NoPermissionTemplateComponent,\n        AddPermissionPanelComponent,\n        InheritPermissionDirective,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ],\n    entryComponents: [\n        AddPermissionPanelComponent,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ],\n    exports: [\n        PermissionListComponent,\n        NoPermissionTemplateComponent,\n        AddPermissionPanelComponent,\n        InheritPermissionDirective,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ]\n})\nexport class PermissionManagerModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    Inject,\n    OnInit,\n    ViewEncapsulation,\n    ViewChild,\n    OnDestroy\n} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatSlideToggleChange } from '@angular/material';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subscription, Observable, throwError } from 'rxjs';\nimport {\n    skip,\n    distinctUntilChanged,\n    mergeMap,\n    catchError\n} from 'rxjs/operators';\nimport {\n    SharedLinksApiService,\n    NodesApiService,\n    ContentService,\n    RenditionsService,\n    AppConfigService\n} from '@alfresco/adf-core';\nimport { SharedLinkEntry, Node } from '@alfresco/js-api';\nimport { ConfirmDialogComponent } from '../dialogs/confirm.dialog';\nimport moment from 'moment-es6';\nimport { ContentNodeShareSettings } from './content-node-share.settings';\n\n@Component({\n    selector: 'adf-share-dialog',\n    templateUrl: './content-node-share.dialog.html',\n    styleUrls: ['./content-node-share.dialog.scss'],\n    host: { class: 'adf-share-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShareDialogComponent implements OnInit, OnDestroy {\n    private subscriptions: Subscription[] = [];\n\n    minDate = moment().add(1, 'd');\n    sharedId: string;\n    fileName: string;\n    baseShareUrl: string;\n    isFileShared: boolean = false;\n    isDisabled: boolean = false;\n    form: FormGroup = new FormGroup({\n        sharedUrl: new FormControl(''),\n        time: new FormControl({ value: '', disabled: false })\n    });\n    type = 'datetime';\n\n    @ViewChild('matDatetimepickerToggle')\n    matDatetimepickerToggle;\n\n    @ViewChild('slideToggleExpirationDate')\n    slideToggleExpirationDate;\n\n    @ViewChild('dateTimePickerInput')\n    dateTimePickerInput;\n\n    constructor(\n        private appConfigService: AppConfigService,\n        private sharedLinksApiService: SharedLinksApiService,\n        private dialogRef: MatDialogRef<ShareDialogComponent>,\n        private dialog: MatDialog,\n        private nodesApiService: NodesApiService,\n        private contentService: ContentService,\n        private renditionService: RenditionsService,\n        @Inject(MAT_DIALOG_DATA) public data: ContentNodeShareSettings\n    ) {}\n\n    ngOnInit() {\n        this.type = this.appConfigService.get<string>('sharedLinkDateTimePickerType', 'datetime');\n\n        if (!this.canUpdate) {\n            this.form.controls['time'].disable();\n        }\n\n        this.subscriptions.push(\n            this.form.controls.time.valueChanges\n                .pipe(\n                    skip(1),\n                    distinctUntilChanged(),\n                    mergeMap(\n                        (updates) => this.updateNode(updates),\n                        (formUpdates) => formUpdates\n                    ),\n                    catchError((error) => {\n                        return throwError(error);\n                    })\n                )\n                .subscribe((updates) => this.updateEntryExpiryDate(updates))\n        );\n\n        if (this.data.node && this.data.node.entry) {\n            this.fileName = this.data.node.entry.name;\n            this.baseShareUrl = this.data.baseShareUrl;\n            const properties = this.data.node.entry.properties;\n\n            if (!properties || !properties['qshare:sharedId']) {\n                this.createSharedLinks(this.data.node.entry.id);\n            } else {\n                this.sharedId = properties['qshare:sharedId'];\n                this.isFileShared = true;\n\n                this.updateForm();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe);\n    }\n\n    removeShare() {\n        this.deleteSharedLink(this.sharedId);\n    }\n\n    onSlideShareChange(event: any) {\n        if (event.checked) {\n            this.createSharedLinks(this.data.node.entry.id);\n        } else {\n            this.openConfirmationDialog();\n        }\n    }\n\n    get canUpdate() {\n        const { entry } = this.data.node;\n\n        if (entry && entry.allowableOperations) {\n            return this.contentService.hasAllowableOperations(entry, 'update');\n        }\n\n        return true;\n    }\n\n    onToggleExpirationDate(slideToggle: MatSlideToggleChange) {\n        if (slideToggle.checked) {\n            this.matDatetimepickerToggle.datetimepicker.open();\n        } else {\n            this.matDatetimepickerToggle.datetimepicker.close();\n            this.form.controls.time.setValue(null);\n        }\n    }\n\n    onDatetimepickerClosed() {\n        this.dateTimePickerInput.nativeElement.blur();\n\n        if (!this.form.controls.time.value) {\n            this.slideToggleExpirationDate.checked = false;\n        }\n    }\n\n    private openConfirmationDialog() {\n        this.isFileShared = false;\n\n        this.dialog\n            .open(ConfirmDialogComponent, {\n                data: {\n                    title: 'SHARE.CONFIRMATION.DIALOG-TITLE',\n                    message: 'SHARE.CONFIRMATION.MESSAGE',\n                    yesLabel: 'SHARE.CONFIRMATION.REMOVE',\n                    noLabel: 'SHARE.CONFIRMATION.CANCEL'\n                },\n                minWidth: '250px',\n                closeOnNavigation: true\n            })\n            .beforeClose()\n            .subscribe((deleteSharedLink) => {\n                if (deleteSharedLink) {\n                    this.deleteSharedLink(this.sharedId);\n                } else {\n                    this.isFileShared = true;\n                }\n            });\n    }\n\n    private createSharedLinks(nodeId: string) {\n        this.isDisabled = true;\n\n        this.sharedLinksApiService.createSharedLinks(nodeId).subscribe(\n            (sharedLink: SharedLinkEntry) => {\n                if (sharedLink.entry) {\n                    this.sharedId = sharedLink.entry.id;\n                    if (this.data.node.entry.properties) {\n                        this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;\n                    } else {\n                        this.data.node.entry.properties = {\n                            'qshare:sharedId': this.sharedId\n                        };\n                    }\n                    this.isDisabled = false;\n                    this.isFileShared = true;\n                    this.renditionService\n                        .generateRenditionForNode(this.data.node.entry.id)\n                        .subscribe(() => {});\n\n                    this.updateForm();\n                }\n            },\n            () => {\n                this.isDisabled = false;\n                this.isFileShared = false;\n            }\n        );\n    }\n\n    deleteSharedLink(sharedId: string) {\n        this.isDisabled = true;\n\n        this.sharedLinksApiService\n            .deleteSharedLink(sharedId)\n            .subscribe((response: any) => {\n                if (response instanceof Error) {\n                    this.isDisabled = false;\n                    this.isFileShared = true;\n                    this.handleError(response);\n                } else {\n                    if (this.data.node.entry.properties) {\n                        this.data.node.entry.properties['qshare:sharedId'] = null;\n                        this.data.node.entry.properties['qshare:expiryDate'] = null;\n                    }\n                    this.dialogRef.close(false);\n                }\n            }\n        );\n    }\n\n    private handleError(error: Error) {\n        let message = 'SHARE.UNSHARE_ERROR';\n        let statusCode = 0;\n\n        try {\n            statusCode = JSON.parse(error.message).error.statusCode;\n        } catch {}\n\n        if (statusCode === 403) {\n            message = 'SHARE.UNSHARE_PERMISSION_ERROR';\n        }\n\n        this.sharedLinksApiService.error.next({\n            statusCode,\n            message\n        });\n    }\n\n    private updateForm() {\n        const { entry } = this.data.node;\n        let expiryDate = null;\n\n        if (entry && entry.properties) {\n            expiryDate = entry.properties['qshare:expiryDate'];\n        }\n\n        this.form.setValue({\n            sharedUrl: `${this.baseShareUrl}${this.sharedId}`,\n            time: expiryDate ? moment(expiryDate).local() : null\n        });\n    }\n\n    private updateNode(date: moment.Moment): Observable<Node> {\n        return this.nodesApiService.updateNode(this.data.node.entry.id, {\n            properties: {\n                'qshare:expiryDate': date ?\n                    (this.type === 'date' ? date.endOf('day').utc().format() : date.utc().format()) :\n                    null\n            }\n        });\n    }\n\n    private updateEntryExpiryDate(date: moment.Moment) {\n        const { properties } = this.data.node.entry;\n\n        if (properties) {\n            properties['qshare:expiryDate'] = date\n                ? date.local()\n                : null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, Input, HostListener, OnChanges, NgZone } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { NodeEntry, Node } from '@alfresco/js-api';\n\nimport { ShareDialogComponent } from './content-node-share.dialog';\nimport { Observable, from } from 'rxjs';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\n\n@Directive({\n    selector: '[adf-share]',\n    exportAs: 'adfShare'\n})\nexport class NodeSharedDirective implements OnChanges {\n\n    isFile: boolean = false;\n    isShared: boolean = false;\n\n    /** Node to share. */\n        // tslint:disable-next-line:no-input-rename\n    @Input('adf-share')\n    node: NodeEntry;\n\n    /** Prefix to add to the generated link. */\n    @Input()\n    baseShareUrl: string;\n\n    @HostListener('click')\n    onClick() {\n        if (this.node) {\n            this.shareNode(this.node);\n        }\n    }\n\n    constructor(\n        private dialog: MatDialog,\n        private zone: NgZone,\n        private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    shareNode(nodeEntry: NodeEntry) {\n        if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {\n            // shared and favorite\n            const nodeId = nodeEntry.entry['nodeId'] || nodeEntry.entry['guid'];\n\n            if (nodeId) {\n                this.getNodeInfo(nodeId).subscribe((entry) => {\n                  this.openShareLinkDialog({ entry });\n                });\n            } else {\n                this.openShareLinkDialog(nodeEntry);\n            }\n        }\n    }\n\n    private getNodeInfo(nodeId: string): Observable<Node> {\n        const options = {\n          include: ['allowableOperations']\n        };\n\n        return from(this.alfrescoApiService.nodesApi.getNodeInfo(nodeId, options));\n      }\n\n    private openShareLinkDialog(node: NodeEntry) {\n        this.dialog.open(ShareDialogComponent, {\n            width: '600px',\n            panelClass: 'adf-share-link-dialog',\n            data: {\n                node,\n                baseShareUrl: this.baseShareUrl\n            }\n        });\n    }\n\n    ngOnChanges() {\n        this.zone.onStable.subscribe(() => {\n            if (this.node && this.node.entry) {\n                this.isFile = this.node.entry.isFile;\n                this.isShared = this.node.entry.properties ? this.node.entry.properties['qshare:sharedId'] : false;\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from '../material.module';\nimport { ShareDialogComponent } from './content-node-share.dialog';\nimport { NodeSharedDirective } from './content-node-share.directive';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        ShareDialogComponent,\n        NodeSharedDirective\n    ],\n    exports: [\n        ShareDialogComponent,\n        NodeSharedDirective\n    ],\n    entryComponents: [\n        ShareDialogComponent\n    ]\n})\nexport class ContentNodeShareModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ContentNodeShareModule\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ContentNodeShareModule\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodeEntry } from '@alfresco/js-api';\n\nexport class TreeBaseNode {\n\n    name: string;\n    nodeId: string;\n    level: number;\n    expandable = true;\n    node: NodeEntry;\n\n    constructor(nodeEntry: NodeEntry, level?: number, expandable?: boolean) {\n        this.name = nodeEntry.entry.name;\n        this.nodeId = nodeEntry.entry.id;\n        this.level = level ? level : 0;\n        this.expandable = expandable ? expandable : true;\n        this.node = nodeEntry ? new NodeEntry(nodeEntry) : undefined;\n\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TreeBaseNode } from '../models/tree-view.model';\nimport { NodePaging, NodeEntry } from '@alfresco/js-api';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TreeViewService {\n\n    constructor(private nodeApi: NodesApiService) {\n    }\n\n    getTreeNodes(nodeId): Observable<TreeBaseNode[]> {\n        return this.nodeApi.getNodeChildren(nodeId)\n            .pipe(\n                map((nodePage: NodePaging) => {\n                    return nodePage.list.entries.filter((node) => node.entry.isFolder ? node : null);\n                }),\n                map((nodes: NodeEntry[]) => nodes.map((node) => new TreeBaseNode(node)))\n            );\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { CollectionViewer, SelectionChange } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { TreeBaseNode } from '../models/tree-view.model';\nimport { TreeViewService } from '../services/tree-view.service';\n\n@Injectable()\nexport class TreeViewDataSource {\n\n    treeNodes: TreeBaseNode[];\n    dataChange = new BehaviorSubject<TreeBaseNode[]>([]);\n    childrenSubscription = null;\n    changeSubscription = null;\n\n    get data(): TreeBaseNode[] {\n        return this.treeNodes;\n    }\n\n    set data(value: TreeBaseNode[]) {\n        this.treeControl.dataNodes = value;\n        this.dataChange.next(value);\n    }\n\n    constructor(private treeControl: FlatTreeControl<TreeBaseNode>,\n                private treeViewService: TreeViewService) {\n        this.dataChange.subscribe((treeNodes) => this.treeNodes = treeNodes);\n    }\n\n    connect(collectionViewer: CollectionViewer): Observable<TreeBaseNode[]> {\n        this.changeSubscription = this.treeControl.expansionModel.onChange.subscribe((change) => {\n            if ((change as SelectionChange<TreeBaseNode>).added &&\n                (change as SelectionChange<TreeBaseNode>).added.length > 0) {\n                this.expandTreeNodes(change as SelectionChange<TreeBaseNode>);\n            } else if ((change as SelectionChange<TreeBaseNode>).removed) {\n                this.reduceTreeNodes(change as SelectionChange<TreeBaseNode>);\n            }\n        });\n        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        if (this.childrenSubscription) {\n            this.childrenSubscription.unsubscribe();\n        }\n        if (this.changeSubscription) {\n            this.changeSubscription.unsubscribe();\n        }\n    }\n\n    private expandTreeNodes(change: SelectionChange<TreeBaseNode>) {\n        change.added.forEach((node) => this.expandNode(node));\n    }\n\n    private reduceTreeNodes(change: SelectionChange<TreeBaseNode>) {\n        change.removed.slice().reverse().forEach((node) => this.toggleNode(node));\n    }\n\n    private expandNode(node: TreeBaseNode) {\n        this.childrenSubscription = this.treeViewService.getTreeNodes(node.nodeId)\n            .subscribe((children) => {\n                const index = this.data.indexOf(node);\n                if (!children || index < 0) {\n                    node.expandable = false;\n                    return;\n                }\n                const nodes = children.map((actualNode) => {\n                    actualNode.level = node.level + 1;\n                    return actualNode;\n                });\n                this.data.splice(index + 1, 0, ...nodes);\n                this.dataChange.next(this.data);\n            });\n    }\n\n    toggleNode(node: TreeBaseNode) {\n        const index = this.data.indexOf(node);\n        let count = 0;\n        for (let i = index + 1; i < this.data.length\n            && this.data[i].level > node.level; i++ , count++) { }\n        this.data.splice(index + 1, count);\n        this.dataChange.next(this.data);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { TreeBaseNode } from '../models/tree-view.model';\nimport { TreeViewDataSource } from '../data/tree-view-datasource';\nimport { TreeViewService } from '../services/tree-view.service';\nimport { NodeEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-tree-view-list',\n    templateUrl: 'tree-view.component.html',\n    styleUrls: ['tree-view.component.scss']\n})\n\nexport class TreeViewComponent implements OnChanges {\n\n    /** Identifier of the node to display. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when a node in the tree view is clicked. */\n    @Output()\n    nodeClicked: EventEmitter<NodeEntry> = new EventEmitter();\n\n    /** Emitted when an invalid node id is given. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    treeControl: FlatTreeControl<TreeBaseNode>;\n    dataSource: TreeViewDataSource;\n\n    constructor(private treeViewService: TreeViewService) {\n        this.treeControl = new FlatTreeControl<TreeBaseNode>(this.getLevel, this.isExpandable);\n        this.dataSource = new TreeViewDataSource(this.treeControl, this.treeViewService);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['nodeId'] && changes['nodeId'].currentValue &&\n            changes['nodeId'].currentValue !== changes['nodeId'].previousValue) {\n            this.loadTreeNode();\n        } else {\n            this.dataSource.data = [];\n        }\n    }\n\n    onNodeClicked(node: NodeEntry) {\n        this.nodeClicked.emit(node);\n    }\n\n    getLevel = (node: TreeBaseNode) => node.level;\n\n    isExpandable = (node: TreeBaseNode) => node.expandable;\n\n    hasChild = (level: number, nodeData: TreeBaseNode) => nodeData.expandable;\n\n    private loadTreeNode() {\n        this.treeViewService.getTreeNodes(this.nodeId)\n            .subscribe(\n                (treeNode: TreeBaseNode[]) => {\n                    this.dataSource.data = treeNode;\n                },\n                (error) => this.error.emit(error)\n            );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\nimport { TreeViewComponent } from './components/tree-view.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule.forChild()\n    ],\n    declarations: [\n        TreeViewComponent\n    ],\n    exports: [\n        TreeViewComponent\n    ]\n})\nexport class TreeViewModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';\n\nimport { MaterialModule } from './material.module';\n\nimport { SocialModule } from './social/social.module';\nimport { TagModule } from './tag/tag.module';\nimport { WebScriptModule } from './webscript/webscript.module';\nimport { DocumentListModule } from './document-list/document-list.module';\nimport { UploadModule } from './upload/upload.module';\nimport { SearchModule } from './search/search.module';\nimport { SitesDropdownModule } from './site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from './breadcrumb/breadcrumb.module';\nimport { VersionManagerModule } from './version-manager/version-manager.module';\nimport { ContentNodeSelectorModule } from './content-node-selector/content-node-selector.module';\nimport { ContentNodeShareModule } from './content-node-share/content-node-share.module';\nimport { ContentDirectiveModule } from './directives/content-directive.module';\nimport { DialogModule } from './dialogs/dialog.module';\nimport { FolderDirectiveModule } from './folder-directive/folder-directive.module';\nimport { ContentMetadataModule } from './content-metadata/content-metadata.module';\nimport { PermissionManagerModule } from './permission-manager/permission-manager.module';\nimport { TreeViewModule } from './tree-view/tree-view.module';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule,\n        SearchModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ],\n    exports: [\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ]\n})\nexport class ContentModuleLazy {}\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule,\n        SearchModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-content-services',\n                source: 'assets/adf-content-services'\n            }\n        }\n    ],\n    exports: [\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ]\n})\nexport class ContentModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ContentModule,\n            providers: [\n                {\n                    provide: TRANSLATION_PROVIDER,\n                    multi: true,\n                    useValue: {\n                        name: 'adf-content-services',\n                        source: 'assets/adf-content-services'\n                    }\n                }\n            ]\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ContentModuleLazy\n        };\n    }\n}\n"]}