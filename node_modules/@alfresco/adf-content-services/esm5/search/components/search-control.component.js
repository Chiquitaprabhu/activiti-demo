/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AuthenticationService, ThumbnailService, UserPreferencesService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, QueryList, ViewEncapsulation, ViewChild, ViewChildren, ElementRef, ContentChild } from '@angular/core';
import { Subject } from 'rxjs';
import { SearchComponent } from './search.component';
import { searchAnimation } from './animations';
import { MatListItem } from '@angular/material';
import { EmptySearchResultComponent } from './empty-search-result.component';
import { debounceTime, filter, takeUntil } from 'rxjs/operators';
var SearchControlComponent = /** @class */ (function () {
    function SearchControlComponent(authService, thumbnailService, userPreferencesService) {
        var _this = this;
        this.authService = authService;
        this.thumbnailService = thumbnailService;
        this.userPreferencesService = userPreferencesService;
        /**
         * Toggles whether to use an expanding search control. If false
         * then a regular input is used.
         */
        this.expandable = true;
        /**
         * Toggles highlighting of the search term in the results.
         */
        this.highlight = false;
        /**
         * Type of the input field to render, e.g. "search" or "text" (default).
         */
        this.inputType = 'text';
        /**
         * Toggles auto-completion of the search input field.
         */
        this.autocomplete = false;
        /**
         * Toggles "find-as-you-type" suggestions for possible matches.
         */
        this.liveSearchEnabled = true;
        /**
         * Maximum number of results to show in the live search.
         */
        this.liveSearchMaxResults = 5;
        /**
         * Emitted when the search is submitted by pressing the ENTER key.
         * The search term is provided as the value of the event.
         */
        this.submit = new EventEmitter();
        /**
         * Emitted when the search term is changed. The search term is provided
         * in the 'value' property of the returned object.  If the term is less
         * than three characters in length then it is truncated to an empty
         * string.
         */
        this.searchChange = new EventEmitter();
        /**
         * Emitted when a file item from the list of "find-as-you-type" results is selected.
         */
        this.optionClicked = new EventEmitter();
        this.searchTerm = '';
        this.noSearchResultTemplate = null;
        this.toggleSearch = new Subject();
        this.focusSubject = new Subject();
        this.onDestroy$ = new Subject();
        this.dir = 'ltr';
        this.toggleSearch.asObservable().pipe(debounceTime(200)).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.expandable) {
                _this.subscriptAnimationState = _this.toggleAnimation();
                if (_this.subscriptAnimationState.value === 'inactive') {
                    _this.searchTerm = '';
                    _this.searchAutocomplete.resetResults();
                    if (document.activeElement.id === _this.searchInput.nativeElement.id) {
                        _this.searchInput.nativeElement.blur();
                    }
                }
            }
        }));
    }
    /**
     * @param {?} animationDoneEvent
     * @return {?}
     */
    SearchControlComponent.prototype.applySearchFocus = /**
     * @param {?} animationDoneEvent
     * @return {?}
     */
    function (animationDoneEvent) {
        if (animationDoneEvent.toState === 'active') {
            this.searchInput.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.userPreferencesService
            .select('textOrientation')
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} direction
         * @return {?}
         */
        function (direction) {
            _this.dir = direction;
            _this.subscriptAnimationState = _this.getAnimationState();
        }));
        this.subscriptAnimationState = this.getAnimationState();
        this.setupFocusEventHandlers();
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.isNoSearchTemplatePresent = /**
     * @return {?}
     */
    function () {
        return this.emptySearchTemplate ? true : false;
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.focusSubject) {
            this.focusSubject.complete();
            this.focusSubject = null;
        }
        if (this.toggleSearch) {
            this.toggleSearch.complete();
            this.toggleSearch = null;
        }
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.isLoggedIn = /**
     * @return {?}
     */
    function () {
        return this.authService.isEcmLoggedIn();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchControlComponent.prototype.searchSubmit = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.submit.emit(event);
        this.toggleSearchBar();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchControlComponent.prototype.inputChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.searchChange.emit(event);
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.getAutoComplete = /**
     * @return {?}
     */
    function () {
        return this.autocomplete ? 'on' : 'off';
    };
    /**
     * @param {?} node
     * @return {?}
     */
    SearchControlComponent.prototype.getMimeTypeIcon = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var mimeType = this.getMimeType(node);
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    SearchControlComponent.prototype.getMimeType = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var mimeType;
        if (node.entry.content && node.entry.content.mimeType) {
            mimeType = node.entry.content.mimeType;
        }
        if (node.entry.isFolder) {
            mimeType = 'folder';
        }
        return mimeType;
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.isSearchBarActive = /**
     * @return {?}
     */
    function () {
        return this.subscriptAnimationState.value === 'active' && this.liveSearchEnabled;
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.toggleSearchBar = /**
     * @return {?}
     */
    function () {
        if (this.toggleSearch) {
            this.toggleSearch.next();
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SearchControlComponent.prototype.elementClicked = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.entry) {
            this.optionClicked.next(item);
            this.toggleSearchBar();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchControlComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.focusSubject.next($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchControlComponent.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.focusSubject.next($event);
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.activateToolbar = /**
     * @return {?}
     */
    function () {
        if (!this.isSearchBarActive()) {
            this.toggleSearchBar();
        }
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.selectFirstResult = /**
     * @return {?}
     */
    function () {
        if (this.listResultElement && this.listResultElement.length > 0) {
            /** @type {?} */
            var firstElement = (/** @type {?} */ (this.listResultElement.first));
            firstElement._getHostElement().focus();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchControlComponent.prototype.onRowArrowDown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var nextElement = this.getNextElementSibling((/** @type {?} */ ($event.target)));
        if (nextElement) {
            nextElement.focus();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchControlComponent.prototype.onRowArrowUp = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var previousElement = this.getPreviousElementSibling((/** @type {?} */ ($event.target)));
        if (previousElement) {
            previousElement.focus();
        }
        else {
            this.searchInput.nativeElement.focus();
            this.focusSubject.next(new FocusEvent('focus'));
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchControlComponent.prototype.setupFocusEventHandlers = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var focusEvents = this.focusSubject
            .asObservable()
            .pipe(debounceTime(50), filter((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            return _this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout');
        })));
        focusEvents.subscribe((/**
         * @return {?}
         */
        function () {
            _this.toggleSearchBar();
        }));
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    SearchControlComponent.prototype.getNextElementSibling = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.nextElementSibling;
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    SearchControlComponent.prototype.getPreviousElementSibling = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.previousElementSibling;
    };
    /**
     * @private
     * @return {?}
     */
    SearchControlComponent.prototype.toggleAnimation = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.dir === 'ltr') {
            return this.subscriptAnimationState.value === 'inactive' ?
                { value: 'active', params: { 'margin-left': 13 } } :
                { value: 'inactive', params: { 'transform': 'translateX(82%)' } };
        }
        else {
            return this.subscriptAnimationState.value === 'inactive' ?
                { value: 'active', params: { 'margin-right': 13 } } :
                { value: 'inactive', params: { 'transform': 'translateX(-82%)' } };
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchControlComponent.prototype.getAnimationState = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.dir === 'ltr') {
            return this.expandable ?
                { value: 'inactive', params: { 'transform': 'translateX(82%)' } } :
                { value: 'no-animation' };
        }
        else {
            return this.expandable ?
                { value: 'inactive', params: { 'transform': 'translateX(-82%)' } } :
                { value: 'no-animation' };
        }
    };
    SearchControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-control',
                    template: "<div class=\"adf-search-container\" [attr.state]=\"subscriptAnimationState.value\">\n    <div *ngIf=\"isLoggedIn()\" [@transitionMessages]=\"subscriptAnimationState\"\n         (@transitionMessages.done)=\"applySearchFocus($event)\">\n        <button mat-icon-button\n                *ngIf=\"expandable\"\n                id=\"adf-search-button\"\n                class=\"adf-search-button\"\n                [title]=\"'SEARCH.BUTTON.TOOLTIP' | translate\"\n                (click)=\"toggleSearchBar()\"\n                (keyup.enter)=\"toggleSearchBar()\">\n            <mat-icon [attr.aria-label]=\"'SEARCH.BUTTON.ARIA-LABEL' | translate\">search</mat-icon>\n        </button>\n        <mat-form-field class=\"adf-input-form-field-divider\">\n            <input matInput\n                   #searchInput\n                   [attr.aria-label]=\"'SEARCH.INPUT.ARIA-LABEL' | translate\"\n                   [attr.type]=\"inputType\"\n                   [autocomplete]=\"getAutoComplete()\"\n                   id=\"adf-control-input\"\n                   [(ngModel)]=\"searchTerm\"\n                   (focus)=\"activateToolbar()\"\n                   (blur)=\"onBlur($event)\"\n                   (keyup.escape)=\"toggleSearchBar()\"\n                   (keyup.arrowdown)=\"selectFirstResult()\"\n                   (ngModelChange)=\"inputChange($event)\"\n                   [searchAutocomplete]=\"auto\"\n                   (keyup.enter)=\"searchSubmit($event)\">\n        </mat-form-field>\n    </div>\n</div>\n\n<adf-search #search\n            #auto=\"searchAutocomplete\"\n            class=\"adf-search-result-autocomplete\"\n            [maxResults]=\"liveSearchMaxResults\">\n    <ng-template let-data>\n        <mat-list *ngIf=\"isSearchBarActive()\" id=\"autocomplete-search-result-list\">\n            <mat-list-item\n                *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                id=\"result_option_{{idx}}\"\n                [attr.data-automation-id]=\"'autocomplete_for_' + item.entry.name\"\n                [tabindex]=\"0\"\n                (focus)=\"onFocus($event)\"\n                (blur)=\"onBlur($event)\"\n                (keyup.arrowdown)=\"onRowArrowDown($event)\"\n                (keyup.arrowup)=\"onRowArrowUp($event)\"\n                class=\"adf-search-autocomplete-item\"\n                (click)=\"elementClicked(item)\"\n                (keyup.enter)=\"elementClicked(item)\"\n                (touchend)=\"elementClicked(item)\">\n                <!-- This is a comment -->\n                <mat-icon mat-list-icon>\n                    <img [alt]=\"getMimeType(item)\" [src]=\"getMimeTypeIcon(item)\"/>\n                </mat-icon>\n                <h4 mat-line id=\"result_name_{{idx}}\"\n                    *ngIf=\"highlight; else elseBlock\"\n                    class=\"adf-search-fixed-text\"\n                    [innerHtml]=\"item.entry.name | highlight: searchTerm\">\n                    {{ item?.entry.name }}\n                </h4>\n                <ng-template #elseBlock>\n                    <h4 class=\"adf-search-fixed-text\" mat-line id=\"result_name_{{idx}}\"\n                        [innerHtml]=\"item.entry.name\"></h4>\n                </ng-template>\n                <p mat-line class=\"adf-search-fixed-text\"> {{item?.entry.createdByUser.displayName}} </p>\n            </mat-list-item>\n            <mat-list-item id=\"search_no_result\"\n                           data-automation-id=\"search_no_result_found\"\n                           *ngIf=\"data?.list?.entries.length === 0\">\n                <ng-content\n                    selector=\"adf-empty-search-result\"\n                    *ngIf=\"isNoSearchTemplatePresent() else defaultNoResult\">\n                </ng-content>\n                <ng-template #defaultNoResult>\n                    <p mat-line class=\"adf-search-fixed-text\">{{ 'SEARCH.RESULTS.NONE' | translate:{searchTerm:\n                        searchTerm} }}</p>\n                </ng-template>\n            </mat-list-item>\n        </mat-list>\n    </ng-template>\n</adf-search>\n",
                    animations: [searchAnimation],
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-control' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SearchControlComponent.ctorParameters = function () { return [
        { type: AuthenticationService },
        { type: ThumbnailService },
        { type: UserPreferencesService }
    ]; };
    SearchControlComponent.propDecorators = {
        expandable: [{ type: Input }],
        highlight: [{ type: Input }],
        inputType: [{ type: Input }],
        autocomplete: [{ type: Input }],
        liveSearchEnabled: [{ type: Input }],
        liveSearchMaxResults: [{ type: Input }],
        submit: [{ type: Output }],
        searchChange: [{ type: Output }],
        optionClicked: [{ type: Output }],
        searchAutocomplete: [{ type: ViewChild, args: ['search',] }],
        searchInput: [{ type: ViewChild, args: ['searchInput',] }],
        listResultElement: [{ type: ViewChildren, args: [MatListItem,] }],
        emptySearchTemplate: [{ type: ContentChild, args: [EmptySearchResultComponent,] }]
    };
    return SearchControlComponent;
}());
export { SearchControlComponent };
if (false) {
    /**
     * Toggles whether to use an expanding search control. If false
     * then a regular input is used.
     * @type {?}
     */
    SearchControlComponent.prototype.expandable;
    /**
     * Toggles highlighting of the search term in the results.
     * @type {?}
     */
    SearchControlComponent.prototype.highlight;
    /**
     * Type of the input field to render, e.g. "search" or "text" (default).
     * @type {?}
     */
    SearchControlComponent.prototype.inputType;
    /**
     * Toggles auto-completion of the search input field.
     * @type {?}
     */
    SearchControlComponent.prototype.autocomplete;
    /**
     * Toggles "find-as-you-type" suggestions for possible matches.
     * @type {?}
     */
    SearchControlComponent.prototype.liveSearchEnabled;
    /**
     * Maximum number of results to show in the live search.
     * @type {?}
     */
    SearchControlComponent.prototype.liveSearchMaxResults;
    /**
     * Emitted when the search is submitted by pressing the ENTER key.
     * The search term is provided as the value of the event.
     * @type {?}
     */
    SearchControlComponent.prototype.submit;
    /**
     * Emitted when the search term is changed. The search term is provided
     * in the 'value' property of the returned object.  If the term is less
     * than three characters in length then it is truncated to an empty
     * string.
     * @type {?}
     */
    SearchControlComponent.prototype.searchChange;
    /**
     * Emitted when a file item from the list of "find-as-you-type" results is selected.
     * @type {?}
     */
    SearchControlComponent.prototype.optionClicked;
    /** @type {?} */
    SearchControlComponent.prototype.searchAutocomplete;
    /** @type {?} */
    SearchControlComponent.prototype.searchInput;
    /**
     * @type {?}
     * @private
     */
    SearchControlComponent.prototype.listResultElement;
    /** @type {?} */
    SearchControlComponent.prototype.emptySearchTemplate;
    /** @type {?} */
    SearchControlComponent.prototype.searchTerm;
    /** @type {?} */
    SearchControlComponent.prototype.subscriptAnimationState;
    /** @type {?} */
    SearchControlComponent.prototype.noSearchResultTemplate;
    /**
     * @type {?}
     * @private
     */
    SearchControlComponent.prototype.toggleSearch;
    /**
     * @type {?}
     * @private
     */
    SearchControlComponent.prototype.focusSubject;
    /**
     * @type {?}
     * @private
     */
    SearchControlComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    SearchControlComponent.prototype.dir;
    /** @type {?} */
    SearchControlComponent.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    SearchControlComponent.prototype.thumbnailService;
    /**
     * @type {?}
     * @private
     */
    SearchControlComponent.prototype.userPreferencesService;
}
//# sourceMappingURL=data:application/json;base64,