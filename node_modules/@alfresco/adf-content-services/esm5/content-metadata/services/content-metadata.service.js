/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BasicPropertiesService } from './basic-properties.service';
import { of, iif, Subject } from 'rxjs';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';
import { PropertyDescriptorsService } from './property-descriptors.service';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./basic-properties.service";
import * as i2 from "./config/content-metadata-config.factory";
import * as i3 from "./property-groups-translator.service";
import * as i4 from "./property-descriptors.service";
var ContentMetadataService = /** @class */ (function () {
    function ContentMetadataService(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
        this.error = new Subject();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    ContentMetadataService.prototype.getBasicProperties = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return of(this.basicPropertiesService.getProperties(node));
    };
    /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    ContentMetadataService.prototype.getGroupedProperties = /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    function (node, presetName) {
        var _this = this;
        if (presetName === void 0) { presetName = 'default'; }
        /** @type {?} */
        var groupedProperties = of([]);
        if (node.aspectNames) {
            /** @type {?} */
            var contentMetadataConfig_1 = this.contentMetadataConfigFactory.get(presetName);
            /** @type {?} */
            var groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter((/**
             * @param {?} groupName
             * @return {?}
             */
            function (groupName) { return contentMetadataConfig_1.isGroupAllowed(groupName); }));
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(switchMap((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) {
                    return iif((/**
                     * @return {?}
                     */
                    function () { return contentMetadataConfig_1.isIncludeAllEnabled(); }), of(contentMetadataConfig_1.appendAllPreset(groups).concat(contentMetadataConfig_1.reorganiseByConfig(groups))), of(contentMetadataConfig_1.reorganiseByConfig(groups)));
                })), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) { return contentMetadataConfig_1.filterExcludedPreset(groups); })), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) { return _this.filterEmptyPreset(groups); })), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) { return _this.setTitleToNameIfNotSet(groups); })), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) { return _this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties); })));
            }
        }
        return groupedProperties;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    ContentMetadataService.prototype.setTitleToNameIfNotSet = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        propertyGroups.map((/**
         * @param {?} propertyGroup
         * @return {?}
         */
        function (propertyGroup) {
            propertyGroup.title = propertyGroup.title || propertyGroup.name;
        }));
        return propertyGroups;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    ContentMetadataService.prototype.filterEmptyPreset = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        return propertyGroups.filter((/**
         * @param {?} props
         * @return {?}
         */
        function (props) { return props.properties.length; }));
    };
    ContentMetadataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ContentMetadataService.ctorParameters = function () { return [
        { type: BasicPropertiesService },
        { type: ContentMetadataConfigFactory },
        { type: PropertyGroupTranslatorService },
        { type: PropertyDescriptorsService }
    ]; };
    /** @nocollapse */ ContentMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function ContentMetadataService_Factory() { return new ContentMetadataService(i0.inject(i1.BasicPropertiesService), i0.inject(i2.ContentMetadataConfigFactory), i0.inject(i3.PropertyGroupTranslatorService), i0.inject(i4.PropertyDescriptorsService)); }, token: ContentMetadataService, providedIn: "root" });
    return ContentMetadataService;
}());
export { ContentMetadataService };
if (false) {
    /** @type {?} */
    ContentMetadataService.prototype.error;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.basicPropertiesService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.contentMetadataConfigFactory;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyGroupTranslatorService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyDescriptorsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb250ZW50LW1ldGFkYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHdEYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDeEYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBRWhEO0lBT0ksZ0NBQW9CLHNCQUE4QyxFQUM5Qyw0QkFBMEQsRUFDMUQsOEJBQThELEVBQzlELDBCQUFzRDtRQUh0RCwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzlDLGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7UUFDMUQsbUNBQThCLEdBQTlCLDhCQUE4QixDQUFnQztRQUM5RCwrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTRCO1FBTDFFLFVBQUssR0FBRyxJQUFJLE9BQU8sRUFBMkMsQ0FBQztJQU0vRCxDQUFDOzs7OztJQUVELG1EQUFrQjs7OztJQUFsQixVQUFtQixJQUFVO1FBQ3pCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FB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LCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBCYXNpY1Byb3BlcnRpZXNTZXJ2aWNlIH0gZnJvbSAnLi9iYXNpYy1wcm9wZXJ0aWVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIGlpZiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvcGVydHlHcm91cFRyYW5zbGF0b3JTZXJ2aWNlIH0gZnJvbSAnLi9wcm9wZXJ0eS1ncm91cHMtdHJhbnNsYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IENhcmRWaWV3SXRlbSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBDYXJkVmlld0dyb3VwLCBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb250ZW50LW1ldGFkYXRhLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeSB9IGZyb20gJy4vY29uZmlnL2NvbnRlbnQtbWV0YWRhdGEtY29uZmlnLmZhY3RvcnknO1xuaW1wb3J0IHsgUHJvcGVydHlEZXNjcmlwdG9yc1NlcnZpY2UgfSBmcm9tICcuL3Byb3BlcnR5LWRlc2NyaXB0b3JzLnNlcnZpY2UnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE1ldGFkYXRhU2VydmljZSB7XG5cbiAgICBlcnJvciA9IG5ldyBTdWJqZWN0PHsgc3RhdHVzQ29kZTogbnVtYmVyLCBtZXNzYWdlOiBzdHJpbmcgfT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzaWNQcm9wZXJ0aWVzU2VydmljZTogQmFzaWNQcm9wZXJ0aWVzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGNvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3Rvcnk6IENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3RvcnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBwcm9wZXJ0eUdyb3VwVHJhbnNsYXRvclNlcnZpY2U6IFByb3BlcnR5R3JvdXBUcmFuc2xhdG9yU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlOiBQcm9wZXJ0eURlc2NyaXB0b3JzU2VydmljZSkge1xuICAgIH1cblxuICAgIGdldEJhc2ljUHJvcGVydGllcyhub2RlOiBOb2RlKTogT2JzZXJ2YWJsZTxDYXJkVmlld0l0ZW1bXT4ge1xuICAgICAgICByZXR1cm4gb2YodGhpcy5iYXNpY1Byb3BlcnRpZXNTZXJ2aWNlLmdldFByb3BlcnRpZXMobm9kZSkpO1xuICAgIH1cblxuICAgIGdldEdyb3VwZWRQcm9wZXJ0aWVzKG5vZGU6IE5vZGUsIHByZXNldE5hbWU6IHN0cmluZyA9ICdkZWZhdWx0Jyk6IE9ic2VydmFibGU8Q2FyZFZpZXdHcm91cFtdPiB7XG4gICAgICAgIGxldCBncm91cGVkUHJvcGVydGllcyA9IG9mKFtdKTtcblxuICAgICAgICBpZiAobm9kZS5hc3BlY3ROYW1lcykge1xuICAgICAgICAgICAgY29uc3QgY29udGVudE1ldGFkYXRhQ29uZmlnID0gdGhpcy5jb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5LmdldChwcmVzZXROYW1lKSxcbiAgICAgICAgICAgICAgICBncm91cE5hbWVzID0gbm9kZS5hc3BlY3ROYW1lc1xuICAgICAgICAgICAgICAgICAgICAuY29uY2F0KG5vZGUubm9kZVR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGdyb3VwTmFtZSkgPT4gY29udGVudE1ldGFkYXRhQ29uZmlnLmlzR3JvdXBBbGxvd2VkKGdyb3VwTmFtZSkpO1xuXG4gICAgICAgICAgICBpZiAoZ3JvdXBOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBlZFByb3BlcnRpZXMgPSB0aGlzLnByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlLmxvYWQoZ3JvdXBOYW1lcykucGlwZShcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwKChncm91cHMpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBpaWYoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4gY29udGVudE1ldGFkYXRhQ29uZmlnLmlzSW5jbHVkZUFsbEVuYWJsZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZihjb250ZW50TWV0YWRhdGFDb25maWcuYXBwZW5kQWxsUHJlc2V0KGdyb3VwcykuY29uY2F0KGNvbnRlbnRNZXRhZGF0YUNvbmZpZy5yZW9yZ2FuaXNlQnlDb25maWcoZ3JvdXBzKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mKGNvbnRlbnRNZXRhZGF0YUNvbmZpZy5yZW9yZ2FuaXNlQnlDb25maWcoZ3JvdXBzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICBtYXAoKGdyb3VwcykgPT4gY29udGVudE1ldGFkYXRhQ29uZmlnLmZpbHRlckV4Y2x1ZGVkUHJlc2V0KGdyb3VwcykpLFxuICAgICAgICAgICAgICAgICAgICBtYXAoKGdyb3VwcykgPT4gdGhpcy5maWx0ZXJFbXB0eVByZXNldChncm91cHMpKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwKChncm91cHMpID0+IHRoaXMuc2V0VGl0bGVUb05hbWVJZk5vdFNldChncm91cHMpKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwKChncm91cHMpID0+IHRoaXMucHJvcGVydHlHcm91cFRyYW5zbGF0b3JTZXJ2aWNlLnRyYW5zbGF0ZVRvQ2FyZFZpZXdHcm91cHMoZ3JvdXBzLCBub2RlLnByb3BlcnRpZXMpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ3JvdXBlZFByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgc2V0VGl0bGVUb05hbWVJZk5vdFNldChwcm9wZXJ0eUdyb3VwczogT3JnYW5pc2VkUHJvcGVydHlHcm91cFtdKTogT3JnYW5pc2VkUHJvcGVydHlHcm91cFtdIHtcbiAgICAgICAgcHJvcGVydHlHcm91cHMubWFwKChwcm9wZXJ0eUdyb3VwKSA9PiB7XG4gICAgICAgICAgICBwcm9wZXJ0eUdyb3VwLnRpdGxlID0gcHJvcGVydHlHcm91cC50aXRsZSB8fCBwcm9wZXJ0eUdyb3VwLm5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJvcGVydHlHcm91cHM7XG4gICAgfVxuXG4gICAgZmlsdGVyRW1wdHlQcmVzZXQocHJvcGVydHlHcm91cHM6IE9yZ2FuaXNlZFByb3BlcnR5R3JvdXBbXSk6IE9yZ2FuaXNlZFByb3BlcnR5R3JvdXBbXSAge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlHcm91cHMuZmlsdGVyKChwcm9wcykgPT4gcHJvcHMucHJvcGVydGllcy5sZW5ndGgpO1xuICAgIH1cbn1cbiJdfQ==